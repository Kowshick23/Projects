
GENERAL_PURPOSE_BOARD_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009464  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e40  08009604  08009604  0000a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a444  0800a444  0000c0ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800a444  0800a444  0000c0ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a444  0800a444  0000c0ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a444  0800a444  0000b444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a448  0800a448  0000b448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800a44c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c0ec  2**0
                  CONTENTS
 10 .bss          000014fc  200000f0  200000f0  0000c0f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200015ec  200015ec  0000c0f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c0ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c851  00000000  00000000  0000c11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f7c  00000000  00000000  0002896d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0002c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efa  00000000  00000000  0002dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ec8  00000000  00000000  0002eb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f16e  00000000  00000000  00055a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de00d  00000000  00000000  00074bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00152bc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054ec  00000000  00000000  00152c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001580f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095ec 	.word	0x080095ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	080095ec 	.word	0x080095ec

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <vApplicationGetIdleTaskMemory+0x30>)
 8000b6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	2000010c 	.word	0x2000010c
 8000b88:	200001ac 	.word	0x200001ac

08000b8c <main>:
void StartTask03(void const * argument);
void StartTask04(void const * argument);


int main(void)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b09c      	sub	sp, #112	@ 0x70
 8000b90:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f000 fdf3 	bl	800177c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f871 	bl	8000c7c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f000 f975 	bl	8000e88 <MX_GPIO_Init>
  MX_CAN_Init();
 8000b9e:	f000 f93d 	bl	8000e1c <MX_CAN_Init>
  MX_ADC1_Init();
 8000ba2:	f000 f8cb 	bl	8000d3c <MX_ADC1_Init>

  gpio_init();
 8000ba6:	f006 ffd9 	bl	8007b5c <gpio_init>
  can_main_init();
 8000baa:	f006 f949 	bl	8006e40 <can_main_init>
  dbc_init();
 8000bae:	f006 faef 	bl	8007190 <dbc_init>
  hashmap_init();
 8000bb2:	f006 fb9f 	bl	80072f4 <hashmap_init>
  adc_init();
 8000bb6:	f006 f8af 	bl	8006d18 <adc_init>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 8000bba:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <main+0xd0>)
 8000bbc:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000bc0:	461d      	mov	r5, r3
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 fe3c 	bl	8005852 <osThreadCreate>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a20      	ldr	r2, [pc, #128]	@ (8000c60 <main+0xd4>)
 8000bde:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <main+0xd8>)
 8000be2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000be6:	461d      	mov	r5, r3
 8000be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000bf4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fe29 	bl	8005852 <osThreadCreate>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <main+0xdc>)
 8000c04:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000c06:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <main+0xe0>)
 8000c08:	f107 041c 	add.w	r4, r7, #28
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f004 fe16 	bl	8005852 <osThreadCreate>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a11      	ldr	r2, [pc, #68]	@ (8000c70 <main+0xe4>)
 8000c2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <main+0xe8>)
 8000c2e:	463c      	mov	r4, r7
 8000c30:	461d      	mov	r5, r3
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fe05 	bl	8005852 <osThreadCreate>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <main+0xec>)
 8000c4c:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000c4e:	f004 fdf9 	bl	8005844 <osKernelStart>
 8000c52:	2300      	movs	r3, #0

}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3770      	adds	r7, #112	@ 0x70
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5c:	08009610 	.word	0x08009610
 8000c60:	20000444 	.word	0x20000444
 8000c64:	08009638 	.word	0x08009638
 8000c68:	20000448 	.word	0x20000448
 8000c6c:	08009660 	.word	0x08009660
 8000c70:	2000044c 	.word	0x2000044c
 8000c74:	08009688 	.word	0x08009688
 8000c78:	20000450 	.word	0x20000450

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0a6      	sub	sp, #152	@ 0x98
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c86:	2228      	movs	r2, #40	@ 0x28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f008 f9da 	bl	8009044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2258      	movs	r2, #88	@ 0x58
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f008 f9cc 	bl	8009044 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cac:	2302      	movs	r3, #2
 8000cae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cc8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ccc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 fe34 	bl	8003948 <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 fb8d 	bl	8001404 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	230f      	movs	r3, #15
 8000cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d04:	2102      	movs	r1, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 fe72 	bl	80049f0 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d12:	f000 fb77 	bl	8001404 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 f894 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d2e:	f000 fb69 	bl	8001404 <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3798      	adds	r7, #152	@ 0x98
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d66:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d72:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d78:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d86:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000da8:	2204      	movs	r2, #4
 8000daa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db8:	4817      	ldr	r0, [pc, #92]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000dba:	f000 fd15 	bl	80017e8 <HAL_ADC_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000dc4:	f000 fb1e 	bl	8001404 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000dd4:	f001 fc48 	bl	8002668 <HAL_ADCEx_MultiModeConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000dde:	f000 fb11 	bl	8001404 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <MX_ADC1_Init+0xdc>)
 8000e00:	f001 f948 	bl	8002094 <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e0a:	f000 fafb 	bl	8001404 <Error_Handler>
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200003cc 	.word	0x200003cc

08000e1c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  hcan.Instance = CAN;
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e22:	4a18      	ldr	r2, [pc, #96]	@ (8000e84 <MX_CAN_Init+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e28:	2209      	movs	r2, #9
 8000e2a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e32:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e3a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e3e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e42:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000e46:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <MX_CAN_Init+0x64>)
 8000e6e:	f001 fe6d 	bl	8002b4c <HAL_CAN_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e78:	f000 fac4 	bl	8001404 <Error_Handler>
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000041c 	.word	0x2000041c
 8000e84:	40006400 	.word	0x40006400

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	@ 0x38
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9e:	4bb8      	ldr	r3, [pc, #736]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4ab7      	ldr	r2, [pc, #732]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4bb5      	ldr	r3, [pc, #724]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4bb2      	ldr	r3, [pc, #712]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4ab1      	ldr	r2, [pc, #708]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000ebc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4baf      	ldr	r3, [pc, #700]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4bac      	ldr	r3, [pc, #688]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4aab      	ldr	r2, [pc, #684]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4ba9      	ldr	r3, [pc, #676]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	4ba6      	ldr	r3, [pc, #664]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4aa5      	ldr	r2, [pc, #660]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4ba3      	ldr	r3, [pc, #652]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4ba0      	ldr	r3, [pc, #640]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a9f      	ldr	r2, [pc, #636]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b9d      	ldr	r3, [pc, #628]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b9a      	ldr	r3, [pc, #616]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a99      	ldr	r2, [pc, #612]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b97      	ldr	r3, [pc, #604]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2e:	4b94      	ldr	r3, [pc, #592]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a93      	ldr	r2, [pc, #588]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b91      	ldr	r3, [pc, #580]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	4b8e      	ldr	r3, [pc, #568]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a8d      	ldr	r2, [pc, #564]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b8b      	ldr	r3, [pc, #556]	@ (8001180 <MX_GPIO_Init+0x2f8>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f64:	4887      	ldr	r0, [pc, #540]	@ (8001184 <MX_GPIO_Init+0x2fc>)
 8000f66:	f002 fc99 	bl	800389c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000f70:	4885      	ldr	r0, [pc, #532]	@ (8001188 <MX_GPIO_Init+0x300>)
 8000f72:	f002 fc93 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f7c:	4883      	ldr	r0, [pc, #524]	@ (800118c <MX_GPIO_Init+0x304>)
 8000f7e:	f002 fc8d 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f82:	2201      	movs	r2, #1
 8000f84:	f24c 313e 	movw	r1, #49982	@ 0xc33e
 8000f88:	4881      	ldr	r0, [pc, #516]	@ (8001190 <MX_GPIO_Init+0x308>)
 8000f8a:	f002 fc87 	bl	800389c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2|GPIO_PIN_3
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f24c 01ec 	movw	r1, #49388	@ 0xc0ec
 8000f94:	487f      	ldr	r0, [pc, #508]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8000f96:	f002 fc81 	bl	800389c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2140      	movs	r1, #64	@ 0x40
 8000f9e:	487c      	ldr	r0, [pc, #496]	@ (8001190 <MX_GPIO_Init+0x308>)
 8000fa0:	f002 fc7c 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 51fc 	mov.w	r1, #8064	@ 0x1f80
 8000faa:	487b      	ldr	r0, [pc, #492]	@ (8001198 <MX_GPIO_Init+0x310>)
 8000fac:	f002 fc76 	bl	800389c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 6130 	mov.w	r1, #2816	@ 0xb00
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fba:	f002 fc6f 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4876      	ldr	r0, [pc, #472]	@ (800119c <MX_GPIO_Init+0x314>)
 8000fc4:	f002 fc6a 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2170      	movs	r1, #112	@ 0x70
 8000fcc:	486f      	ldr	r0, [pc, #444]	@ (800118c <MX_GPIO_Init+0x304>)
 8000fce:	f002 fc65 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000fd2:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fd8:	2311      	movs	r3, #17
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4866      	ldr	r0, [pc, #408]	@ (8001184 <MX_GPIO_Init+0x2fc>)
 8000fec:	f002 fab4 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ff0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4864      	ldr	r0, [pc, #400]	@ (8001198 <MX_GPIO_Init+0x310>)
 8001008:	f002 faa6 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800100c:	2303      	movs	r3, #3
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	485f      	ldr	r0, [pc, #380]	@ (800119c <MX_GPIO_Init+0x314>)
 8001020:	f002 fa9a 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF5 PF9 PF10
                           PF11 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10
 8001024:	f64e 6328 	movw	r3, #60968	@ 0xee28
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	4853      	ldr	r0, [pc, #332]	@ (8001188 <MX_GPIO_Init+0x300>)
 800103a:	f002 fa8d 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800103e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001044:	2311      	movs	r3, #17
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	484c      	ldr	r0, [pc, #304]	@ (8001188 <MX_GPIO_Init+0x300>)
 8001058:	f002 fa7e 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800105c:	f249 43f0 	movw	r3, #38128	@ 0x94f0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f002 fa70 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001078:	2370      	movs	r3, #112	@ 0x70
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4843      	ldr	r0, [pc, #268]	@ (8001198 <MX_GPIO_Init+0x310>)
 800108c:	f002 fa64 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001090:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	4838      	ldr	r0, [pc, #224]	@ (800118c <MX_GPIO_Init+0x304>)
 80010aa:	f002 fa55 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB15 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80010ae:	f64b 7306 	movw	r3, #48902	@ 0xbf06
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4832      	ldr	r0, [pc, #200]	@ (800118c <MX_GPIO_Init+0x304>)
 80010c4:	f002 fa48 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	482a      	ldr	r0, [pc, #168]	@ (8001188 <MX_GPIO_Init+0x300>)
 80010de:	f002 fa3b 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_OverCurrent_Pin PG10 PG11
                           PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_OverCurrent_Pin|GPIO_PIN_10|GPIO_PIN_11
 80010e2:	f643 4381 	movw	r3, #15489	@ 0x3c81
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4826      	ldr	r0, [pc, #152]	@ (8001190 <MX_GPIO_Init+0x308>)
 80010f8:	f002 fa2e 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG8 PG9 PG14
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80010fc:	f24c 333e 	movw	r3, #49982	@ 0xc33e
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001102:	2311      	movs	r3, #17
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	481e      	ldr	r0, [pc, #120]	@ (8001190 <MX_GPIO_Init+0x308>)
 8001116:	f002 fa1f 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800111a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800112c:	2307      	movs	r3, #7
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	4817      	ldr	r0, [pc, #92]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8001138:	f002 fa0e 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800113c:	f643 4310 	movw	r3, #15376	@ 0x3c10
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8001152:	f002 fa01 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PD2 PD3
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2|GPIO_PIN_3
 8001156:	f24c 03ec 	movw	r3, #49388	@ 0xc0ec
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800115c:	2311      	movs	r3, #17
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	4809      	ldr	r0, [pc, #36]	@ (8001194 <MX_GPIO_Init+0x30c>)
 8001170:	f002 f9f2 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001174:	2340      	movs	r3, #64	@ 0x40
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117c:	e010      	b.n	80011a0 <MX_GPIO_Init+0x318>
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	48001000 	.word	0x48001000
 8001188:	48001400 	.word	0x48001400
 800118c:	48000400 	.word	0x48000400
 8001190:	48001800 	.word	0x48001800
 8001194:	48000c00 	.word	0x48000c00
 8001198:	48000800 	.word	0x48000800
 800119c:	48001c00 	.word	0x48001c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	482c      	ldr	r0, [pc, #176]	@ (8001260 <MX_GPIO_Init+0x3d8>)
 80011b0:	f002 f9d2 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80011b4:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011ba:	2311      	movs	r3, #17
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	4825      	ldr	r0, [pc, #148]	@ (8001264 <MX_GPIO_Init+0x3dc>)
 80011ce:	f002 f9c3 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80011d2:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011d8:	2311      	movs	r3, #17
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ee:	f002 f9b3 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f2:	2304      	movs	r3, #4
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011f6:	2311      	movs	r3, #17
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4817      	ldr	r0, [pc, #92]	@ (8001268 <MX_GPIO_Init+0x3e0>)
 800120a:	f002 f9a5 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800120e:	2370      	movs	r3, #112	@ 0x70
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001212:	2311      	movs	r3, #17
 8001214:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	4811      	ldr	r0, [pc, #68]	@ (800126c <MX_GPIO_Init+0x3e4>)
 8001226:	f002 f997 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122a:	2301      	movs	r3, #1
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	480b      	ldr	r0, [pc, #44]	@ (8001270 <MX_GPIO_Init+0x3e8>)
 8001242:	f002 f989 	bl	8003558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	2028      	movs	r0, #40	@ 0x28
 800124c:	f002 f95a 	bl	8003504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001250:	2028      	movs	r0, #40	@ 0x28
 8001252:	f002 f973 	bl	800353c <HAL_NVIC_EnableIRQ>


}
 8001256:	bf00      	nop
 8001258:	3738      	adds	r7, #56	@ 0x38
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	48001800 	.word	0x48001800
 8001264:	48000800 	.word	0x48000800
 8001268:	48001c00 	.word	0x48001c00
 800126c:	48000400 	.word	0x48000400
 8001270:	48001000 	.word	0x48001000

08001274 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */

void StartDefaultTask(void const * argument)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  for(;;)
  {
		can_control();
 800127c:	f007 fa8c 	bl	8008798 <can_control>
		middleware_variables_input();
 8001280:	f006 fd88 	bl	8007d94 <middleware_variables_input>
		middleware_variables_output();
 8001284:	f006 ffb8 	bl	80081f8 <middleware_variables_output>

		if(task_1_counter == TASK_COUNTER_RANGE)
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <StartDefaultTask+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d108      	bne.n	80012a2 <StartDefaultTask+0x2e>
		{
			 task_1_counter = 0;
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <StartDefaultTask+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);//RED
 8001296:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800129a:	4807      	ldr	r0, [pc, #28]	@ (80012b8 <StartDefaultTask+0x44>)
 800129c:	f002 fb16 	bl	80038cc <HAL_GPIO_TogglePin>
 80012a0:	e004      	b.n	80012ac <StartDefaultTask+0x38>
		}
		else
		{
			task_1_counter++;
 80012a2:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <StartDefaultTask+0x40>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a02      	ldr	r2, [pc, #8]	@ (80012b4 <StartDefaultTask+0x40>)
 80012aa:	6013      	str	r3, [r2, #0]
		}
    osDelay(MIDDLEWARE_TASK_DELAY);
 80012ac:	205e      	movs	r0, #94	@ 0x5e
 80012ae:	f004 fb1c 	bl	80058ea <osDelay>
		can_control();
 80012b2:	e7e3      	b.n	800127c <StartDefaultTask+0x8>
 80012b4:	20000454 	.word	0x20000454
 80012b8:	48000400 	.word	0x48000400

080012bc <StartTask02>:
* @param  argument: Not used
* @retval None
*/

void StartTask02(void const * argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  	can_main_init();
 80012c4:	f005 fdbc 	bl	8006e40 <can_main_init>
		can_receive_data_can_1();
 80012c8:	f005 fedc 	bl	8007084 <can_receive_data_can_1>

		if(task_2_counter == TASK_COUNTER_RANGE)
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <StartTask02+0x3c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d107      	bne.n	80012e4 <StartTask02+0x28>
		{
			 task_2_counter = 0;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <StartTask02+0x3c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);//GREEN
 80012da:	2101      	movs	r1, #1
 80012dc:	4807      	ldr	r0, [pc, #28]	@ (80012fc <StartTask02+0x40>)
 80012de:	f002 faf5 	bl	80038cc <HAL_GPIO_TogglePin>
 80012e2:	e004      	b.n	80012ee <StartTask02+0x32>
		}
		else
		{
			task_2_counter++;
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <StartTask02+0x3c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a03      	ldr	r2, [pc, #12]	@ (80012f8 <StartTask02+0x3c>)
 80012ec:	6013      	str	r3, [r2, #0]

		}
   osDelay(CAN_RECIEVE_TASK_DELAY);
 80012ee:	200a      	movs	r0, #10
 80012f0:	f004 fafb 	bl	80058ea <osDelay>
	  	can_main_init();
 80012f4:	e7e6      	b.n	80012c4 <StartTask02+0x8>
 80012f6:	bf00      	nop
 80012f8:	20000458 	.word	0x20000458
 80012fc:	48000400 	.word	0x48000400

08001300 <StartTask03>:
* @param argument: Not used
* @retval None
*/

void StartTask03(void const * argument)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  for(;;)
  {
		adc_control();
 8001308:	f007 fe82 	bl	8009010 <adc_control>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);//BLUE
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	480a      	ldr	r0, [pc, #40]	@ (8001338 <StartTask03+0x38>)
 8001310:	f002 fadc 	bl	80038cc <HAL_GPIO_TogglePin>
		if(task_3_counter == CAN_HEATBEAT_COUNTER_RANGE)
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <StartTask03+0x3c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2bff      	cmp	r3, #255	@ 0xff
 800131a:	d103      	bne.n	8001324 <StartTask03+0x24>
		{
			task_3_counter = 0;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <StartTask03+0x3c>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e004      	b.n	800132e <StartTask03+0x2e>
		}
		else
		{
			task_3_counter++;
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <StartTask03+0x3c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <StartTask03+0x3c>)
 800132c:	6013      	str	r3, [r2, #0]
		}
    osDelay(ADC_TASK_DELAY);
 800132e:	2001      	movs	r0, #1
 8001330:	f004 fadb 	bl	80058ea <osDelay>
		adc_control();
 8001334:	e7e8      	b.n	8001308 <StartTask03+0x8>
 8001336:	bf00      	nop
 8001338:	48000400 	.word	0x48000400
 800133c:	2000045c 	.word	0x2000045c

08001340 <StartTask04>:
* @param argument: Not used
* @retval None
*/

void StartTask04(void const * argument)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]


  for(;;)
  {
	  /********************FLOWRATE_1**********************/
	   uint8_t gpio_lpm_1 =  HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_11);//PG11
 8001348:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800134c:	481e      	ldr	r0, [pc, #120]	@ (80013c8 <StartTask04+0x88>)
 800134e:	f002 fa8d 	bl	800386c <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
	   if(( prev_lpm_flag_1 == 0)&&(gpio_lpm_1 ==1))
 8001356:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <StartTask04+0x8c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d107      	bne.n	800136e <StartTask04+0x2e>
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d104      	bne.n	800136e <StartTask04+0x2e>
	   {
		   pulse_1++;
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <StartTask04+0x90>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <StartTask04+0x90>)
 800136c:	6013      	str	r3, [r2, #0]
	   }
	   prev_lpm_flag_1 = gpio_lpm_1;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	4a16      	ldr	r2, [pc, #88]	@ (80013cc <StartTask04+0x8c>)
 8001372:	6013      	str	r3, [r2, #0]

	   /********************FLOWRATE_2**********************/
	   uint8_t gpio_lpm_2 =  HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_10);//PG10
 8001374:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001378:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <StartTask04+0x88>)
 800137a:	f002 fa77 	bl	800386c <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	73bb      	strb	r3, [r7, #14]
	   if(( prev_lpm_flag_2 == 0)&&(gpio_lpm_2 ==1))
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <StartTask04+0x94>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d107      	bne.n	800139a <StartTask04+0x5a>
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d104      	bne.n	800139a <StartTask04+0x5a>
	   {
		   pulse_2++;
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <StartTask04+0x98>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <StartTask04+0x98>)
 8001398:	6013      	str	r3, [r2, #0]
	   }
	   prev_lpm_flag_2 = gpio_lpm_2;
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	4a0d      	ldr	r2, [pc, #52]	@ (80013d4 <StartTask04+0x94>)
 800139e:	6013      	str	r3, [r2, #0]

	   flowrate_time();
 80013a0:	f007 fa24 	bl	80087ec <flowrate_time>

		if(task_4_counter == CAN_HEATBEAT_COUNTER_RANGE)
 80013a4:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <StartTask04+0x9c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2bff      	cmp	r3, #255	@ 0xff
 80013aa:	d103      	bne.n	80013b4 <StartTask04+0x74>
		{
			task_4_counter = 0;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <StartTask04+0x9c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e004      	b.n	80013be <StartTask04+0x7e>
		}
		else
		{
			task_4_counter++;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <StartTask04+0x9c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <StartTask04+0x9c>)
 80013bc:	6013      	str	r3, [r2, #0]
		}

	 osDelay(FLOWRATE_TASK_DELAY);
 80013be:	2001      	movs	r0, #1
 80013c0:	f004 fa93 	bl	80058ea <osDelay>
  {
 80013c4:	e7c0      	b.n	8001348 <StartTask04+0x8>
 80013c6:	bf00      	nop
 80013c8:	48001800 	.word	0x48001800
 80013cc:	200003c4 	.word	0x200003c4
 80013d0:	20001440 	.word	0x20001440
 80013d4:	200003c8 	.word	0x200003c8
 80013d8:	20001444 	.word	0x20001444
 80013dc:	20000460 	.word	0x20000460

080013e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013f2:	f000 f9d9 	bl	80017a8 <HAL_IncTick>
  }

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40012c00 	.word	0x40012c00

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop

  /*to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_MspInit+0x4c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a10      	ldr	r2, [pc, #64]	@ (800145c <HAL_MspInit+0x4c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_MspInit+0x4c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_MspInit+0x4c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <HAL_MspInit+0x4c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	210f      	movs	r1, #15
 800144a:	f06f 0001 	mvn.w	r0, #1
 800144e:	f002 f859 	bl	8003504 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	@ 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001480:	d154      	bne.n	800152c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4a2b      	ldr	r2, [pc, #172]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148c:	6153      	str	r3, [r2, #20]
 800148e:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a25      	ldr	r2, [pc, #148]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 80014a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 80014b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014bc:	6153      	str	r3, [r2, #20]
 80014be:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	6153      	str	r3, [r2, #20]
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <HAL_ADC_MspInit+0xd4>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80014e2:	2314      	movs	r3, #20
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4810      	ldr	r0, [pc, #64]	@ (8001538 <HAL_ADC_MspInit+0xd8>)
 80014f6:	f002 f82f 	bl	8003558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014fa:	230f      	movs	r3, #15
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fe:	2303      	movs	r3, #3
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	480b      	ldr	r0, [pc, #44]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 800150e:	f002 f823 	bl	8003558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001512:	230f      	movs	r3, #15
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001528:	f002 f816 	bl	8003558 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3730      	adds	r7, #48	@ 0x30
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	48001400 	.word	0x48001400
 800153c:	48000800 	.word	0x48000800

08001540 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a17      	ldr	r2, [pc, #92]	@ (80015bc <HAL_CAN_MspInit+0x7c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d127      	bne.n	80015b2 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <HAL_CAN_MspInit+0x80>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a16      	ldr	r2, [pc, #88]	@ (80015c0 <HAL_CAN_MspInit+0x80>)
 8001568:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_CAN_MspInit+0x80>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_CAN_MspInit+0x80>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <HAL_CAN_MspInit+0x80>)
 8001580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001584:	6153      	str	r3, [r2, #20]
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_CAN_MspInit+0x80>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001592:	2303      	movs	r3, #3
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 80015a2:	2307      	movs	r3, #7
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <HAL_CAN_MspInit+0x84>)
 80015ae:	f001 ffd3 	bl	8003558 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	@ 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40006400 	.word	0x40006400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000c00 	.word	0x48000c00

080015c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	@ 0x30
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001694 <HAL_InitTick+0xcc>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001694 <HAL_InitTick+0xcc>)
 80015de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <HAL_InitTick+0xcc>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fbf6 	bl	8004dec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001600:	f003 fbd2 	bl	8004da8 <HAL_RCC_GetPCLK2Freq>
 8001604:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <HAL_InitTick+0xd0>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3b01      	subs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001614:	4b21      	ldr	r3, [pc, #132]	@ (800169c <HAL_InitTick+0xd4>)
 8001616:	4a22      	ldr	r2, [pc, #136]	@ (80016a0 <HAL_InitTick+0xd8>)
 8001618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800161a:	4b20      	ldr	r3, [pc, #128]	@ (800169c <HAL_InitTick+0xd4>)
 800161c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001620:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001622:	4a1e      	ldr	r2, [pc, #120]	@ (800169c <HAL_InitTick+0xd4>)
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <HAL_InitTick+0xd4>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_InitTick+0xd4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_InitTick+0xd4>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800163a:	4818      	ldr	r0, [pc, #96]	@ (800169c <HAL_InitTick+0xd4>)
 800163c:	f003 fe26 	bl	800528c <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11b      	bne.n	8001686 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800164e:	4813      	ldr	r0, [pc, #76]	@ (800169c <HAL_InitTick+0xd4>)
 8001650:	f003 fe7e 	bl	8005350 <HAL_TIM_Base_Start_IT>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800165a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800165e:	2b00      	cmp	r3, #0
 8001660:	d111      	bne.n	8001686 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001662:	2019      	movs	r0, #25
 8001664:	f001 ff6a 	bl	800353c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	d808      	bhi.n	8001680 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800166e:	2200      	movs	r2, #0
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	2019      	movs	r0, #25
 8001674:	f001 ff46 	bl	8003504 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001678:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <HAL_InitTick+0xdc>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e002      	b.n	8001686 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001686:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800168a:	4618      	mov	r0, r3
 800168c:	3730      	adds	r7, #48	@ 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	431bde83 	.word	0x431bde83
 800169c:	20000464 	.word	0x20000464
 80016a0:	40012c00 	.word	0x40012c00
 80016a4:	20000004 	.word	0x20000004

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016e6:	f003 fea3 	bl	8005430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000464 	.word	0x20000464

080016f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80016f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016fc:	f002 f900 	bl	8003900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001760 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800172c:	f7ff ffea 	bl	8001704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopForever+0x6>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopForever+0xe>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopForever+0x16>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f007 fcd9 	bl	800910c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175a:	f7ff fa17 	bl	8000b8c <main>

0800175e <LoopForever>:

LoopForever:
    b LoopForever
 800175e:	e7fe      	b.n	800175e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001760:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800176c:	0800a44c 	.word	0x0800a44c
  ldr r2, =_sbss
 8001770:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001774:	200015ec 	.word	0x200015ec

08001778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_2_IRQHandler>
	...

0800177c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <HAL_Init+0x28>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <HAL_Init+0x28>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f001 feae 	bl	80034ee <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	200f      	movs	r0, #15
 8001794:	f7ff ff18 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fe3a 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000

080017a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008
 80017cc:	200004b0 	.word	0x200004b0

080017d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	200004b0 	.word	0x200004b0

080017e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b09a      	sub	sp, #104	@ 0x68
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e1e3      	b.n	8001bd0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d176      	bne.n	8001908 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d152      	bne.n	80018c8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fe0f 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d13b      	bne.n	80018c8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f001 f85f 	bl	8002914 <ADC_Disable>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d12f      	bne.n	80018c8 <HAL_ADC_Init+0xe0>
 8001868:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800186c:	2b00      	cmp	r3, #0
 800186e:	d12b      	bne.n	80018c8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001878:	f023 0302 	bic.w	r3, r3, #2
 800187c:	f043 0202 	orr.w	r2, r3, #2
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001892:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80018a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a4:	4b92      	ldr	r3, [pc, #584]	@ (8001af0 <HAL_ADC_Init+0x308>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a92      	ldr	r2, [pc, #584]	@ (8001af4 <HAL_ADC_Init+0x30c>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0c9a      	lsrs	r2, r3, #18
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ba:	e002      	b.n	80018c2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3b01      	subs	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f9      	bne.n	80018bc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018e4:	d110      	bne.n	8001908 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f023 0312 	bic.w	r3, r3, #18
 80018ee:	f043 0210 	orr.w	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 8150 	bne.w	8001bb6 <HAL_ADC_Init+0x3ce>
 8001916:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 814b 	bne.w	8001bb6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 8143 	bne.w	8001bb6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001938:	f043 0202 	orr.w	r2, r3, #2
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001948:	d004      	beq.n	8001954 <HAL_ADC_Init+0x16c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6a      	ldr	r2, [pc, #424]	@ (8001af8 <HAL_ADC_Init+0x310>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_ADC_Init+0x170>
 8001954:	4b69      	ldr	r3, [pc, #420]	@ (8001afc <HAL_ADC_Init+0x314>)
 8001956:	e000      	b.n	800195a <HAL_ADC_Init+0x172>
 8001958:	4b69      	ldr	r3, [pc, #420]	@ (8001b00 <HAL_ADC_Init+0x318>)
 800195a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001964:	d102      	bne.n	800196c <HAL_ADC_Init+0x184>
 8001966:	4b64      	ldr	r3, [pc, #400]	@ (8001af8 <HAL_ADC_Init+0x310>)
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e01a      	b.n	80019a2 <HAL_ADC_Init+0x1ba>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a61      	ldr	r2, [pc, #388]	@ (8001af8 <HAL_ADC_Init+0x310>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d103      	bne.n	800197e <HAL_ADC_Init+0x196>
 8001976:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e011      	b.n	80019a2 <HAL_ADC_Init+0x1ba>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a60      	ldr	r2, [pc, #384]	@ (8001b04 <HAL_ADC_Init+0x31c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d102      	bne.n	800198e <HAL_ADC_Init+0x1a6>
 8001988:	4b5f      	ldr	r3, [pc, #380]	@ (8001b08 <HAL_ADC_Init+0x320>)
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e009      	b.n	80019a2 <HAL_ADC_Init+0x1ba>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5d      	ldr	r2, [pc, #372]	@ (8001b08 <HAL_ADC_Init+0x320>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d102      	bne.n	800199e <HAL_ADC_Init+0x1b6>
 8001998:	4b5a      	ldr	r3, [pc, #360]	@ (8001b04 <HAL_ADC_Init+0x31c>)
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e001      	b.n	80019a2 <HAL_ADC_Init+0x1ba>
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_ADC_Init+0x1da>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Init+0x1da>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_ADC_Init+0x1dc>
 80019c2:	2300      	movs	r3, #0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11c      	bne.n	8001a02 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_ADC_Init+0x202>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x202>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_ADC_Init+0x204>
 80019ea:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d108      	bne.n	8001a02 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80019f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a00:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7e5b      	ldrb	r3, [r3, #25]
 8001a06:	035b      	lsls	r3, r3, #13
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a0c:	2a01      	cmp	r2, #1
 8001a0e:	d002      	beq.n	8001a16 <HAL_ADC_Init+0x22e>
 8001a10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_Init+0x230>
 8001a16:	2200      	movs	r2, #0
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d11b      	bne.n	8001a6e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7e5b      	ldrb	r3, [r3, #25]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	3b01      	subs	r3, #1
 8001a44:	045a      	lsls	r2, r3, #17
 8001a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a50:	e00d      	b.n	8001a6e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001a5a:	f043 0220 	orr.w	r2, r3, #32
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d054      	beq.n	8001b20 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a22      	ldr	r2, [pc, #136]	@ (8001b04 <HAL_ADC_Init+0x31c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_ADC_Init+0x2a2>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a20      	ldr	r2, [pc, #128]	@ (8001b08 <HAL_ADC_Init+0x320>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d140      	bne.n	8001b0c <HAL_ADC_Init+0x324>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001a92:	d02a      	beq.n	8001aea <HAL_ADC_Init+0x302>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a9c:	d022      	beq.n	8001ae4 <HAL_ADC_Init+0x2fc>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001aa6:	d01a      	beq.n	8001ade <HAL_ADC_Init+0x2f6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aac:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001ab0:	d012      	beq.n	8001ad8 <HAL_ADC_Init+0x2f0>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001aba:	d00a      	beq.n	8001ad2 <HAL_ADC_Init+0x2ea>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac0:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001ac4:	d002      	beq.n	8001acc <HAL_ADC_Init+0x2e4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aca:	e023      	b.n	8001b14 <HAL_ADC_Init+0x32c>
 8001acc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001ad0:	e020      	b.n	8001b14 <HAL_ADC_Init+0x32c>
 8001ad2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ad6:	e01d      	b.n	8001b14 <HAL_ADC_Init+0x32c>
 8001ad8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001adc:	e01a      	b.n	8001b14 <HAL_ADC_Init+0x32c>
 8001ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae2:	e017      	b.n	8001b14 <HAL_ADC_Init+0x32c>
 8001ae4:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001ae8:	e014      	b.n	8001b14 <HAL_ADC_Init+0x32c>
 8001aea:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001aee:	e011      	b.n	8001b14 <HAL_ADC_Init+0x32c>
 8001af0:	20000000 	.word	0x20000000
 8001af4:	431bde83 	.word	0x431bde83
 8001af8:	50000100 	.word	0x50000100
 8001afc:	50000300 	.word	0x50000300
 8001b00:	50000700 	.word	0x50000700
 8001b04:	50000400 	.word	0x50000400
 8001b08:	50000500 	.word	0x50000500
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d114      	bne.n	8001b58 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b3c:	f023 0302 	bic.w	r3, r3, #2
 8001b40:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7e1b      	ldrb	r3, [r3, #24]
 8001b46:	039a      	lsls	r2, r3, #14
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4313      	orrs	r3, r2
 8001b52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b54:	4313      	orrs	r3, r2
 8001b56:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <HAL_ADC_Init+0x3f0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10c      	bne.n	8001b8e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f023 010f 	bic.w	r1, r3, #15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b8c:	e007      	b.n	8001b9e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 020f 	bic.w	r2, r2, #15
 8001b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f023 0303 	bic.w	r3, r3, #3
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bb4:	e00a      	b.n	8001bcc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f023 0312 	bic.w	r3, r3, #18
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001bcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3768      	adds	r7, #104	@ 0x68
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	fff0c007 	.word	0xfff0c007

08001bdc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80f9 	bne.w	8001dea <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Start+0x2a>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e0f4      	b.n	8001df0 <HAL_ADC_Start+0x214>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fe1c 	bl	800284c <ADC_Enable>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 80e0 	bne.w	8001de0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c3c:	d004      	beq.n	8001c48 <HAL_ADC_Start+0x6c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6d      	ldr	r2, [pc, #436]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d106      	bne.n	8001c56 <HAL_ADC_Start+0x7a>
 8001c48:	4b6c      	ldr	r3, [pc, #432]	@ (8001dfc <HAL_ADC_Start+0x220>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d010      	beq.n	8001c76 <HAL_ADC_Start+0x9a>
 8001c54:	e005      	b.n	8001c62 <HAL_ADC_Start+0x86>
 8001c56:	4b6a      	ldr	r3, [pc, #424]	@ (8001e00 <HAL_ADC_Start+0x224>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_ADC_Start+0x9a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c6a:	d004      	beq.n	8001c76 <HAL_ADC_Start+0x9a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a64      	ldr	r2, [pc, #400]	@ (8001e04 <HAL_ADC_Start+0x228>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d115      	bne.n	8001ca2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d036      	beq.n	8001cfe <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ca0:	e02d      	b.n	8001cfe <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_Start+0xe6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_ADC_Start+0xfc>
 8001cc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e008      	b.n	8001cea <HAL_ADC_Start+0x10e>
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <HAL_ADC_Start+0x228>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cf6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d0a:	d106      	bne.n	8001d1a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d10:	f023 0206 	bic.w	r2, r3, #6
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	221c      	movs	r2, #28
 8001d2e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d38:	d004      	beq.n	8001d44 <HAL_ADC_Start+0x168>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d106      	bne.n	8001d52 <HAL_ADC_Start+0x176>
 8001d44:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_ADC_Start+0x220>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d03e      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001d50:	e005      	b.n	8001d5e <HAL_ADC_Start+0x182>
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_ADC_Start+0x224>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d037      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_Start+0x196>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d106      	bne.n	8001d80 <HAL_ADC_Start+0x1a4>
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <HAL_ADC_Start+0x220>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d027      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001d7e:	e005      	b.n	8001d8c <HAL_ADC_Start+0x1b0>
 8001d80:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <HAL_ADC_Start+0x224>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d020      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_Start+0x1c4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <HAL_ADC_Start+0x21c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d106      	bne.n	8001dae <HAL_ADC_Start+0x1d2>
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <HAL_ADC_Start+0x220>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	d010      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001dac:	e005      	b.n	8001dba <HAL_ADC_Start+0x1de>
 8001dae:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <HAL_ADC_Start+0x224>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	d009      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc2:	d004      	beq.n	8001dce <HAL_ADC_Start+0x1f2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e04 <HAL_ADC_Start+0x228>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10f      	bne.n	8001dee <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0204 	orr.w	r2, r2, #4
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	e006      	b.n	8001dee <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001de8:	e001      	b.n	8001dee <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
 8001dec:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	50000100 	.word	0x50000100
 8001dfc:	50000300 	.word	0x50000300
 8001e00:	50000700 	.word	0x50000700
 8001e04:	50000400 	.word	0x50000400

08001e08 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_Stop+0x1a>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e023      	b.n	8001e6a <HAL_ADC_Stop+0x62>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e2a:	216c      	movs	r1, #108	@ 0x6c
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fdd7 	bl	80029e0 <ADC_ConversionStop>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d111      	bne.n	8001e60 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fd69 	bl	8002914 <ADC_Disable>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d102      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e03a      	b.n	8001f06 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_PollForConversion+0x30>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a72      	ldr	r2, [pc, #456]	@ (8002068 <HAL_ADC_PollForConversion+0x1f4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_PollForConversion+0x34>
 8001ea4:	4b71      	ldr	r3, [pc, #452]	@ (800206c <HAL_ADC_PollForConversion+0x1f8>)
 8001ea6:	e000      	b.n	8001eaa <HAL_ADC_PollForConversion+0x36>
 8001ea8:	4b71      	ldr	r3, [pc, #452]	@ (8002070 <HAL_ADC_PollForConversion+0x1fc>)
 8001eaa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d112      	bne.n	8001ede <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d11d      	bne.n	8001f02 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0bf      	b.n	800205e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f043 0220 	orr.w	r2, r3, #32
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0ad      	b.n	800205e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f02:	230c      	movs	r3, #12
 8001f04:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f0e:	d004      	beq.n	8001f1a <HAL_ADC_PollForConversion+0xa6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a54      	ldr	r2, [pc, #336]	@ (8002068 <HAL_ADC_PollForConversion+0x1f4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d106      	bne.n	8001f28 <HAL_ADC_PollForConversion+0xb4>
 8001f1a:	4b54      	ldr	r3, [pc, #336]	@ (800206c <HAL_ADC_PollForConversion+0x1f8>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d010      	beq.n	8001f48 <HAL_ADC_PollForConversion+0xd4>
 8001f26:	e005      	b.n	8001f34 <HAL_ADC_PollForConversion+0xc0>
 8001f28:	4b51      	ldr	r3, [pc, #324]	@ (8002070 <HAL_ADC_PollForConversion+0x1fc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <HAL_ADC_PollForConversion+0xd4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f3c:	d004      	beq.n	8001f48 <HAL_ADC_PollForConversion+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4c      	ldr	r2, [pc, #304]	@ (8002074 <HAL_ADC_PollForConversion+0x200>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d104      	bne.n	8001f52 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e00f      	b.n	8001f72 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f5a:	d004      	beq.n	8001f66 <HAL_ADC_PollForConversion+0xf2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a41      	ldr	r2, [pc, #260]	@ (8002068 <HAL_ADC_PollForConversion+0x1f4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d102      	bne.n	8001f6c <HAL_ADC_PollForConversion+0xf8>
 8001f66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f6a:	e000      	b.n	8001f6e <HAL_ADC_PollForConversion+0xfa>
 8001f6c:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HAL_ADC_PollForConversion+0x200>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001f72:	f7ff fc2d 	bl	80017d0 <HAL_GetTick>
 8001f76:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f78:	e021      	b.n	8001fbe <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d01d      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_ADC_PollForConversion+0x124>
 8001f88:	f7ff fc22 	bl	80017d0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d212      	bcs.n	8001fbe <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10b      	bne.n	8001fbe <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f043 0204 	orr.w	r2, r3, #4
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e04f      	b.n	800205e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0d6      	beq.n	8001f7a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d131      	bne.n	800204a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d12c      	bne.n	800204a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d125      	bne.n	800204a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d112      	bne.n	8002032 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d112      	bne.n	800204a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002030:	e00b      	b.n	800204a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f043 0220 	orr.w	r2, r3, #32
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d103      	bne.n	800205c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	50000100 	.word	0x50000100
 800206c:	50000300 	.word	0x50000300
 8002070:	50000700 	.word	0x50000700
 8002074:	50000400 	.word	0x50000400

08002078 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002094:	b480      	push	{r7}
 8002096:	b09b      	sub	sp, #108	@ 0x6c
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x22>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e2c8      	b.n	8002648 <HAL_ADC_ConfigChannel+0x5b4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 82ac 	bne.w	8002626 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d81c      	bhi.n	8002110 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	461a      	mov	r2, r3
 80020ea:	231f      	movs	r3, #31
 80020ec:	4093      	lsls	r3, r2
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4019      	ands	r1, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa00 f203 	lsl.w	r2, r0, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	@ 0x30
 800210e:	e063      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b09      	cmp	r3, #9
 8002116:	d81e      	bhi.n	8002156 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	3b1e      	subs	r3, #30
 800212c:	221f      	movs	r2, #31
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	4019      	ands	r1, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	3b1e      	subs	r3, #30
 8002148:	fa00 f203 	lsl.w	r2, r0, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34
 8002154:	e040      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b0e      	cmp	r3, #14
 800215c:	d81e      	bhi.n	800219c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	3b3c      	subs	r3, #60	@ 0x3c
 8002172:	221f      	movs	r2, #31
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	4019      	ands	r1, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	3b3c      	subs	r3, #60	@ 0x3c
 800218e:	fa00 f203 	lsl.w	r2, r0, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	639a      	str	r2, [r3, #56]	@ 0x38
 800219a:	e01d      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	3b5a      	subs	r3, #90	@ 0x5a
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4019      	ands	r1, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	3b5a      	subs	r3, #90	@ 0x5a
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 80e5 	bne.w	80023b2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b09      	cmp	r3, #9
 80021ee:	d91c      	bls.n	800222a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6999      	ldr	r1, [r3, #24]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	3b1e      	subs	r3, #30
 8002202:	2207      	movs	r2, #7
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	4019      	ands	r1, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6898      	ldr	r0, [r3, #8]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	3b1e      	subs	r3, #30
 800221c:	fa00 f203 	lsl.w	r2, r0, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	619a      	str	r2, [r3, #24]
 8002228:	e019      	b.n	800225e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6959      	ldr	r1, [r3, #20]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	2207      	movs	r2, #7
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	4019      	ands	r1, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6898      	ldr	r0, [r3, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	fa00 f203 	lsl.w	r2, r0, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	3b01      	subs	r3, #1
 800227c:	2b03      	cmp	r3, #3
 800227e:	d84f      	bhi.n	8002320 <HAL_ADC_ConfigChannel+0x28c>
 8002280:	a201      	add	r2, pc, #4	@ (adr r2, 8002288 <HAL_ADC_ConfigChannel+0x1f4>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	08002299 	.word	0x08002299
 800228c:	080022bb 	.word	0x080022bb
 8002290:	080022dd 	.word	0x080022dd
 8002294:	080022ff 	.word	0x080022ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800229e:	4b99      	ldr	r3, [pc, #612]	@ (8002504 <HAL_ADC_ConfigChannel+0x470>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	0691      	lsls	r1, r2, #26
 80022a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022aa:	430a      	orrs	r2, r1
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022b6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b8:	e07b      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022c0:	4b90      	ldr	r3, [pc, #576]	@ (8002504 <HAL_ADC_ConfigChannel+0x470>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	0691      	lsls	r1, r2, #26
 80022ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022cc:	430a      	orrs	r2, r1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022d8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022da:	e06a      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022e2:	4b88      	ldr	r3, [pc, #544]	@ (8002504 <HAL_ADC_ConfigChannel+0x470>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0691      	lsls	r1, r2, #26
 80022ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022ee:	430a      	orrs	r2, r1
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022fa:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022fc:	e059      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002304:	4b7f      	ldr	r3, [pc, #508]	@ (8002504 <HAL_ADC_ConfigChannel+0x470>)
 8002306:	4013      	ands	r3, r2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	0691      	lsls	r1, r2, #26
 800230e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002310:	430a      	orrs	r2, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800231c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800231e:	e048      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002342:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800234a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	069b      	lsls	r3, r3, #26
 8002354:	429a      	cmp	r2, r3
 8002356:	d107      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002366:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800236e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	069b      	lsls	r3, r3, #26
 8002378:	429a      	cmp	r2, r3
 800237a:	d107      	bne.n	800238c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800238a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002392:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	069b      	lsls	r3, r3, #26
 800239c:	429a      	cmp	r2, r3
 800239e:	d107      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023ae:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80023b0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d108      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x33e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x33e>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x340>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 8131 	bne.w	800263c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d00f      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43da      	mvns	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002400:	e049      	b.n	8002496 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2201      	movs	r2, #1
 8002410:	409a      	lsls	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d91c      	bls.n	800245e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6999      	ldr	r1, [r3, #24]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	3b1b      	subs	r3, #27
 8002436:	2207      	movs	r2, #7
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6898      	ldr	r0, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	3b1b      	subs	r3, #27
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	619a      	str	r2, [r3, #24]
 800245c:	e01b      	b.n	8002496 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6959      	ldr	r1, [r3, #20]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	2207      	movs	r2, #7
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	4019      	ands	r1, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6898      	ldr	r0, [r3, #8]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800249e:	d004      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x416>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <HAL_ADC_ConfigChannel+0x474>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x41a>
 80024aa:	4b18      	ldr	r3, [pc, #96]	@ (800250c <HAL_ADC_ConfigChannel+0x478>)
 80024ac:	e000      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x41c>
 80024ae:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_ADC_ConfigChannel+0x47c>)
 80024b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d105      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024ca:	2b11      	cmp	r3, #17
 80024cc:	d105      	bne.n	80024da <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024de:	2b12      	cmp	r3, #18
 80024e0:	f040 80ac 	bne.w	800263c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 80a5 	bne.w	800263c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x480>
 80024fc:	4b02      	ldr	r3, [pc, #8]	@ (8002508 <HAL_ADC_ConfigChannel+0x474>)
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e023      	b.n	800254a <HAL_ADC_ConfigChannel+0x4b6>
 8002502:	bf00      	nop
 8002504:	83fff000 	.word	0x83fff000
 8002508:	50000100 	.word	0x50000100
 800250c:	50000300 	.word	0x50000300
 8002510:	50000700 	.word	0x50000700
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4e      	ldr	r2, [pc, #312]	@ (8002654 <HAL_ADC_ConfigChannel+0x5c0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d103      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x492>
 800251e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e011      	b.n	800254a <HAL_ADC_ConfigChannel+0x4b6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4b      	ldr	r2, [pc, #300]	@ (8002658 <HAL_ADC_ConfigChannel+0x5c4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x4a2>
 8002530:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <HAL_ADC_ConfigChannel+0x5c8>)
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e009      	b.n	800254a <HAL_ADC_ConfigChannel+0x4b6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a48      	ldr	r2, [pc, #288]	@ (800265c <HAL_ADC_ConfigChannel+0x5c8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d102      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x4b2>
 8002540:	4b45      	ldr	r3, [pc, #276]	@ (8002658 <HAL_ADC_ConfigChannel+0x5c4>)
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e001      	b.n	800254a <HAL_ADC_ConfigChannel+0x4b6>
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_ADC_ConfigChannel+0x4d6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x4d6>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_ADC_ConfigChannel+0x4d8>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d150      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002570:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x4fe>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x4fe>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_ADC_ConfigChannel+0x500>
 8002592:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002594:	2b00      	cmp	r3, #0
 8002596:	d13c      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b10      	cmp	r3, #16
 800259e:	d11d      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x548>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a8:	d118      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <HAL_ADC_ConfigChannel+0x5cc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002664 <HAL_ADC_ConfigChannel+0x5d0>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	0c9a      	lsrs	r2, r3, #18
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025da:	e02e      	b.n	800263a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b11      	cmp	r3, #17
 80025e2:	d10b      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x568>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ec:	d106      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80025f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025f8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025fa:	e01e      	b.n	800263a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b12      	cmp	r3, #18
 8002602:	d11a      	bne.n	800263a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800260c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800260e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002610:	e013      	b.n	800263a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f043 0220 	orr.w	r2, r3, #32
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002624:	e00a      	b.n	800263c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002638:	e000      	b.n	800263c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800263a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002644:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002648:	4618      	mov	r0, r3
 800264a:	376c      	adds	r7, #108	@ 0x6c
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	50000100 	.word	0x50000100
 8002658:	50000400 	.word	0x50000400
 800265c:	50000500 	.word	0x50000500
 8002660:	20000000 	.word	0x20000000
 8002664:	431bde83 	.word	0x431bde83

08002668 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002668:	b480      	push	{r7}
 800266a:	b099      	sub	sp, #100	@ 0x64
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002680:	d102      	bne.n	8002688 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002682:	4b6d      	ldr	r3, [pc, #436]	@ (8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	e01a      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6a      	ldr	r2, [pc, #424]	@ (8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d103      	bne.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002692:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	e011      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a67      	ldr	r2, [pc, #412]	@ (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d102      	bne.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026a4:	4b66      	ldr	r3, [pc, #408]	@ (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	e009      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a64      	ldr	r2, [pc, #400]	@ (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d102      	bne.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026b4:	4b61      	ldr	r3, [pc, #388]	@ (800283c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	e001      	b.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b0      	b.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e0a9      	b.n	800282a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 808d 	bne.w	8002808 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8086 	bne.w	8002808 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002704:	d004      	beq.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a4b      	ldr	r2, [pc, #300]	@ (8002838 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002710:	4b4c      	ldr	r3, [pc, #304]	@ (8002844 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002712:	e000      	b.n	8002716 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002714:	4b4c      	ldr	r3, [pc, #304]	@ (8002848 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002716:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d040      	beq.n	80027a2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002732:	035b      	lsls	r3, r3, #13
 8002734:	430b      	orrs	r3, r1
 8002736:	431a      	orrs	r2, r3
 8002738:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800273a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d15c      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800277e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d14b      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800278c:	f023 030f 	bic.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	6811      	ldr	r1, [r2, #0]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	6892      	ldr	r2, [r2, #8]
 8002798:	430a      	orrs	r2, r1
 800279a:	431a      	orrs	r2, r3
 800279c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800279e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a0:	e03c      	b.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ac:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d108      	bne.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d123      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80027f0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d112      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80027f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027fe:	f023 030f 	bic.w	r3, r3, #15
 8002802:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002804:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002806:	e009      	b.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800281a:	e000      	b.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800281c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002826:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800282a:	4618      	mov	r0, r3
 800282c:	3764      	adds	r7, #100	@ 0x64
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	50000100 	.word	0x50000100
 800283c:	50000400 	.word	0x50000400
 8002840:	50000500 	.word	0x50000500
 8002844:	50000300 	.word	0x50000300
 8002848:	50000700 	.word	0x50000700

0800284c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <ADC_Enable+0x2c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <ADC_Enable+0x2c>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <ADC_Enable+0x2e>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d143      	bne.n	8002906 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b22      	ldr	r3, [pc, #136]	@ (8002910 <ADC_Enable+0xc4>)
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f043 0210 	orr.w	r2, r3, #16
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e02f      	b.n	8002908 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80028b8:	f7fe ff8a 	bl	80017d0 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028be:	e01b      	b.n	80028f8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028c0:	f7fe ff86 	bl	80017d0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d914      	bls.n	80028f8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d00d      	beq.n	80028f8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f043 0210 	orr.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e007      	b.n	8002908 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d1dc      	bne.n	80028c0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	8000003f 	.word	0x8000003f

08002914 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d108      	bne.n	8002940 <ADC_Disable+0x2c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <ADC_Disable+0x2c>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <ADC_Disable+0x2e>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d047      	beq.n	80029d6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030d 	and.w	r3, r3, #13
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10f      	bne.n	8002974 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0202 	orr.w	r2, r2, #2
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2203      	movs	r2, #3
 800296a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800296c:	f7fe ff30 	bl	80017d0 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002972:	e029      	b.n	80029c8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e023      	b.n	80029d8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002990:	f7fe ff1e 	bl	80017d0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d914      	bls.n	80029c8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10d      	bne.n	80029c8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f043 0210 	orr.w	r2, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e007      	b.n	80029d8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d0dc      	beq.n	8002990 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 809b 	beq.w	8002b3c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a14:	d12a      	bne.n	8002a6c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d126      	bne.n	8002a6c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d122      	bne.n	8002a6c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002a26:	230c      	movs	r3, #12
 8002a28:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002a2a:	e014      	b.n	8002a56 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4a46      	ldr	r2, [pc, #280]	@ (8002b48 <ADC_ConversionStop+0x168>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d90d      	bls.n	8002a50 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f043 0210 	orr.w	r2, r3, #16
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e076      	b.n	8002b3e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	3301      	adds	r3, #1
 8002a54:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a60:	2b40      	cmp	r3, #64	@ 0x40
 8002a62:	d1e3      	bne.n	8002a2c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2240      	movs	r2, #64	@ 0x40
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b60      	cmp	r3, #96	@ 0x60
 8002a70:	d015      	beq.n	8002a9e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d10e      	bne.n	8002a9e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d107      	bne.n	8002a9e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0210 	orr.w	r2, r2, #16
 8002a9c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d015      	beq.n	8002ad0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d10e      	bne.n	8002ad0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0220 	orr.w	r2, r2, #32
 8002ace:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b60      	cmp	r3, #96	@ 0x60
 8002ad4:	d005      	beq.n	8002ae2 <ADC_ConversionStop+0x102>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b6c      	cmp	r3, #108	@ 0x6c
 8002ada:	d105      	bne.n	8002ae8 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002adc:	230c      	movs	r3, #12
 8002ade:	617b      	str	r3, [r7, #20]
        break;
 8002ae0:	e005      	b.n	8002aee <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	617b      	str	r3, [r7, #20]
        break;
 8002ae6:	e002      	b.n	8002aee <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	617b      	str	r3, [r7, #20]
        break;
 8002aec:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002aee:	f7fe fe6f 	bl	80017d0 <HAL_GetTick>
 8002af2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002af4:	e01b      	b.n	8002b2e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002af6:	f7fe fe6b 	bl	80017d0 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b0b      	cmp	r3, #11
 8002b02:	d914      	bls.n	8002b2e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f043 0210 	orr.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e007      	b.n	8002b3e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1dc      	bne.n	8002af6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	000993ff 	.word	0x000993ff

08002b4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0ed      	b.n	8002d3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fce8 	bl	8001540 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b80:	f7fe fe26 	bl	80017d0 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b86:	e012      	b.n	8002bae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b88:	f7fe fe22 	bl	80017d0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b0a      	cmp	r3, #10
 8002b94:	d90b      	bls.n	8002bae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2205      	movs	r2, #5
 8002ba6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0c5      	b.n	8002d3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0e5      	beq.n	8002b88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0202 	bic.w	r2, r2, #2
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bcc:	f7fe fe00 	bl	80017d0 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bd2:	e012      	b.n	8002bfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bd4:	f7fe fdfc 	bl	80017d0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b0a      	cmp	r3, #10
 8002be0:	d90b      	bls.n	8002bfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e09f      	b.n	8002d3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e5      	bne.n	8002bd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7e1b      	ldrb	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d108      	bne.n	8002c22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e007      	b.n	8002c32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7e5b      	ldrb	r3, [r3, #25]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d108      	bne.n	8002c4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e007      	b.n	8002c5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7e9b      	ldrb	r3, [r3, #26]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d108      	bne.n	8002c76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0220 	orr.w	r2, r2, #32
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e007      	b.n	8002c86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0220 	bic.w	r2, r2, #32
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7edb      	ldrb	r3, [r3, #27]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0210 	bic.w	r2, r2, #16
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e007      	b.n	8002cb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0210 	orr.w	r2, r2, #16
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7f1b      	ldrb	r3, [r3, #28]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d108      	bne.n	8002cca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e007      	b.n	8002cda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7f5b      	ldrb	r3, [r3, #29]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d108      	bne.n	8002cf4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0204 	orr.w	r2, r2, #4
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e007      	b.n	8002d04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0204 	bic.w	r2, r2, #4
 8002d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	ea42 0103 	orr.w	r1, r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b087      	sub	sp, #28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d58:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d003      	beq.n	8002d68 <HAL_CAN_ConfigFilter+0x26>
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	f040 80aa 	bne.w	8002ebc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2201      	movs	r2, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d123      	bne.n	8002dea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	401a      	ands	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3248      	adds	r2, #72	@ 0x48
 8002dca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002de0:	6979      	ldr	r1, [r7, #20]
 8002de2:	3348      	adds	r3, #72	@ 0x48
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d122      	bne.n	8002e38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3248      	adds	r2, #72	@ 0x48
 8002e18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e2e:	6979      	ldr	r1, [r7, #20]
 8002e30:	3348      	adds	r3, #72	@ 0x48
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002e52:	e007      	b.n	8002e64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	401a      	ands	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002e7e:	e007      	b.n	8002e90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002eae:	f023 0201 	bic.w	r2, r3, #1
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e006      	b.n	8002eca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d12e      	bne.n	8002f48 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f02:	f7fe fc65 	bl	80017d0 <HAL_GetTick>
 8002f06:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f08:	e012      	b.n	8002f30 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f0a:	f7fe fc61 	bl	80017d0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b0a      	cmp	r3, #10
 8002f16:	d90b      	bls.n	8002f30 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2205      	movs	r2, #5
 8002f28:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e012      	b.n	8002f56 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e5      	bne.n	8002f0a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e006      	b.n	8002f56 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b089      	sub	sp, #36	@ 0x24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f72:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f7c:	7ffb      	ldrb	r3, [r7, #31]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d003      	beq.n	8002f8a <HAL_CAN_AddTxMessage+0x2c>
 8002f82:	7ffb      	ldrb	r3, [r7, #31]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f040 80ad 	bne.w	80030e4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8095 	beq.w	80030d4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	0e1b      	lsrs	r3, r3, #24
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fd0:	68f9      	ldr	r1, [r7, #12]
 8002fd2:	6809      	ldr	r1, [r1, #0]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3318      	adds	r3, #24
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	440b      	add	r3, r1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e00f      	b.n	8003002 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ff2:	68f9      	ldr	r1, [r7, #12]
 8002ff4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ff6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	440b      	add	r3, r1
 8003000:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	3318      	adds	r3, #24
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	440b      	add	r3, r1
 8003012:	3304      	adds	r3, #4
 8003014:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	7d1b      	ldrb	r3, [r3, #20]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d111      	bne.n	8003042 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3318      	adds	r3, #24
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	4413      	add	r3, r2
 800302a:	3304      	adds	r3, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	6811      	ldr	r1, [r2, #0]
 8003032:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3318      	adds	r3, #24
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	440b      	add	r3, r1
 800303e:	3304      	adds	r3, #4
 8003040:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3307      	adds	r3, #7
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	061a      	lsls	r2, r3, #24
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3306      	adds	r3, #6
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3305      	adds	r3, #5
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	4313      	orrs	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	3204      	adds	r2, #4
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	4610      	mov	r0, r2
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	6811      	ldr	r1, [r2, #0]
 800306a:	ea43 0200 	orr.w	r2, r3, r0
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	440b      	add	r3, r1
 8003074:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003078:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3303      	adds	r3, #3
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	061a      	lsls	r2, r3, #24
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3302      	adds	r3, #2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3301      	adds	r3, #1
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	4313      	orrs	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	7812      	ldrb	r2, [r2, #0]
 800309a:	4610      	mov	r0, r2
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	6811      	ldr	r1, [r2, #0]
 80030a0:	ea43 0200 	orr.w	r2, r3, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80030ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3318      	adds	r3, #24
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	4413      	add	r3, r2
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	6811      	ldr	r1, [r2, #0]
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3318      	adds	r3, #24
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	440b      	add	r3, r1
 80030ce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e00e      	b.n	80030f2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e006      	b.n	80030f2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3724      	adds	r7, #36	@ 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003112:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d003      	beq.n	8003122 <HAL_CAN_GetRxMessage+0x24>
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b02      	cmp	r3, #2
 800311e:	f040 8103 	bne.w	8003328 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10e      	bne.n	8003146 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d116      	bne.n	8003164 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0f7      	b.n	8003336 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0e8      	b.n	8003336 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	331b      	adds	r3, #27
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	4413      	add	r3, r2
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0204 	and.w	r2, r3, #4
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10c      	bne.n	800319c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	331b      	adds	r3, #27
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4413      	add	r3, r2
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	0d5b      	lsrs	r3, r3, #21
 8003192:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e00b      	b.n	80031b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	331b      	adds	r3, #27
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	4413      	add	r3, r2
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	08db      	lsrs	r3, r3, #3
 80031ac:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	331b      	adds	r3, #27
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	4413      	add	r3, r2
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0202 	and.w	r2, r3, #2
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	331b      	adds	r3, #27
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	4413      	add	r3, r2
 80031d6:	3304      	adds	r3, #4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2208      	movs	r2, #8
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	e00b      	b.n	8003202 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	331b      	adds	r3, #27
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	331b      	adds	r3, #27
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	b2da      	uxtb	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	331b      	adds	r3, #27
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	4413      	add	r3, r2
 8003252:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0a1a      	lsrs	r2, r3, #8
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	4413      	add	r3, r2
 800326c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0c1a      	lsrs	r2, r3, #16
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	3302      	adds	r3, #2
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	4413      	add	r3, r2
 8003286:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	0e1a      	lsrs	r2, r3, #24
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	3303      	adds	r3, #3
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	4413      	add	r3, r2
 80032a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	3304      	adds	r3, #4
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0a1a      	lsrs	r2, r3, #8
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	3305      	adds	r3, #5
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	0c1a      	lsrs	r2, r3, #16
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	3306      	adds	r3, #6
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	0e1a      	lsrs	r2, r3, #24
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	3307      	adds	r3, #7
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0220 	orr.w	r2, r2, #32
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e007      	b.n	8003324 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e006      	b.n	8003336 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003356:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003358:	7afb      	ldrb	r3, [r7, #11]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d002      	beq.n	8003364 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d10f      	bne.n	8003384 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e005      	b.n	8003384 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003384:	68fb      	ldr	r3, [r7, #12]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	@ (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	@ (8003430 <__NVIC_EnableIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	@ (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	@ (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	@ 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	@ 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff4c 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003516:	f7ff ff61 	bl	80033dc <__NVIC_GetPriorityGrouping>
 800351a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f7ff ffb1 	bl	8003488 <NVIC_EncodePriority>
 8003526:	4602      	mov	r2, r0
 8003528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff80 	bl	8003434 <__NVIC_SetPriority>
}
 8003534:	bf00      	nop
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff54 	bl	80033f8 <__NVIC_EnableIRQ>
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003566:	e160      	b.n	800382a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8152 	beq.w	8003824 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d005      	beq.n	8003598 <HAL_GPIO_Init+0x40>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d130      	bne.n	80035fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	2203      	movs	r2, #3
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ce:	2201      	movs	r2, #1
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0201 	and.w	r2, r3, #1
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b03      	cmp	r3, #3
 8003604:	d017      	beq.n	8003636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	2203      	movs	r2, #3
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d123      	bne.n	800368a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	08da      	lsrs	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3208      	adds	r2, #8
 800364a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	08da      	lsrs	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3208      	adds	r2, #8
 8003684:	6939      	ldr	r1, [r7, #16]
 8003686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	2203      	movs	r2, #3
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0203 	and.w	r2, r3, #3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80ac 	beq.w	8003824 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003848 <HAL_GPIO_Init+0x2f0>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003848 <HAL_GPIO_Init+0x2f0>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6193      	str	r3, [r2, #24]
 80036d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <HAL_GPIO_Init+0x2f0>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e4:	4a59      	ldr	r2, [pc, #356]	@ (800384c <HAL_GPIO_Init+0x2f4>)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	220f      	movs	r2, #15
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800370e:	d025      	beq.n	800375c <HAL_GPIO_Init+0x204>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a4f      	ldr	r2, [pc, #316]	@ (8003850 <HAL_GPIO_Init+0x2f8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d01f      	beq.n	8003758 <HAL_GPIO_Init+0x200>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a4e      	ldr	r2, [pc, #312]	@ (8003854 <HAL_GPIO_Init+0x2fc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d019      	beq.n	8003754 <HAL_GPIO_Init+0x1fc>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a4d      	ldr	r2, [pc, #308]	@ (8003858 <HAL_GPIO_Init+0x300>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_GPIO_Init+0x1f8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a4c      	ldr	r2, [pc, #304]	@ (800385c <HAL_GPIO_Init+0x304>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00d      	beq.n	800374c <HAL_GPIO_Init+0x1f4>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a4b      	ldr	r2, [pc, #300]	@ (8003860 <HAL_GPIO_Init+0x308>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <HAL_GPIO_Init+0x1f0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a4a      	ldr	r2, [pc, #296]	@ (8003864 <HAL_GPIO_Init+0x30c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_GPIO_Init+0x1ec>
 8003740:	2306      	movs	r3, #6
 8003742:	e00c      	b.n	800375e <HAL_GPIO_Init+0x206>
 8003744:	2307      	movs	r3, #7
 8003746:	e00a      	b.n	800375e <HAL_GPIO_Init+0x206>
 8003748:	2305      	movs	r3, #5
 800374a:	e008      	b.n	800375e <HAL_GPIO_Init+0x206>
 800374c:	2304      	movs	r3, #4
 800374e:	e006      	b.n	800375e <HAL_GPIO_Init+0x206>
 8003750:	2303      	movs	r3, #3
 8003752:	e004      	b.n	800375e <HAL_GPIO_Init+0x206>
 8003754:	2302      	movs	r3, #2
 8003756:	e002      	b.n	800375e <HAL_GPIO_Init+0x206>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_GPIO_Init+0x206>
 800375c:	2300      	movs	r3, #0
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	f002 0203 	and.w	r2, r2, #3
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	4093      	lsls	r3, r2
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800376e:	4937      	ldr	r1, [pc, #220]	@ (800384c <HAL_GPIO_Init+0x2f4>)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800377c:	4b3a      	ldr	r3, [pc, #232]	@ (8003868 <HAL_GPIO_Init+0x310>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037a0:	4a31      	ldr	r2, [pc, #196]	@ (8003868 <HAL_GPIO_Init+0x310>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037a6:	4b30      	ldr	r3, [pc, #192]	@ (8003868 <HAL_GPIO_Init+0x310>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037ca:	4a27      	ldr	r2, [pc, #156]	@ (8003868 <HAL_GPIO_Init+0x310>)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037d0:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <HAL_GPIO_Init+0x310>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <HAL_GPIO_Init+0x310>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <HAL_GPIO_Init+0x310>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800381e:	4a12      	ldr	r2, [pc, #72]	@ (8003868 <HAL_GPIO_Init+0x310>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f ae97 	bne.w	8003568 <HAL_GPIO_Init+0x10>
  }
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000
 8003850:	48000400 	.word	0x48000400
 8003854:	48000800 	.word	0x48000800
 8003858:	48000c00 	.word	0x48000c00
 800385c:	48001000 	.word	0x48001000
 8003860:	48001400 	.word	0x48001400
 8003864:	48001800 	.word	0x48001800
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	e001      	b.n	800388e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
 80038a8:	4613      	mov	r3, r2
 80038aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038ac:	787b      	ldrb	r3, [r7, #1]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038b8:	e002      	b.n	80038c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	041a      	lsls	r2, r3, #16
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	43d9      	mvns	r1, r3
 80038ea:	887b      	ldrh	r3, [r7, #2]
 80038ec:	400b      	ands	r3, r1
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800390a:	4b08      	ldr	r3, [pc, #32]	@ (800392c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003916:	4a05      	ldr	r2, [pc, #20]	@ (800392c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f806 	bl	8003930 <HAL_GPIO_EXTI_Callback>
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40010400 	.word	0x40010400

08003930 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800394e:	af00      	add	r7, sp, #0
 8003950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003954:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003958:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f001 b83a 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003972:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 816f 	beq.w	8003c62 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003984:	4bb5      	ldr	r3, [pc, #724]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b04      	cmp	r3, #4
 800398e:	d00c      	beq.n	80039aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003990:	4bb2      	ldr	r3, [pc, #712]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d15c      	bne.n	8003a56 <HAL_RCC_OscConfig+0x10e>
 800399c:	4baf      	ldr	r3, [pc, #700]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a8:	d155      	bne.n	8003a56 <HAL_RCC_OscConfig+0x10e>
 80039aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039ae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d102      	bne.n	80039dc <HAL_RCC_OscConfig+0x94>
 80039d6:	4ba1      	ldr	r3, [pc, #644]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	e015      	b.n	8003a08 <HAL_RCC_OscConfig+0xc0>
 80039dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039e0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80039f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80039f8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003a04:	4b95      	ldr	r3, [pc, #596]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a0c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003a10:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003a14:	fa92 f2a2 	rbit	r2, r2
 8003a18:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003a1c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003a20:	fab2 f282 	clz	r2, r2
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	f042 0220 	orr.w	r2, r2, #32
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	f002 021f 	and.w	r2, r2, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8111 	beq.w	8003c60 <HAL_RCC_OscConfig+0x318>
 8003a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 8108 	bne.w	8003c60 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f000 bfc6 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x12e>
 8003a68:	4b7c      	ldr	r3, [pc, #496]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a7b      	ldr	r2, [pc, #492]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	e036      	b.n	8003ae4 <HAL_RCC_OscConfig+0x19c>
 8003a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x158>
 8003a86:	4b75      	ldr	r3, [pc, #468]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a74      	ldr	r2, [pc, #464]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b72      	ldr	r3, [pc, #456]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a71      	ldr	r2, [pc, #452]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e021      	b.n	8003ae4 <HAL_RCC_OscConfig+0x19c>
 8003aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aa4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x184>
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a69      	ldr	r2, [pc, #420]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b67      	ldr	r3, [pc, #412]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a66      	ldr	r2, [pc, #408]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0x19c>
 8003acc:	4b63      	ldr	r3, [pc, #396]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a62      	ldr	r2, [pc, #392]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b60      	ldr	r3, [pc, #384]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a5f      	ldr	r2, [pc, #380]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d059      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd fe6c 	bl	80017d0 <HAL_GetTick>
 8003af8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afe:	f7fd fe67 	bl	80017d0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	@ 0x64
 8003b0c:	d902      	bls.n	8003b14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	f000 bf67 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>
 8003b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b18:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003b28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_OscConfig+0x1fe>
 8003b40:	4b46      	ldr	r3, [pc, #280]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x22a>
 8003b46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b4a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003b5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b5e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b62:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b76:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003b7a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b7e:	fa92 f2a2 	rbit	r2, r2
 8003b82:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003b86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b8a:	fab2 f282 	clz	r2, r2
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f042 0220 	orr.w	r2, r2, #32
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	f002 021f 	and.w	r2, r2, #31
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ab      	beq.n	8003afe <HAL_RCC_OscConfig+0x1b6>
 8003ba6:	e05c      	b.n	8003c62 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fe12 	bl	80017d0 <HAL_GetTick>
 8003bac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb2:	f7fd fe0d 	bl	80017d0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	@ 0x64
 8003bc0:	d902      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	f000 bf0d 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>
 8003bc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bcc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003bdc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d102      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2b2>
 8003bf4:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0x2de>
 8003bfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bfe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003c0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c12:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003c16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003c22:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <HAL_RCC_OscConfig+0x314>)
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c2a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003c2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003c32:	fa92 f2a2 	rbit	r2, r2
 8003c36:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003c3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f002 021f 	and.w	r2, r2, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ab      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x26a>
 8003c5a:	e002      	b.n	8003c62 <HAL_RCC_OscConfig+0x31a>
 8003c5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 817f 	beq.w	8003f76 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c78:	4ba7      	ldr	r3, [pc, #668]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c84:	4ba4      	ldr	r3, [pc, #656]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d173      	bne.n	8003d78 <HAL_RCC_OscConfig+0x430>
 8003c90:	4ba1      	ldr	r3, [pc, #644]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9c:	d16c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x430>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003cb0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d102      	bne.n	8003cce <HAL_RCC_OscConfig+0x386>
 8003cc8:	4b93      	ldr	r3, [pc, #588]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	e013      	b.n	8003cf6 <HAL_RCC_OscConfig+0x3ae>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003ce6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003cf2:	4b89      	ldr	r3, [pc, #548]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003cfc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003d00:	fa92 f2a2 	rbit	r2, r2
 8003d04:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003d08:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f042 0220 	orr.w	r2, r2, #32
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f002 021f 	and.w	r2, r2, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3f6>
 8003d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d002      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f000 be52 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b76      	ldr	r3, [pc, #472]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	21f8      	movs	r1, #248	@ 0xf8
 8003d54:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003d5c:	fa91 f1a1 	rbit	r1, r1
 8003d60:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003d64:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003d68:	fab1 f181 	clz	r1, r1
 8003d6c:	b2c9      	uxtb	r1, r1
 8003d6e:	408b      	lsls	r3, r1
 8003d70:	4969      	ldr	r1, [pc, #420]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e0fe      	b.n	8003f76 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8088 	beq.w	8003e9a <HAL_RCC_OscConfig+0x552>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003d9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da0:	fab3 f383 	clz	r3, r3
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003daa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	461a      	mov	r2, r3
 8003db2:	2301      	movs	r3, #1
 8003db4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fd fd0b 	bl	80017d0 <HAL_GetTick>
 8003dba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fd fd06 	bl	80017d0 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d902      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	f000 be06 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003de8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4be>
 8003e00:	4b45      	ldr	r3, [pc, #276]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	e013      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e6>
 8003e06:	2302      	movs	r3, #2
 8003e08:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003e1e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003e34:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003e38:	fa92 f2a2 	rbit	r2, r2
 8003e3c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003e40:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003e44:	fab2 f282 	clz	r2, r2
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	f042 0220 	orr.w	r2, r2, #32
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	f002 021f 	and.w	r2, r2, #31
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0af      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b2d      	ldr	r3, [pc, #180]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	21f8      	movs	r1, #248	@ 0xf8
 8003e76:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003e7e:	fa91 f1a1 	rbit	r1, r1
 8003e82:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003e86:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003e8a:	fab1 f181 	clz	r1, r1
 8003e8e:	b2c9      	uxtb	r1, r1
 8003e90:	408b      	lsls	r3, r1
 8003e92:	4921      	ldr	r1, [pc, #132]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
 8003e98:	e06d      	b.n	8003f76 <HAL_RCC_OscConfig+0x62e>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003eac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003eba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fd fc83 	bl	80017d0 <HAL_GetTick>
 8003eca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fd fc7e 	bl	80017d0 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d902      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	f000 bd7e 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003ef8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5d4>
 8003f10:	4b01      	ldr	r3, [pc, #4]	@ (8003f18 <HAL_RCC_OscConfig+0x5d0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	e016      	b.n	8003f44 <HAL_RCC_OscConfig+0x5fc>
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003f2e:	2302      	movs	r3, #2
 8003f30:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003f34:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003f40:	4bbf      	ldr	r3, [pc, #764]	@ (8004240 <HAL_RCC_OscConfig+0x8f8>)
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	2202      	movs	r2, #2
 8003f46:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003f4a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003f4e:	fa92 f2a2 	rbit	r2, r2
 8003f52:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003f56:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003f5a:	fab2 f282 	clz	r2, r2
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f042 0220 	orr.w	r2, r2, #32
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	f002 021f 	and.w	r2, r2, #31
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ac      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8113 	beq.w	80041b2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d07c      	beq.n	8004096 <HAL_RCC_OscConfig+0x74e>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003fae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4ba2      	ldr	r3, [pc, #648]	@ (8004244 <HAL_RCC_OscConfig+0x8fc>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd fc03 	bl	80017d0 <HAL_GetTick>
 8003fca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd fbfe 	bl	80017d0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d902      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	f000 bcfe 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ff0:	fa93 f2a3 	rbit	r2, r3
 8003ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ff8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004006:	2202      	movs	r2, #2
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800400e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	fa93 f2a3 	rbit	r2, r3
 8004018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800401c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004026:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800402a:	2202      	movs	r2, #2
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004032:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	fa93 f2a3 	rbit	r2, r3
 800403c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004040:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004044:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004046:	4b7e      	ldr	r3, [pc, #504]	@ (8004240 <HAL_RCC_OscConfig+0x8f8>)
 8004048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800404a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800404e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004052:	2102      	movs	r1, #2
 8004054:	6019      	str	r1, [r3, #0]
 8004056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800405a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	fa93 f1a3 	rbit	r1, r3
 8004064:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004068:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800406c:	6019      	str	r1, [r3, #0]
  return result;
 800406e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004072:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2101      	movs	r1, #1
 800408a:	fa01 f303 	lsl.w	r3, r1, r3
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d09d      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x688>
 8004094:	e08d      	b.n	80041b2 <HAL_RCC_OscConfig+0x86a>
 8004096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800409a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040b4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040b8:	601a      	str	r2, [r3, #0]
  return result;
 80040ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004244 <HAL_RCC_OscConfig+0x8fc>)
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	461a      	mov	r2, r3
 80040d4:	2300      	movs	r3, #0
 80040d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d8:	f7fd fb7a 	bl	80017d0 <HAL_GetTick>
 80040dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e2:	f7fd fb75 	bl	80017d0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d902      	bls.n	80040f8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	f000 bc75 	b.w	80049e2 <HAL_RCC_OscConfig+0x109a>
 80040f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004100:	2202      	movs	r2, #2
 8004102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004108:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	fa93 f2a3 	rbit	r2, r3
 8004112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004116:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004120:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004124:	2202      	movs	r2, #2
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800412c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	fa93 f2a3 	rbit	r2, r3
 8004136:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800413a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004144:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004148:	2202      	movs	r2, #2
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004150:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	fa93 f2a3 	rbit	r2, r3
 800415a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800415e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004162:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	4b36      	ldr	r3, [pc, #216]	@ (8004240 <HAL_RCC_OscConfig+0x8f8>)
 8004166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800416c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004170:	2102      	movs	r1, #2
 8004172:	6019      	str	r1, [r3, #0]
 8004174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004178:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	fa93 f1a3 	rbit	r1, r3
 8004182:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004186:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800418a:	6019      	str	r1, [r3, #0]
  return result;
 800418c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004190:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2101      	movs	r1, #1
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d197      	bne.n	80040e2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 81a5 	beq.w	8004512 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004240 <HAL_RCC_OscConfig+0x8f8>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_RCC_OscConfig+0x8f8>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4a18      	ldr	r2, [pc, #96]	@ (8004240 <HAL_RCC_OscConfig+0x8f8>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	61d3      	str	r3, [r2, #28]
 80041e6:	4b16      	ldr	r3, [pc, #88]	@ (8004240 <HAL_RCC_OscConfig+0x8f8>)
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80041ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004200:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	4b0f      	ldr	r3, [pc, #60]	@ (8004248 <HAL_RCC_OscConfig+0x900>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d121      	bne.n	8004258 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004214:	4b0c      	ldr	r3, [pc, #48]	@ (8004248 <HAL_RCC_OscConfig+0x900>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0b      	ldr	r2, [pc, #44]	@ (8004248 <HAL_RCC_OscConfig+0x900>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004220:	f7fd fad6 	bl	80017d0 <HAL_GetTick>
 8004224:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	e010      	b.n	800424c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422a:	f7fd fad1 	bl	80017d0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	@ 0x64
 8004238:	d908      	bls.n	800424c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e3d1      	b.n	80049e2 <HAL_RCC_OscConfig+0x109a>
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	10908120 	.word	0x10908120
 8004248:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b8d      	ldr	r3, [pc, #564]	@ (8004484 <HAL_RCC_OscConfig+0xb3c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0e8      	beq.n	800422a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800425c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x92e>
 8004268:	4b87      	ldr	r3, [pc, #540]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4a86      	ldr	r2, [pc, #536]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6213      	str	r3, [r2, #32]
 8004274:	e035      	b.n	80042e2 <HAL_RCC_OscConfig+0x99a>
 8004276:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800427a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x958>
 8004286:	4b80      	ldr	r3, [pc, #512]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4a7f      	ldr	r2, [pc, #508]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	6213      	str	r3, [r2, #32]
 8004292:	4b7d      	ldr	r3, [pc, #500]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4a7c      	ldr	r2, [pc, #496]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	6213      	str	r3, [r2, #32]
 800429e:	e020      	b.n	80042e2 <HAL_RCC_OscConfig+0x99a>
 80042a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d10c      	bne.n	80042ca <HAL_RCC_OscConfig+0x982>
 80042b0:	4b75      	ldr	r3, [pc, #468]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4a74      	ldr	r2, [pc, #464]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6213      	str	r3, [r2, #32]
 80042bc:	4b72      	ldr	r3, [pc, #456]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4a71      	ldr	r2, [pc, #452]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6213      	str	r3, [r2, #32]
 80042c8:	e00b      	b.n	80042e2 <HAL_RCC_OscConfig+0x99a>
 80042ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6213      	str	r3, [r2, #32]
 80042d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4a6b      	ldr	r2, [pc, #428]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8081 	beq.w	80043f6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f4:	f7fd fa6c 	bl	80017d0 <HAL_GetTick>
 80042f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	e00b      	b.n	8004316 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fd fa67 	bl	80017d0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e365      	b.n	80049e2 <HAL_RCC_OscConfig+0x109a>
 8004316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800431a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800431e:	2202      	movs	r2, #2
 8004320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004326:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	fa93 f2a3 	rbit	r2, r3
 8004330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004334:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800433e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004342:	2202      	movs	r2, #2
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800434a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	fa93 f2a3 	rbit	r2, r3
 8004354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004358:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800435c:	601a      	str	r2, [r3, #0]
  return result;
 800435e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004362:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004366:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d102      	bne.n	8004382 <HAL_RCC_OscConfig+0xa3a>
 800437c:	4b42      	ldr	r3, [pc, #264]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	e013      	b.n	80043aa <HAL_RCC_OscConfig+0xa62>
 8004382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004386:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800438a:	2202      	movs	r2, #2
 800438c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004392:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fa93 f2a3 	rbit	r2, r3
 800439c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043a0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	4b38      	ldr	r3, [pc, #224]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80043b2:	2102      	movs	r1, #2
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043ba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	fa92 f1a2 	rbit	r1, r2
 80043c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043c8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80043cc:	6011      	str	r1, [r2, #0]
  return result;
 80043ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043d2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	fab2 f282 	clz	r2, r2
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	f002 021f 	and.w	r2, r2, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d084      	beq.n	80042fe <HAL_RCC_OscConfig+0x9b6>
 80043f4:	e083      	b.n	80044fe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f6:	f7fd f9eb 	bl	80017d0 <HAL_GetTick>
 80043fa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fd f9e6 	bl	80017d0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e2e4      	b.n	80049e2 <HAL_RCC_OscConfig+0x109a>
 8004418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800441c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004420:	2202      	movs	r2, #2
 8004422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004428:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	fa93 f2a3 	rbit	r2, r3
 8004432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004436:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004440:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004444:	2202      	movs	r2, #2
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800444c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	fa93 f2a3 	rbit	r2, r3
 8004456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800445a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800445e:	601a      	str	r2, [r3, #0]
  return result;
 8004460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004464:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004468:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f043 0302 	orr.w	r3, r3, #2
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d106      	bne.n	800448c <HAL_RCC_OscConfig+0xb44>
 800447e:	4b02      	ldr	r3, [pc, #8]	@ (8004488 <HAL_RCC_OscConfig+0xb40>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	e017      	b.n	80044b4 <HAL_RCC_OscConfig+0xb6c>
 8004484:	40007000 	.word	0x40007000
 8004488:	40021000 	.word	0x40021000
 800448c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004490:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004494:	2202      	movs	r2, #2
 8004496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800449c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044aa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	4bb3      	ldr	r3, [pc, #716]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044b8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80044bc:	2102      	movs	r1, #2
 80044be:	6011      	str	r1, [r2, #0]
 80044c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044c4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	fa92 f1a2 	rbit	r1, r2
 80044ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044d2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80044d6:	6011      	str	r1, [r2, #0]
  return result;
 80044d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044dc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	fab2 f282 	clz	r2, r2
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	f002 021f 	and.w	r2, r2, #31
 80044f2:	2101      	movs	r1, #1
 80044f4:	fa01 f202 	lsl.w	r2, r1, r2
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d180      	bne.n	8004400 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044fe:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004506:	4b9e      	ldr	r3, [pc, #632]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4a9d      	ldr	r2, [pc, #628]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004510:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004516:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 825e 	beq.w	80049e0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004524:	4b96      	ldr	r3, [pc, #600]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b08      	cmp	r3, #8
 800452e:	f000 821f 	beq.w	8004970 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004536:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b02      	cmp	r3, #2
 8004540:	f040 8170 	bne.w	8004824 <HAL_RCC_OscConfig+0xedc>
 8004544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004548:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800454c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004556:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	fa93 f2a3 	rbit	r2, r3
 8004560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004564:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004568:	601a      	str	r2, [r3, #0]
  return result;
 800456a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800456e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004572:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004574:	fab3 f383 	clz	r3, r3
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800457e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	461a      	mov	r2, r3
 8004586:	2300      	movs	r3, #0
 8004588:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fd f921 	bl	80017d0 <HAL_GetTick>
 800458e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004592:	e009      	b.n	80045a8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004594:	f7fd f91c 	bl	80017d0 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e21c      	b.n	80049e2 <HAL_RCC_OscConfig+0x109a>
 80045a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80045b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fa93 f2a3 	rbit	r2, r3
 80045c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045cc:	601a      	str	r2, [r3, #0]
  return result;
 80045ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d102      	bne.n	80045f2 <HAL_RCC_OscConfig+0xcaa>
 80045ec:	4b64      	ldr	r3, [pc, #400]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	e027      	b.n	8004642 <HAL_RCC_OscConfig+0xcfa>
 80045f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045f6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80045fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004604:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	fa93 f2a3 	rbit	r2, r3
 800460e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004612:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800461c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004620:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800462a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	fa93 f2a3 	rbit	r2, r3
 8004634:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004638:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	4b50      	ldr	r3, [pc, #320]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004646:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800464a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800464e:	6011      	str	r1, [r2, #0]
 8004650:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004654:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	fa92 f1a2 	rbit	r1, r2
 800465e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004662:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004666:	6011      	str	r1, [r2, #0]
  return result;
 8004668:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800466c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	fab2 f282 	clz	r2, r2
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	f042 0220 	orr.w	r2, r2, #32
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	f002 021f 	and.w	r2, r2, #31
 8004682:	2101      	movs	r1, #1
 8004684:	fa01 f202 	lsl.w	r2, r1, r2
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d182      	bne.n	8004594 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468e:	4b3c      	ldr	r3, [pc, #240]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	f023 020f 	bic.w	r2, r3, #15
 8004696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800469a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	4937      	ldr	r1, [pc, #220]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80046a8:	4b35      	ldr	r3, [pc, #212]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80046b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a19      	ldr	r1, [r3, #32]
 80046bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	492d      	ldr	r1, [pc, #180]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
 80046d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046d4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80046d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	fa93 f2a3 	rbit	r2, r3
 80046ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046f4:	601a      	str	r2, [r3, #0]
  return result;
 80046f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004700:	fab3 f383 	clz	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800470a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	461a      	mov	r2, r3
 8004712:	2301      	movs	r3, #1
 8004714:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fd f85b 	bl	80017d0 <HAL_GetTick>
 800471a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800471e:	e009      	b.n	8004734 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004720:	f7fd f856 	bl	80017d0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e156      	b.n	80049e2 <HAL_RCC_OscConfig+0x109a>
 8004734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004738:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800473c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004746:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	fa93 f2a3 	rbit	r2, r3
 8004750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004754:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004758:	601a      	str	r2, [r3, #0]
  return result;
 800475a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800475e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004762:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d105      	bne.n	8004784 <HAL_RCC_OscConfig+0xe3c>
 8004778:	4b01      	ldr	r3, [pc, #4]	@ (8004780 <HAL_RCC_OscConfig+0xe38>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	e02a      	b.n	80047d4 <HAL_RCC_OscConfig+0xe8c>
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004788:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800478c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004796:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	fa93 f2a3 	rbit	r2, r3
 80047a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047a4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80047b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047bc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	fa93 f2a3 	rbit	r2, r3
 80047c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047ca:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	4b86      	ldr	r3, [pc, #536]	@ (80049ec <HAL_RCC_OscConfig+0x10a4>)
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80047d8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80047dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80047e0:	6011      	str	r1, [r2, #0]
 80047e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80047e6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	fa92 f1a2 	rbit	r1, r2
 80047f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80047f4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80047f8:	6011      	str	r1, [r2, #0]
  return result;
 80047fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80047fe:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	fab2 f282 	clz	r2, r2
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	f042 0220 	orr.w	r2, r2, #32
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	f002 021f 	and.w	r2, r2, #31
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f202 	lsl.w	r2, r1, r2
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	f43f af7f 	beq.w	8004720 <HAL_RCC_OscConfig+0xdd8>
 8004822:	e0dd      	b.n	80049e0 <HAL_RCC_OscConfig+0x1098>
 8004824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004828:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800482c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004836:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	fa93 f2a3 	rbit	r2, r3
 8004840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004844:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004848:	601a      	str	r2, [r3, #0]
  return result;
 800484a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800484e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004852:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800485e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	2300      	movs	r3, #0
 8004868:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fc ffb1 	bl	80017d0 <HAL_GetTick>
 800486e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004872:	e009      	b.n	8004888 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004874:	f7fc ffac 	bl	80017d0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e0ac      	b.n	80049e2 <HAL_RCC_OscConfig+0x109a>
 8004888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800488c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004890:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800489a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	fa93 f2a3 	rbit	r2, r3
 80048a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80048ac:	601a      	str	r2, [r3, #0]
  return result;
 80048ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048b2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80048b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b8:	fab3 f383 	clz	r3, r3
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_OscConfig+0xf8a>
 80048cc:	4b47      	ldr	r3, [pc, #284]	@ (80049ec <HAL_RCC_OscConfig+0x10a4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	e027      	b.n	8004922 <HAL_RCC_OscConfig+0xfda>
 80048d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048d6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80048da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048e4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	fa93 f2a3 	rbit	r2, r3
 80048ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048f2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048fc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004900:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800490a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	fa93 f2a3 	rbit	r2, r3
 8004914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004918:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	4b33      	ldr	r3, [pc, #204]	@ (80049ec <HAL_RCC_OscConfig+0x10a4>)
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004926:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800492a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800492e:	6011      	str	r1, [r2, #0]
 8004930:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004934:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	fa92 f1a2 	rbit	r1, r2
 800493e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004942:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004946:	6011      	str	r1, [r2, #0]
  return result;
 8004948:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800494c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	fab2 f282 	clz	r2, r2
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	f042 0220 	orr.w	r2, r2, #32
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	f002 021f 	and.w	r2, r2, #31
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f202 	lsl.w	r2, r1, r2
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d182      	bne.n	8004874 <HAL_RCC_OscConfig+0xf2c>
 800496e:	e037      	b.n	80049e0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004974:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e02e      	b.n	80049e2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004984:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <HAL_RCC_OscConfig+0x10a4>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800498c:	4b17      	ldr	r3, [pc, #92]	@ (80049ec <HAL_RCC_OscConfig+0x10a4>)
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004994:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004998:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800499c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d117      	bne.n	80049dc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80049ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80049b0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d10b      	bne.n	80049dc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80049c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049c8:	f003 020f 	and.w	r2, r3, #15
 80049cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000

080049f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b09e      	sub	sp, #120	@ 0x78
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e162      	b.n	8004cce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b90      	ldr	r3, [pc, #576]	@ (8004c4c <HAL_RCC_ClockConfig+0x25c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d910      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b8d      	ldr	r3, [pc, #564]	@ (8004c4c <HAL_RCC_ClockConfig+0x25c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	498b      	ldr	r1, [pc, #556]	@ (8004c4c <HAL_RCC_ClockConfig+0x25c>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b89      	ldr	r3, [pc, #548]	@ (8004c4c <HAL_RCC_ClockConfig+0x25c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e14a      	b.n	8004cce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a44:	4b82      	ldr	r3, [pc, #520]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	497f      	ldr	r1, [pc, #508]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80dc 	beq.w	8004c1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d13c      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xf6>
 8004a6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a70:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7c:	fab3 f383 	clz	r3, r3
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xa6>
 8004a90:	4b6f      	ldr	r3, [pc, #444]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	e00f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0xc6>
 8004a96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aac:	fa93 f3a3 	rbit	r3, r3
 8004ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ab2:	4b67      	ldr	r3, [pc, #412]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004aba:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004abc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004abe:	fa92 f2a2 	rbit	r2, r2
 8004ac2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004ac4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ac6:	fab2 f282 	clz	r2, r2
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	f042 0220 	orr.w	r2, r2, #32
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	f002 021f 	and.w	r2, r2, #31
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d17b      	bne.n	8004bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0f3      	b.n	8004cce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d13c      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x178>
 8004aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004af2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d102      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x128>
 8004b12:	4b4f      	ldr	r3, [pc, #316]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	e00f      	b.n	8004b38 <HAL_RCC_ClockConfig+0x148>
 8004b18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b34:	4b46      	ldr	r3, [pc, #280]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b3c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004b3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b40:	fa92 f2a2 	rbit	r2, r2
 8004b44:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004b46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b48:	fab2 f282 	clz	r2, r2
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	f042 0220 	orr.w	r2, r2, #32
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	f002 021f 	and.w	r2, r2, #31
 8004b58:	2101      	movs	r1, #1
 8004b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d13a      	bne.n	8004bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0b2      	b.n	8004cce <HAL_RCC_ClockConfig+0x2de>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d102      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x1a0>
 8004b8a:	4b31      	ldr	r3, [pc, #196]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	e00d      	b.n	8004bac <HAL_RCC_ClockConfig+0x1bc>
 8004b90:	2302      	movs	r3, #2
 8004b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	fa93 f3a3 	rbit	r3, r3
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	623b      	str	r3, [r7, #32]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	4b29      	ldr	r3, [pc, #164]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	2202      	movs	r2, #2
 8004bae:	61ba      	str	r2, [r7, #24]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	fa92 f2a2 	rbit	r2, r2
 8004bb6:	617a      	str	r2, [r7, #20]
  return result;
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	fab2 f282 	clz	r2, r2
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	f042 0220 	orr.w	r2, r2, #32
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	f002 021f 	and.w	r2, r2, #31
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e079      	b.n	8004cce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b1d      	ldr	r3, [pc, #116]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	491a      	ldr	r1, [pc, #104]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bec:	f7fc fdf0 	bl	80017d0 <HAL_GetTick>
 8004bf0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fc fdec 	bl	80017d0 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e061      	b.n	8004cce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <HAL_RCC_ClockConfig+0x260>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_RCC_ClockConfig+0x25c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d214      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <HAL_RCC_ClockConfig+0x25c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f023 0207 	bic.w	r2, r3, #7
 8004c32:	4906      	ldr	r1, [pc, #24]	@ (8004c4c <HAL_RCC_ClockConfig+0x25c>)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b04      	ldr	r3, [pc, #16]	@ (8004c4c <HAL_RCC_ClockConfig+0x25c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e040      	b.n	8004cce <HAL_RCC_ClockConfig+0x2de>
 8004c4c:	40022000 	.word	0x40022000
 8004c50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	491a      	ldr	r1, [pc, #104]	@ (8004cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7e:	4b16      	ldr	r3, [pc, #88]	@ (8004cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4912      	ldr	r1, [pc, #72]	@ (8004cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c92:	f000 f829 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004c96:	4601      	mov	r1, r0
 8004c98:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ca0:	22f0      	movs	r2, #240	@ 0xf0
 8004ca2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	fa92 f2a2 	rbit	r2, r2
 8004caa:	60fa      	str	r2, [r7, #12]
  return result;
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	fab2 f282 	clz	r2, r2
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	40d3      	lsrs	r3, r2
 8004cb6:	4a09      	ldr	r2, [pc, #36]	@ (8004cdc <HAL_RCC_ClockConfig+0x2ec>)
 8004cb8:	5cd3      	ldrb	r3, [r2, r3]
 8004cba:	fa21 f303 	lsr.w	r3, r1, r3
 8004cbe:	4a08      	ldr	r2, [pc, #32]	@ (8004ce0 <HAL_RCC_ClockConfig+0x2f0>)
 8004cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004cc2:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <HAL_RCC_ClockConfig+0x2f4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fc fc7e 	bl	80015c8 <HAL_InitTick>
  
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3778      	adds	r7, #120	@ 0x78
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	080096ac 	.word	0x080096ac
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	20000004 	.word	0x20000004

08004ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004d02:	4b1f      	ldr	r3, [pc, #124]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d002      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x30>
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x36>
 8004d16:	e029      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d18:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d1a:	613b      	str	r3, [r7, #16]
      break;
 8004d1c:	e029      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	0c9b      	lsrs	r3, r3, #18
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d28:	5cd3      	ldrb	r3, [r2, r3]
 8004d2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004d2c:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	4a15      	ldr	r2, [pc, #84]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d36:	5cd3      	ldrb	r3, [r2, r3]
 8004d38:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d44:	4a0f      	ldr	r2, [pc, #60]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e007      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d56:	4a0b      	ldr	r2, [pc, #44]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	fb02 f303 	mul.w	r3, r2, r3
 8004d64:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	613b      	str	r3, [r7, #16]
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d6e:	613b      	str	r3, [r7, #16]
      break;
 8004d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d72:	693b      	ldr	r3, [r7, #16]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40021000 	.word	0x40021000
 8004d84:	007a1200 	.word	0x007a1200
 8004d88:	080096c4 	.word	0x080096c4
 8004d8c:	080096d4 	.word	0x080096d4

08004d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d94:	4b03      	ldr	r3, [pc, #12]	@ (8004da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000000 	.word	0x20000000

08004da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004dae:	f7ff ffef 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004db2:	4601      	mov	r1, r0
 8004db4:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004dbc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004dc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	fa92 f2a2 	rbit	r2, r2
 8004dc8:	603a      	str	r2, [r7, #0]
  return result;
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	fab2 f282 	clz	r2, r2
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	40d3      	lsrs	r3, r2
 8004dd4:	4a04      	ldr	r2, [pc, #16]	@ (8004de8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004dd6:	5cd3      	ldrb	r3, [r2, r3]
 8004dd8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	080096bc 	.word	0x080096bc

08004dec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	220f      	movs	r2, #15
 8004dfa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dfc:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <HAL_RCC_GetClockConfig+0x5c>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0203 	and.w	r2, r3, #3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004e08:	4b0f      	ldr	r3, [pc, #60]	@ (8004e48 <HAL_RCC_GetClockConfig+0x5c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004e14:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <HAL_RCC_GetClockConfig+0x5c>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e20:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <HAL_RCC_GetClockConfig+0x5c>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	08db      	lsrs	r3, r3, #3
 8004e26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004e2e:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <HAL_RCC_GetClockConfig+0x60>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0207 	and.w	r2, r3, #7
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	601a      	str	r2, [r3, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40022000 	.word	0x40022000

08004e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b092      	sub	sp, #72	@ 0x48
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 80d4 	beq.w	800501c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e74:	4b4e      	ldr	r3, [pc, #312]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10e      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b4b      	ldr	r3, [pc, #300]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4a4a      	ldr	r2, [pc, #296]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	61d3      	str	r3, [r2, #28]
 8004e8c:	4b48      	ldr	r3, [pc, #288]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9e:	4b45      	ldr	r3, [pc, #276]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d118      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eaa:	4b42      	ldr	r3, [pc, #264]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a41      	ldr	r2, [pc, #260]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb6:	f7fc fc8b 	bl	80017d0 <HAL_GetTick>
 8004eba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebe:	f7fc fc87 	bl	80017d0 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b64      	cmp	r3, #100	@ 0x64
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e1d6      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	4b38      	ldr	r3, [pc, #224]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004edc:	4b34      	ldr	r3, [pc, #208]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8084 	beq.w	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ef6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d07c      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004efc:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	fa93 f3a3 	rbit	r3, r3
 8004f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f16:	fab3 f383 	clz	r3, r3
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b26      	ldr	r3, [pc, #152]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	461a      	mov	r2, r3
 8004f26:	2301      	movs	r3, #1
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f32:	fa93 f3a3 	rbit	r3, r3
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f3a:	fab3 f383 	clz	r3, r3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f4e:	4a18      	ldr	r2, [pc, #96]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d04b      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fc fc37 	bl	80017d0 <HAL_GetTick>
 8004f62:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f66:	f7fc fc33 	bl	80017d0 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e180      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	fa93 f3a3 	rbit	r3, r3
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f88:	2302      	movs	r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	fa93 f3a3 	rbit	r3, r3
 8004f92:	61fb      	str	r3, [r7, #28]
  return result;
 8004f94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f96:	fab3 f383 	clz	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f043 0302 	orr.w	r3, r3, #2
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d108      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004faa:	4b01      	ldr	r3, [pc, #4]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	e00d      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	10908100 	.word	0x10908100
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	fa93 f3a3 	rbit	r3, r3
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	4b9a      	ldr	r3, [pc, #616]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	2202      	movs	r2, #2
 8004fce:	613a      	str	r2, [r7, #16]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	fa92 f2a2 	rbit	r2, r2
 8004fd6:	60fa      	str	r2, [r7, #12]
  return result;
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	fab2 f282 	clz	r2, r2
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	f002 021f 	and.w	r2, r2, #31
 8004fea:	2101      	movs	r1, #1
 8004fec:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0b7      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ff6:	4b8f      	ldr	r3, [pc, #572]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	498c      	ldr	r1, [pc, #560]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005004:	4313      	orrs	r3, r2
 8005006:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005008:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800500c:	2b01      	cmp	r3, #1
 800500e:	d105      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005010:	4b88      	ldr	r3, [pc, #544]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	4a87      	ldr	r2, [pc, #540]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005028:	4b82      	ldr	r3, [pc, #520]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	f023 0203 	bic.w	r2, r3, #3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	497f      	ldr	r1, [pc, #508]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005046:	4b7b      	ldr	r3, [pc, #492]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	4978      	ldr	r1, [pc, #480]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005054:	4313      	orrs	r3, r2
 8005056:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005064:	4b73      	ldr	r3, [pc, #460]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005068:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4970      	ldr	r1, [pc, #448]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005082:	4b6c      	ldr	r3, [pc, #432]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005086:	f023 0210 	bic.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4969      	ldr	r1, [pc, #420]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005090:	4313      	orrs	r3, r2
 8005092:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80050a0:	4b64      	ldr	r3, [pc, #400]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ac:	4961      	ldr	r1, [pc, #388]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050be:	4b5d      	ldr	r3, [pc, #372]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	f023 0220 	bic.w	r2, r3, #32
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	495a      	ldr	r1, [pc, #360]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050dc:	4b55      	ldr	r3, [pc, #340]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	4952      	ldr	r1, [pc, #328]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	494b      	ldr	r1, [pc, #300]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005108:	4313      	orrs	r3, r2
 800510a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005118:	4b46      	ldr	r3, [pc, #280]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	4943      	ldr	r1, [pc, #268]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005126:	4313      	orrs	r3, r2
 8005128:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005136:	4b3f      	ldr	r3, [pc, #252]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	493c      	ldr	r1, [pc, #240]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005154:	4b37      	ldr	r3, [pc, #220]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	4934      	ldr	r1, [pc, #208]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005162:	4313      	orrs	r3, r2
 8005164:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005172:	4b30      	ldr	r3, [pc, #192]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	492d      	ldr	r1, [pc, #180]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005180:	4313      	orrs	r3, r2
 8005182:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005190:	4b28      	ldr	r3, [pc, #160]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	4925      	ldr	r1, [pc, #148]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80051ae:	4b21      	ldr	r3, [pc, #132]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	491e      	ldr	r1, [pc, #120]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80051cc:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d8:	4916      	ldr	r1, [pc, #88]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80051ea:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f6:	490f      	ldr	r1, [pc, #60]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005208:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005214:	4907      	ldr	r1, [pc, #28]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005226:	4b03      	ldr	r3, [pc, #12]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	e002      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523a:	4913      	ldr	r1, [pc, #76]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800523c:	4313      	orrs	r3, r2
 800523e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800524c:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005258:	490b      	ldr	r1, [pc, #44]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800525a:	4313      	orrs	r3, r2
 800525c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800526a:	4b07      	ldr	r3, [pc, #28]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005276:	4904      	ldr	r1, [pc, #16]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005278:	4313      	orrs	r3, r2
 800527a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3748      	adds	r7, #72	@ 0x48
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40021000 	.word	0x40021000

0800528c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e049      	b.n	8005332 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f841 	bl	800533a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f000 f9da 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d001      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e04f      	b.n	8005408 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a23      	ldr	r2, [pc, #140]	@ (8005414 <HAL_TIM_Base_Start_IT+0xc4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01d      	beq.n	80053c6 <HAL_TIM_Base_Start_IT+0x76>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005392:	d018      	beq.n	80053c6 <HAL_TIM_Base_Start_IT+0x76>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1f      	ldr	r2, [pc, #124]	@ (8005418 <HAL_TIM_Base_Start_IT+0xc8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_TIM_Base_Start_IT+0x76>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1e      	ldr	r2, [pc, #120]	@ (800541c <HAL_TIM_Base_Start_IT+0xcc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_TIM_Base_Start_IT+0x76>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005420 <HAL_TIM_Base_Start_IT+0xd0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_TIM_Base_Start_IT+0x76>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005424 <HAL_TIM_Base_Start_IT+0xd4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIM_Base_Start_IT+0x76>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <HAL_TIM_Base_Start_IT+0xd8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d115      	bne.n	80053f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b17      	ldr	r3, [pc, #92]	@ (800542c <HAL_TIM_Base_Start_IT+0xdc>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d015      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0xb4>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053de:	d011      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	e008      	b.n	8005404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e000      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40013400 	.word	0x40013400
 8005424:	40014000 	.word	0x40014000
 8005428:	40015000 	.word	0x40015000
 800542c:	00010007 	.word	0x00010007

08005430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d020      	beq.n	8005494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01b      	beq.n	8005494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0202 	mvn.w	r2, #2
 8005464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f8e4 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f8d6 	bl	8005634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f8e7 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d020      	beq.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01b      	beq.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0204 	mvn.w	r2, #4
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8be 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8b0 	bl	8005634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f8c1 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d020      	beq.n	800552c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0208 	mvn.w	r2, #8
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2204      	movs	r2, #4
 8005502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f898 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f88a 	bl	8005634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f89b 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	d020      	beq.n	8005578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0210 	mvn.w	r2, #16
 8005548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2208      	movs	r2, #8
 800554e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f872 	bl	8005648 <HAL_TIM_IC_CaptureCallback>
 8005564:	e005      	b.n	8005572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f864 	bl	8005634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f875 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0201 	mvn.w	r2, #1
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fb ff22 	bl	80013e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f916 	bl	80057ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00c      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f90e 	bl	8005800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00c      	beq.n	8005608 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f834 	bl	8005670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0220 	mvn.w	r2, #32
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8d6 	bl	80057d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a48      	ldr	r2, [pc, #288]	@ (80057b8 <TIM_Base_SetConfig+0x134>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a2:	d00f      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a45      	ldr	r2, [pc, #276]	@ (80057bc <TIM_Base_SetConfig+0x138>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a44      	ldr	r2, [pc, #272]	@ (80057c0 <TIM_Base_SetConfig+0x13c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d007      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a43      	ldr	r2, [pc, #268]	@ (80057c4 <TIM_Base_SetConfig+0x140>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a42      	ldr	r2, [pc, #264]	@ (80057c8 <TIM_Base_SetConfig+0x144>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d108      	bne.n	80056d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a37      	ldr	r2, [pc, #220]	@ (80057b8 <TIM_Base_SetConfig+0x134>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01f      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e4:	d01b      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a34      	ldr	r2, [pc, #208]	@ (80057bc <TIM_Base_SetConfig+0x138>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d017      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a33      	ldr	r2, [pc, #204]	@ (80057c0 <TIM_Base_SetConfig+0x13c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d013      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a32      	ldr	r2, [pc, #200]	@ (80057c4 <TIM_Base_SetConfig+0x140>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00f      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a32      	ldr	r2, [pc, #200]	@ (80057cc <TIM_Base_SetConfig+0x148>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00b      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a31      	ldr	r2, [pc, #196]	@ (80057d0 <TIM_Base_SetConfig+0x14c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a30      	ldr	r2, [pc, #192]	@ (80057d4 <TIM_Base_SetConfig+0x150>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2b      	ldr	r2, [pc, #172]	@ (80057c8 <TIM_Base_SetConfig+0x144>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d108      	bne.n	8005730 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a18      	ldr	r2, [pc, #96]	@ (80057b8 <TIM_Base_SetConfig+0x134>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d013      	beq.n	8005784 <TIM_Base_SetConfig+0x100>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a19      	ldr	r2, [pc, #100]	@ (80057c4 <TIM_Base_SetConfig+0x140>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00f      	beq.n	8005784 <TIM_Base_SetConfig+0x100>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a19      	ldr	r2, [pc, #100]	@ (80057cc <TIM_Base_SetConfig+0x148>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00b      	beq.n	8005784 <TIM_Base_SetConfig+0x100>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a18      	ldr	r2, [pc, #96]	@ (80057d0 <TIM_Base_SetConfig+0x14c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d007      	beq.n	8005784 <TIM_Base_SetConfig+0x100>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a17      	ldr	r2, [pc, #92]	@ (80057d4 <TIM_Base_SetConfig+0x150>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_Base_SetConfig+0x100>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a12      	ldr	r2, [pc, #72]	@ (80057c8 <TIM_Base_SetConfig+0x144>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d103      	bne.n	800578c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	611a      	str	r2, [r3, #16]
  }
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40013400 	.word	0x40013400
 80057c8:	40015000 	.word	0x40015000
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40014400 	.word	0x40014400
 80057d4:	40014800 	.word	0x40014800

080057d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005826:	2b84      	cmp	r3, #132	@ 0x84
 8005828:	d005      	beq.n	8005836 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800582a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	3303      	adds	r3, #3
 8005834:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005848:	f000 faf4 	bl	8005e34 <vTaskStartScheduler>
  
  return osOK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	bd80      	pop	{r7, pc}

08005852 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005854:	b089      	sub	sp, #36	@ 0x24
 8005856:	af04      	add	r7, sp, #16
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d020      	beq.n	80058a6 <osThreadCreate+0x54>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01c      	beq.n	80058a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685c      	ldr	r4, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691e      	ldr	r6, [r3, #16]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff ffc8 	bl	8005814 <makeFreeRtosPriority>
 8005884:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800588e:	9202      	str	r2, [sp, #8]
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	9100      	str	r1, [sp, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	4632      	mov	r2, r6
 8005898:	4629      	mov	r1, r5
 800589a:	4620      	mov	r0, r4
 800589c:	f000 f8ed 	bl	8005a7a <xTaskCreateStatic>
 80058a0:	4603      	mov	r3, r0
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e01c      	b.n	80058e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685c      	ldr	r4, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff ffaa 	bl	8005814 <makeFreeRtosPriority>
 80058c0:	4602      	mov	r2, r0
 80058c2:	f107 030c 	add.w	r3, r7, #12
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	9200      	str	r2, [sp, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	4632      	mov	r2, r6
 80058ce:	4629      	mov	r1, r5
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 f931 	bl	8005b38 <xTaskCreate>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d001      	beq.n	80058e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80058e0:	68fb      	ldr	r3, [r7, #12]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <osDelay+0x16>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	e000      	b.n	8005902 <osDelay+0x18>
 8005900:	2301      	movs	r3, #1
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fa60 	bl	8005dc8 <vTaskDelay>
  
  return osOK;
 8005908:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f103 0208 	add.w	r2, r3, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f04f 32ff 	mov.w	r2, #4294967295
 800592a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f103 0208 	add.w	r2, r3, #8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f103 0208 	add.w	r2, r3, #8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d103      	bne.n	80059d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e00c      	b.n	80059ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3308      	adds	r3, #8
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e002      	b.n	80059e2 <vListInsert+0x2e>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d2f6      	bcs.n	80059dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6892      	ldr	r2, [r2, #8]
 8005a3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d103      	bne.n	8005a5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	1e5a      	subs	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b08e      	sub	sp, #56	@ 0x38
 8005a7e:	af04      	add	r7, sp, #16
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10b      	bne.n	8005aa6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005aa0:	bf00      	nop
 8005aa2:	bf00      	nop
 8005aa4:	e7fd      	b.n	8005aa2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10b      	bne.n	8005ac4 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	61fb      	str	r3, [r7, #28]
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	e7fd      	b.n	8005ac0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ac4:	23a0      	movs	r3, #160	@ 0xa0
 8005ac6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2ba0      	cmp	r3, #160	@ 0xa0
 8005acc:	d00b      	beq.n	8005ae6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	61bb      	str	r3, [r7, #24]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01e      	beq.n	8005b2a <xTaskCreateStatic+0xb0>
 8005aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01b      	beq.n	8005b2a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005afa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b04:	2300      	movs	r3, #0
 8005b06:	9303      	str	r3, [sp, #12]
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	9302      	str	r3, [sp, #8]
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f851 	bl	8005bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b24:	f000 f8e6 	bl	8005cf4 <prvAddNewTaskToReadyList>
 8005b28:	e001      	b.n	8005b2e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b2e:	697b      	ldr	r3, [r7, #20]
	}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3728      	adds	r7, #40	@ 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08c      	sub	sp, #48	@ 0x30
 8005b3c:	af04      	add	r7, sp, #16
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 ff03 	bl	8006958 <pvPortMalloc>
 8005b52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00e      	beq.n	8005b78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005b5a:	20a0      	movs	r0, #160	@ 0xa0
 8005b5c:	f000 fefc 	bl	8006958 <pvPortMalloc>
 8005b60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b6e:	e005      	b.n	8005b7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b70:	6978      	ldr	r0, [r7, #20]
 8005b72:	f000 ffb9 	bl	8006ae8 <vPortFree>
 8005b76:	e001      	b.n	8005b7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d017      	beq.n	8005bb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9303      	str	r3, [sp, #12]
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	9302      	str	r3, [sp, #8]
 8005b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f80f 	bl	8005bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ba6:	69f8      	ldr	r0, [r7, #28]
 8005ba8:	f000 f8a4 	bl	8005cf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bac:	2301      	movs	r3, #1
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	e002      	b.n	8005bb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	617b      	str	r3, [r7, #20]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e012      	b.n	8005c3a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	7819      	ldrb	r1, [r3, #0]
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	3334      	adds	r3, #52	@ 0x34
 8005c24:	460a      	mov	r2, r1
 8005c26:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b0f      	cmp	r3, #15
 8005c3e:	d9e9      	bls.n	8005c14 <prvInitialiseNewTask+0x50>
 8005c40:	e000      	b.n	8005c44 <prvInitialiseNewTask+0x80>
		{
			break;
 8005c42:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d901      	bls.n	8005c56 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c52:	2306      	movs	r3, #6
 8005c54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	2200      	movs	r2, #0
 8005c66:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fe70 	bl	8005952 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	3318      	adds	r3, #24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff fe6b 	bl	8005952 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	f1c3 0207 	rsb	r2, r3, #7
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	334c      	adds	r3, #76	@ 0x4c
 8005ca6:	224c      	movs	r2, #76	@ 0x4c
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f003 f9ca 	bl	8009044 <memset>
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ce8 <prvInitialiseNewTask+0x124>)
 8005cb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8005cec <prvInitialiseNewTask+0x128>)
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf0 <prvInitialiseNewTask+0x12c>)
 8005cc0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	68f9      	ldr	r1, [r7, #12]
 8005cc6:	69b8      	ldr	r0, [r7, #24]
 8005cc8:	f000 fc34 	bl	8006534 <pxPortInitialiseStack>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cde:	bf00      	nop
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200014b0 	.word	0x200014b0
 8005cec:	20001518 	.word	0x20001518
 8005cf0:	20001580 	.word	0x20001580

08005cf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cfc:	f000 fd4c 	bl	8006798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d00:	4b2a      	ldr	r3, [pc, #168]	@ (8005dac <prvAddNewTaskToReadyList+0xb8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	4a29      	ldr	r2, [pc, #164]	@ (8005dac <prvAddNewTaskToReadyList+0xb8>)
 8005d08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d0a:	4b29      	ldr	r3, [pc, #164]	@ (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d12:	4a27      	ldr	r2, [pc, #156]	@ (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d18:	4b24      	ldr	r3, [pc, #144]	@ (8005dac <prvAddNewTaskToReadyList+0xb8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d110      	bne.n	8005d42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d20:	f000 fad8 	bl	80062d4 <prvInitialiseTaskLists>
 8005d24:	e00d      	b.n	8005d42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d26:	4b23      	ldr	r3, [pc, #140]	@ (8005db4 <prvAddNewTaskToReadyList+0xc0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d2e:	4b20      	ldr	r3, [pc, #128]	@ (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d802      	bhi.n	8005d42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d42:	4b1d      	ldr	r3, [pc, #116]	@ (8005db8 <prvAddNewTaskToReadyList+0xc4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3301      	adds	r3, #1
 8005d48:	4a1b      	ldr	r2, [pc, #108]	@ (8005db8 <prvAddNewTaskToReadyList+0xc4>)
 8005d4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d50:	2201      	movs	r2, #1
 8005d52:	409a      	lsls	r2, r3
 8005d54:	4b19      	ldr	r3, [pc, #100]	@ (8005dbc <prvAddNewTaskToReadyList+0xc8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	4a18      	ldr	r2, [pc, #96]	@ (8005dbc <prvAddNewTaskToReadyList+0xc8>)
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4a15      	ldr	r2, [pc, #84]	@ (8005dc0 <prvAddNewTaskToReadyList+0xcc>)
 8005d6c:	441a      	add	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7ff fdf9 	bl	800596c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d7a:	f000 fd3f 	bl	80067fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <prvAddNewTaskToReadyList+0xc0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d86:	4b0a      	ldr	r3, [pc, #40]	@ (8005db0 <prvAddNewTaskToReadyList+0xbc>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d207      	bcs.n	8005da4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d94:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <prvAddNewTaskToReadyList+0xd0>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200005b4 	.word	0x200005b4
 8005db0:	200004b4 	.word	0x200004b4
 8005db4:	200005c0 	.word	0x200005c0
 8005db8:	200005d0 	.word	0x200005d0
 8005dbc:	200005bc 	.word	0x200005bc
 8005dc0:	200004b8 	.word	0x200004b8
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dda:	4b14      	ldr	r3, [pc, #80]	@ (8005e2c <vTaskDelay+0x64>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <vTaskDelay+0x32>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	60bb      	str	r3, [r7, #8]
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	e7fd      	b.n	8005df6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005dfa:	f000 f885 	bl	8005f08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fb31 	bl	8006468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e06:	f000 f88d 	bl	8005f24 <xTaskResumeAll>
 8005e0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d107      	bne.n	8005e22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e12:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <vTaskDelay+0x68>)
 8005e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200005dc 	.word	0x200005dc
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	@ 0x28
 8005e38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e42:	463a      	mov	r2, r7
 8005e44:	1d39      	adds	r1, r7, #4
 8005e46:	f107 0308 	add.w	r3, r7, #8
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fa fe84 	bl	8000b58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	9202      	str	r2, [sp, #8]
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	460a      	mov	r2, r1
 8005e62:	4921      	ldr	r1, [pc, #132]	@ (8005ee8 <vTaskStartScheduler+0xb4>)
 8005e64:	4821      	ldr	r0, [pc, #132]	@ (8005eec <vTaskStartScheduler+0xb8>)
 8005e66:	f7ff fe08 	bl	8005a7a <xTaskCreateStatic>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4a20      	ldr	r2, [pc, #128]	@ (8005ef0 <vTaskStartScheduler+0xbc>)
 8005e6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e70:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef0 <vTaskStartScheduler+0xbc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e001      	b.n	8005e82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d11b      	bne.n	8005ec0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	613b      	str	r3, [r7, #16]
}
 8005e9a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e9c:	4b15      	ldr	r3, [pc, #84]	@ (8005ef4 <vTaskStartScheduler+0xc0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	334c      	adds	r3, #76	@ 0x4c
 8005ea2:	4a15      	ldr	r2, [pc, #84]	@ (8005ef8 <vTaskStartScheduler+0xc4>)
 8005ea4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea6:	4b15      	ldr	r3, [pc, #84]	@ (8005efc <vTaskStartScheduler+0xc8>)
 8005ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eae:	4b14      	ldr	r3, [pc, #80]	@ (8005f00 <vTaskStartScheduler+0xcc>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005eb4:	4b13      	ldr	r3, [pc, #76]	@ (8005f04 <vTaskStartScheduler+0xd0>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eba:	f000 fbc9 	bl	8006650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ebe:	e00f      	b.n	8005ee0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d10b      	bne.n	8005ee0 <vTaskStartScheduler+0xac>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	60fb      	str	r3, [r7, #12]
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	e7fd      	b.n	8005edc <vTaskStartScheduler+0xa8>
}
 8005ee0:	bf00      	nop
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	080096a4 	.word	0x080096a4
 8005eec:	080062a5 	.word	0x080062a5
 8005ef0:	200005d8 	.word	0x200005d8
 8005ef4:	200004b4 	.word	0x200004b4
 8005ef8:	2000009c 	.word	0x2000009c
 8005efc:	200005d4 	.word	0x200005d4
 8005f00:	200005c0 	.word	0x200005c0
 8005f04:	200005b8 	.word	0x200005b8

08005f08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f0c:	4b04      	ldr	r3, [pc, #16]	@ (8005f20 <vTaskSuspendAll+0x18>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	4a03      	ldr	r2, [pc, #12]	@ (8005f20 <vTaskSuspendAll+0x18>)
 8005f14:	6013      	str	r3, [r2, #0]
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	200005dc 	.word	0x200005dc

08005f24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f32:	4b42      	ldr	r3, [pc, #264]	@ (800603c <xTaskResumeAll+0x118>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <xTaskResumeAll+0x2e>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	603b      	str	r3, [r7, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f52:	f000 fc21 	bl	8006798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f56:	4b39      	ldr	r3, [pc, #228]	@ (800603c <xTaskResumeAll+0x118>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	4a37      	ldr	r2, [pc, #220]	@ (800603c <xTaskResumeAll+0x118>)
 8005f5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f60:	4b36      	ldr	r3, [pc, #216]	@ (800603c <xTaskResumeAll+0x118>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d161      	bne.n	800602c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f68:	4b35      	ldr	r3, [pc, #212]	@ (8006040 <xTaskResumeAll+0x11c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d05d      	beq.n	800602c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f70:	e02e      	b.n	8005fd0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f72:	4b34      	ldr	r3, [pc, #208]	@ (8006044 <xTaskResumeAll+0x120>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3318      	adds	r3, #24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fd51 	bl	8005a26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fd4c 	bl	8005a26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	2201      	movs	r2, #1
 8005f94:	409a      	lsls	r2, r3
 8005f96:	4b2c      	ldr	r3, [pc, #176]	@ (8006048 <xTaskResumeAll+0x124>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8006048 <xTaskResumeAll+0x124>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4a27      	ldr	r2, [pc, #156]	@ (800604c <xTaskResumeAll+0x128>)
 8005fae:	441a      	add	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f7ff fcd8 	bl	800596c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc0:	4b23      	ldr	r3, [pc, #140]	@ (8006050 <xTaskResumeAll+0x12c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fca:	4b22      	ldr	r3, [pc, #136]	@ (8006054 <xTaskResumeAll+0x130>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8006044 <xTaskResumeAll+0x120>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1cc      	bne.n	8005f72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fde:	f000 fa1d 	bl	800641c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <xTaskResumeAll+0x134>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fee:	f000 f837 	bl	8006060 <xTaskIncrementTick>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ff8:	4b16      	ldr	r3, [pc, #88]	@ (8006054 <xTaskResumeAll+0x130>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3b01      	subs	r3, #1
 8006002:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f1      	bne.n	8005fee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800600a:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <xTaskResumeAll+0x134>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006010:	4b10      	ldr	r3, [pc, #64]	@ (8006054 <xTaskResumeAll+0x130>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800601c:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <xTaskResumeAll+0x138>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800602c:	f000 fbe6 	bl	80067fc <vPortExitCritical>

	return xAlreadyYielded;
 8006030:	68bb      	ldr	r3, [r7, #8]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200005dc 	.word	0x200005dc
 8006040:	200005b4 	.word	0x200005b4
 8006044:	20000574 	.word	0x20000574
 8006048:	200005bc 	.word	0x200005bc
 800604c:	200004b8 	.word	0x200004b8
 8006050:	200004b4 	.word	0x200004b4
 8006054:	200005c8 	.word	0x200005c8
 8006058:	200005c4 	.word	0x200005c4
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800606a:	4b51      	ldr	r3, [pc, #324]	@ (80061b0 <xTaskIncrementTick+0x150>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 808e 	bne.w	8006190 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006074:	4b4f      	ldr	r3, [pc, #316]	@ (80061b4 <xTaskIncrementTick+0x154>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800607c:	4a4d      	ldr	r2, [pc, #308]	@ (80061b4 <xTaskIncrementTick+0x154>)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d121      	bne.n	80060cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006088:	4b4b      	ldr	r3, [pc, #300]	@ (80061b8 <xTaskIncrementTick+0x158>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	603b      	str	r3, [r7, #0]
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <xTaskIncrementTick+0x46>
 80060aa:	4b43      	ldr	r3, [pc, #268]	@ (80061b8 <xTaskIncrementTick+0x158>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	4b42      	ldr	r3, [pc, #264]	@ (80061bc <xTaskIncrementTick+0x15c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a40      	ldr	r2, [pc, #256]	@ (80061b8 <xTaskIncrementTick+0x158>)
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	4a40      	ldr	r2, [pc, #256]	@ (80061bc <xTaskIncrementTick+0x15c>)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	4b40      	ldr	r3, [pc, #256]	@ (80061c0 <xTaskIncrementTick+0x160>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a3e      	ldr	r2, [pc, #248]	@ (80061c0 <xTaskIncrementTick+0x160>)
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	f000 f9a8 	bl	800641c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060cc:	4b3d      	ldr	r3, [pc, #244]	@ (80061c4 <xTaskIncrementTick+0x164>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d34d      	bcc.n	8006172 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060d6:	4b38      	ldr	r3, [pc, #224]	@ (80061b8 <xTaskIncrementTick+0x158>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <xTaskIncrementTick+0x84>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <xTaskIncrementTick+0x86>
 80060e4:	2300      	movs	r3, #0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d004      	beq.n	80060f4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ea:	4b36      	ldr	r3, [pc, #216]	@ (80061c4 <xTaskIncrementTick+0x164>)
 80060ec:	f04f 32ff 	mov.w	r2, #4294967295
 80060f0:	601a      	str	r2, [r3, #0]
					break;
 80060f2:	e03e      	b.n	8006172 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060f4:	4b30      	ldr	r3, [pc, #192]	@ (80061b8 <xTaskIncrementTick+0x158>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d203      	bcs.n	8006114 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800610c:	4a2d      	ldr	r2, [pc, #180]	@ (80061c4 <xTaskIncrementTick+0x164>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6013      	str	r3, [r2, #0]
						break;
 8006112:	e02e      	b.n	8006172 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fc84 	bl	8005a26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	3318      	adds	r3, #24
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fc7b 	bl	8005a26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	2201      	movs	r2, #1
 8006136:	409a      	lsls	r2, r3
 8006138:	4b23      	ldr	r3, [pc, #140]	@ (80061c8 <xTaskIncrementTick+0x168>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4313      	orrs	r3, r2
 800613e:	4a22      	ldr	r2, [pc, #136]	@ (80061c8 <xTaskIncrementTick+0x168>)
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <xTaskIncrementTick+0x16c>)
 8006150:	441a      	add	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3304      	adds	r3, #4
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f7ff fc07 	bl	800596c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <xTaskIncrementTick+0x170>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	429a      	cmp	r2, r3
 800616a:	d3b4      	bcc.n	80060d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006170:	e7b1      	b.n	80060d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006172:	4b17      	ldr	r3, [pc, #92]	@ (80061d0 <xTaskIncrementTick+0x170>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006178:	4914      	ldr	r1, [pc, #80]	@ (80061cc <xTaskIncrementTick+0x16c>)
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d907      	bls.n	800619a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	e004      	b.n	800619a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006190:	4b10      	ldr	r3, [pc, #64]	@ (80061d4 <xTaskIncrementTick+0x174>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	4a0f      	ldr	r2, [pc, #60]	@ (80061d4 <xTaskIncrementTick+0x174>)
 8006198:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800619a:	4b0f      	ldr	r3, [pc, #60]	@ (80061d8 <xTaskIncrementTick+0x178>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80061a2:	2301      	movs	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061a6:	697b      	ldr	r3, [r7, #20]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	200005dc 	.word	0x200005dc
 80061b4:	200005b8 	.word	0x200005b8
 80061b8:	2000056c 	.word	0x2000056c
 80061bc:	20000570 	.word	0x20000570
 80061c0:	200005cc 	.word	0x200005cc
 80061c4:	200005d4 	.word	0x200005d4
 80061c8:	200005bc 	.word	0x200005bc
 80061cc:	200004b8 	.word	0x200004b8
 80061d0:	200004b4 	.word	0x200004b4
 80061d4:	200005c4 	.word	0x200005c4
 80061d8:	200005c8 	.word	0x200005c8

080061dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061e2:	4b2a      	ldr	r3, [pc, #168]	@ (800628c <vTaskSwitchContext+0xb0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ea:	4b29      	ldr	r3, [pc, #164]	@ (8006290 <vTaskSwitchContext+0xb4>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061f0:	e045      	b.n	800627e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80061f2:	4b27      	ldr	r3, [pc, #156]	@ (8006290 <vTaskSwitchContext+0xb4>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80061f8:	4b26      	ldr	r3, [pc, #152]	@ (8006294 <vTaskSwitchContext+0xb8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	fab3 f383 	clz	r3, r3
 8006204:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006206:	7afb      	ldrb	r3, [r7, #11]
 8006208:	f1c3 031f 	rsb	r3, r3, #31
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	4922      	ldr	r1, [pc, #136]	@ (8006298 <vTaskSwitchContext+0xbc>)
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10b      	bne.n	800623a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	607b      	str	r3, [r7, #4]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <vTaskSwitchContext+0x5a>
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4a14      	ldr	r2, [pc, #80]	@ (8006298 <vTaskSwitchContext+0xbc>)
 8006246:	4413      	add	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3308      	adds	r3, #8
 800625c:	429a      	cmp	r2, r3
 800625e:	d104      	bne.n	800626a <vTaskSwitchContext+0x8e>
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	605a      	str	r2, [r3, #4]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4a0a      	ldr	r2, [pc, #40]	@ (800629c <vTaskSwitchContext+0xc0>)
 8006272:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006274:	4b09      	ldr	r3, [pc, #36]	@ (800629c <vTaskSwitchContext+0xc0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	334c      	adds	r3, #76	@ 0x4c
 800627a:	4a09      	ldr	r2, [pc, #36]	@ (80062a0 <vTaskSwitchContext+0xc4>)
 800627c:	6013      	str	r3, [r2, #0]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	200005dc 	.word	0x200005dc
 8006290:	200005c8 	.word	0x200005c8
 8006294:	200005bc 	.word	0x200005bc
 8006298:	200004b8 	.word	0x200004b8
 800629c:	200004b4 	.word	0x200004b4
 80062a0:	2000009c 	.word	0x2000009c

080062a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062ac:	f000 f852 	bl	8006354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062b0:	4b06      	ldr	r3, [pc, #24]	@ (80062cc <prvIdleTask+0x28>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d9f9      	bls.n	80062ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80062b8:	4b05      	ldr	r3, [pc, #20]	@ (80062d0 <prvIdleTask+0x2c>)
 80062ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062c8:	e7f0      	b.n	80062ac <prvIdleTask+0x8>
 80062ca:	bf00      	nop
 80062cc:	200004b8 	.word	0x200004b8
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
 80062de:	e00c      	b.n	80062fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4a12      	ldr	r2, [pc, #72]	@ (8006334 <prvInitialiseTaskLists+0x60>)
 80062ec:	4413      	add	r3, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fb0f 	bl	8005912 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3301      	adds	r3, #1
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b06      	cmp	r3, #6
 80062fe:	d9ef      	bls.n	80062e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006300:	480d      	ldr	r0, [pc, #52]	@ (8006338 <prvInitialiseTaskLists+0x64>)
 8006302:	f7ff fb06 	bl	8005912 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006306:	480d      	ldr	r0, [pc, #52]	@ (800633c <prvInitialiseTaskLists+0x68>)
 8006308:	f7ff fb03 	bl	8005912 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800630c:	480c      	ldr	r0, [pc, #48]	@ (8006340 <prvInitialiseTaskLists+0x6c>)
 800630e:	f7ff fb00 	bl	8005912 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006312:	480c      	ldr	r0, [pc, #48]	@ (8006344 <prvInitialiseTaskLists+0x70>)
 8006314:	f7ff fafd 	bl	8005912 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006318:	480b      	ldr	r0, [pc, #44]	@ (8006348 <prvInitialiseTaskLists+0x74>)
 800631a:	f7ff fafa 	bl	8005912 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800631e:	4b0b      	ldr	r3, [pc, #44]	@ (800634c <prvInitialiseTaskLists+0x78>)
 8006320:	4a05      	ldr	r2, [pc, #20]	@ (8006338 <prvInitialiseTaskLists+0x64>)
 8006322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006324:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <prvInitialiseTaskLists+0x7c>)
 8006326:	4a05      	ldr	r2, [pc, #20]	@ (800633c <prvInitialiseTaskLists+0x68>)
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	200004b8 	.word	0x200004b8
 8006338:	20000544 	.word	0x20000544
 800633c:	20000558 	.word	0x20000558
 8006340:	20000574 	.word	0x20000574
 8006344:	20000588 	.word	0x20000588
 8006348:	200005a0 	.word	0x200005a0
 800634c:	2000056c 	.word	0x2000056c
 8006350:	20000570 	.word	0x20000570

08006354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800635a:	e019      	b.n	8006390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800635c:	f000 fa1c 	bl	8006798 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006360:	4b10      	ldr	r3, [pc, #64]	@ (80063a4 <prvCheckTasksWaitingTermination+0x50>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fb5a 	bl	8005a26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006372:	4b0d      	ldr	r3, [pc, #52]	@ (80063a8 <prvCheckTasksWaitingTermination+0x54>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3b01      	subs	r3, #1
 8006378:	4a0b      	ldr	r2, [pc, #44]	@ (80063a8 <prvCheckTasksWaitingTermination+0x54>)
 800637a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <prvCheckTasksWaitingTermination+0x58>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3b01      	subs	r3, #1
 8006382:	4a0a      	ldr	r2, [pc, #40]	@ (80063ac <prvCheckTasksWaitingTermination+0x58>)
 8006384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006386:	f000 fa39 	bl	80067fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f810 	bl	80063b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <prvCheckTasksWaitingTermination+0x58>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e1      	bne.n	800635c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000588 	.word	0x20000588
 80063a8:	200005b4 	.word	0x200005b4
 80063ac:	2000059c 	.word	0x2000059c

080063b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	334c      	adds	r3, #76	@ 0x4c
 80063bc:	4618      	mov	r0, r3
 80063be:	f002 fe49 	bl	8009054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d108      	bne.n	80063de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fb89 	bl	8006ae8 <vPortFree>
				vPortFree( pxTCB );
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fb86 	bl	8006ae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063dc:	e019      	b.n	8006412 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d103      	bne.n	80063f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fb7d 	bl	8006ae8 <vPortFree>
	}
 80063ee:	e010      	b.n	8006412 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d00b      	beq.n	8006412 <prvDeleteTCB+0x62>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	60fb      	str	r3, [r7, #12]
}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	e7fd      	b.n	800640e <prvDeleteTCB+0x5e>
	}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006422:	4b0f      	ldr	r3, [pc, #60]	@ (8006460 <prvResetNextTaskUnblockTime+0x44>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <prvResetNextTaskUnblockTime+0x14>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <prvResetNextTaskUnblockTime+0x16>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d004      	beq.n	8006440 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <prvResetNextTaskUnblockTime+0x48>)
 8006438:	f04f 32ff 	mov.w	r2, #4294967295
 800643c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800643e:	e008      	b.n	8006452 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006440:	4b07      	ldr	r3, [pc, #28]	@ (8006460 <prvResetNextTaskUnblockTime+0x44>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4a05      	ldr	r2, [pc, #20]	@ (8006464 <prvResetNextTaskUnblockTime+0x48>)
 8006450:	6013      	str	r3, [r2, #0]
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	2000056c 	.word	0x2000056c
 8006464:	200005d4 	.word	0x200005d4

08006468 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006472:	4b29      	ldr	r3, [pc, #164]	@ (8006518 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006478:	4b28      	ldr	r3, [pc, #160]	@ (800651c <prvAddCurrentTaskToDelayedList+0xb4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fad1 	bl	8005a26 <uxListRemove>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800648a:	4b24      	ldr	r3, [pc, #144]	@ (800651c <prvAddCurrentTaskToDelayedList+0xb4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	2201      	movs	r2, #1
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	43da      	mvns	r2, r3
 8006498:	4b21      	ldr	r3, [pc, #132]	@ (8006520 <prvAddCurrentTaskToDelayedList+0xb8>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4013      	ands	r3, r2
 800649e:	4a20      	ldr	r2, [pc, #128]	@ (8006520 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d10a      	bne.n	80064c0 <prvAddCurrentTaskToDelayedList+0x58>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d007      	beq.n	80064c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064b0:	4b1a      	ldr	r3, [pc, #104]	@ (800651c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	481a      	ldr	r0, [pc, #104]	@ (8006524 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064ba:	f7ff fa57 	bl	800596c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064be:	e026      	b.n	800650e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4413      	add	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064c8:	4b14      	ldr	r3, [pc, #80]	@ (800651c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d209      	bcs.n	80064ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064d8:	4b13      	ldr	r3, [pc, #76]	@ (8006528 <prvAddCurrentTaskToDelayedList+0xc0>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b0f      	ldr	r3, [pc, #60]	@ (800651c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7ff fa65 	bl	80059b4 <vListInsert>
}
 80064ea:	e010      	b.n	800650e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ec:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <prvAddCurrentTaskToDelayedList+0xc4>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	4b0a      	ldr	r3, [pc, #40]	@ (800651c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f7ff fa5b 	bl	80059b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	429a      	cmp	r2, r3
 8006506:	d202      	bcs.n	800650e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006508:	4a09      	ldr	r2, [pc, #36]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xc8>)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6013      	str	r3, [r2, #0]
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	200005b8 	.word	0x200005b8
 800651c:	200004b4 	.word	0x200004b4
 8006520:	200005bc 	.word	0x200005bc
 8006524:	200005a0 	.word	0x200005a0
 8006528:	20000570 	.word	0x20000570
 800652c:	2000056c 	.word	0x2000056c
 8006530:	200005d4 	.word	0x200005d4

08006534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3b04      	subs	r3, #4
 8006544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800654c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3b04      	subs	r3, #4
 8006552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f023 0201 	bic.w	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3b04      	subs	r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006564:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <pxPortInitialiseStack+0x64>)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3b14      	subs	r3, #20
 800656e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3b04      	subs	r3, #4
 800657a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f06f 0202 	mvn.w	r2, #2
 8006582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3b20      	subs	r3, #32
 8006588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	0800659d 	.word	0x0800659d

0800659c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065a6:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <prvTaskExitError+0x58>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	d00b      	beq.n	80065c8 <prvTaskExitError+0x2c>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60fb      	str	r3, [r7, #12]
}
 80065c2:	bf00      	nop
 80065c4:	bf00      	nop
 80065c6:	e7fd      	b.n	80065c4 <prvTaskExitError+0x28>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60bb      	str	r3, [r7, #8]
}
 80065da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065dc:	bf00      	nop
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0fc      	beq.n	80065de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	2000000c 	.word	0x2000000c
	...

08006600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006600:	4b07      	ldr	r3, [pc, #28]	@ (8006620 <pxCurrentTCBConst2>)
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	f380 8809 	msr	PSP, r0
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	4770      	bx	lr
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst2>:
 8006620:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006628:	4808      	ldr	r0, [pc, #32]	@ (800664c <prvPortStartFirstTask+0x24>)
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	6800      	ldr	r0, [r0, #0]
 800662e:	f380 8808 	msr	MSP, r0
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f380 8814 	msr	CONTROL, r0
 800663a:	b662      	cpsie	i
 800663c:	b661      	cpsie	f
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	df00      	svc	0
 8006648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800664a:	bf00      	nop
 800664c:	e000ed08 	.word	0xe000ed08

08006650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006656:	4b47      	ldr	r3, [pc, #284]	@ (8006774 <xPortStartScheduler+0x124>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a47      	ldr	r2, [pc, #284]	@ (8006778 <xPortStartScheduler+0x128>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10b      	bne.n	8006678 <xPortStartScheduler+0x28>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006678:	4b3e      	ldr	r3, [pc, #248]	@ (8006774 <xPortStartScheduler+0x124>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a3f      	ldr	r2, [pc, #252]	@ (800677c <xPortStartScheduler+0x12c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d10b      	bne.n	800669a <xPortStartScheduler+0x4a>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800669a:	4b39      	ldr	r3, [pc, #228]	@ (8006780 <xPortStartScheduler+0x130>)
 800669c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	22ff      	movs	r2, #255	@ 0xff
 80066aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	4b31      	ldr	r3, [pc, #196]	@ (8006784 <xPortStartScheduler+0x134>)
 80066c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066c2:	4b31      	ldr	r3, [pc, #196]	@ (8006788 <xPortStartScheduler+0x138>)
 80066c4:	2207      	movs	r2, #7
 80066c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066c8:	e009      	b.n	80066de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80066ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006788 <xPortStartScheduler+0x138>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006788 <xPortStartScheduler+0x138>)
 80066d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e6:	2b80      	cmp	r3, #128	@ 0x80
 80066e8:	d0ef      	beq.n	80066ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066ea:	4b27      	ldr	r3, [pc, #156]	@ (8006788 <xPortStartScheduler+0x138>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1c3 0307 	rsb	r3, r3, #7
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d00b      	beq.n	800670e <xPortStartScheduler+0xbe>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	60bb      	str	r3, [r7, #8]
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	e7fd      	b.n	800670a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800670e:	4b1e      	ldr	r3, [pc, #120]	@ (8006788 <xPortStartScheduler+0x138>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <xPortStartScheduler+0x138>)
 8006716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006718:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <xPortStartScheduler+0x138>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006720:	4a19      	ldr	r2, [pc, #100]	@ (8006788 <xPortStartScheduler+0x138>)
 8006722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800672c:	4b17      	ldr	r3, [pc, #92]	@ (800678c <xPortStartScheduler+0x13c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a16      	ldr	r2, [pc, #88]	@ (800678c <xPortStartScheduler+0x13c>)
 8006732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006738:	4b14      	ldr	r3, [pc, #80]	@ (800678c <xPortStartScheduler+0x13c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a13      	ldr	r2, [pc, #76]	@ (800678c <xPortStartScheduler+0x13c>)
 800673e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006744:	f000 f8da 	bl	80068fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006748:	4b11      	ldr	r3, [pc, #68]	@ (8006790 <xPortStartScheduler+0x140>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800674e:	f000 f8f9 	bl	8006944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006752:	4b10      	ldr	r3, [pc, #64]	@ (8006794 <xPortStartScheduler+0x144>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a0f      	ldr	r2, [pc, #60]	@ (8006794 <xPortStartScheduler+0x144>)
 8006758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800675c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800675e:	f7ff ff63 	bl	8006628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006762:	f7ff fd3b 	bl	80061dc <vTaskSwitchContext>
	prvTaskExitError();
 8006766:	f7ff ff19 	bl	800659c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	e000ed00 	.word	0xe000ed00
 8006778:	410fc271 	.word	0x410fc271
 800677c:	410fc270 	.word	0x410fc270
 8006780:	e000e400 	.word	0xe000e400
 8006784:	200005e0 	.word	0x200005e0
 8006788:	200005e4 	.word	0x200005e4
 800678c:	e000ed20 	.word	0xe000ed20
 8006790:	2000000c 	.word	0x2000000c
 8006794:	e000ef34 	.word	0xe000ef34

08006798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067b2:	4b10      	ldr	r3, [pc, #64]	@ (80067f4 <vPortEnterCritical+0x5c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	4a0e      	ldr	r2, [pc, #56]	@ (80067f4 <vPortEnterCritical+0x5c>)
 80067ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067bc:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <vPortEnterCritical+0x5c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d110      	bne.n	80067e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067c4:	4b0c      	ldr	r3, [pc, #48]	@ (80067f8 <vPortEnterCritical+0x60>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	603b      	str	r3, [r7, #0]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <vPortEnterCritical+0x4a>
	}
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	2000000c 	.word	0x2000000c
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006802:	4b12      	ldr	r3, [pc, #72]	@ (800684c <vPortExitCritical+0x50>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <vPortExitCritical+0x26>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	607b      	str	r3, [r7, #4]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006822:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <vPortExitCritical+0x50>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3b01      	subs	r3, #1
 8006828:	4a08      	ldr	r2, [pc, #32]	@ (800684c <vPortExitCritical+0x50>)
 800682a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800682c:	4b07      	ldr	r3, [pc, #28]	@ (800684c <vPortExitCritical+0x50>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <vPortExitCritical+0x44>
 8006834:	2300      	movs	r3, #0
 8006836:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800683e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	2000000c 	.word	0x2000000c

08006850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006850:	f3ef 8009 	mrs	r0, PSP
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <pxCurrentTCBConst>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f01e 0f10 	tst.w	lr, #16
 8006860:	bf08      	it	eq
 8006862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686a:	6010      	str	r0, [r2, #0]
 800686c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006874:	f380 8811 	msr	BASEPRI, r0
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f7ff fcac 	bl	80061dc <vTaskSwitchContext>
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f380 8811 	msr	BASEPRI, r0
 800688c:	bc09      	pop	{r0, r3}
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	6808      	ldr	r0, [r1, #0]
 8006892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006896:	f01e 0f10 	tst.w	lr, #16
 800689a:	bf08      	it	eq
 800689c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068a0:	f380 8809 	msr	PSP, r0
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst>:
 80068b0:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
}
 80068d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068d2:	f7ff fbc5 	bl	8006060 <xTaskIncrementTick>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068dc:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <SysTick_Handler+0x40>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	2300      	movs	r3, #0
 80068e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f383 8811 	msr	BASEPRI, r3
}
 80068ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006900:	4b0b      	ldr	r3, [pc, #44]	@ (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006906:	4b0b      	ldr	r3, [pc, #44]	@ (8006934 <vPortSetupTimerInterrupt+0x38>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800690c:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <vPortSetupTimerInterrupt+0x3c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0a      	ldr	r2, [pc, #40]	@ (800693c <vPortSetupTimerInterrupt+0x40>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	4a09      	ldr	r2, [pc, #36]	@ (8006940 <vPortSetupTimerInterrupt+0x44>)
 800691a:	3b01      	subs	r3, #1
 800691c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800691e:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006920:	2207      	movs	r2, #7
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	e000e010 	.word	0xe000e010
 8006934:	e000e018 	.word	0xe000e018
 8006938:	20000000 	.word	0x20000000
 800693c:	10624dd3 	.word	0x10624dd3
 8006940:	e000e014 	.word	0xe000e014

08006944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006954 <vPortEnableVFP+0x10>
 8006948:	6801      	ldr	r1, [r0, #0]
 800694a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800694e:	6001      	str	r1, [r0, #0]
 8006950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006952:	bf00      	nop
 8006954:	e000ed88 	.word	0xe000ed88

08006958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	@ 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006964:	f7ff fad0 	bl	8005f08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006968:	4b5a      	ldr	r3, [pc, #360]	@ (8006ad4 <pvPortMalloc+0x17c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006970:	f000 f916 	bl	8006ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006974:	4b58      	ldr	r3, [pc, #352]	@ (8006ad8 <pvPortMalloc+0x180>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8090 	bne.w	8006aa2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01e      	beq.n	80069c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006988:	2208      	movs	r2, #8
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d015      	beq.n	80069c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f023 0307 	bic.w	r3, r3, #7
 80069a0:	3308      	adds	r3, #8
 80069a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <pvPortMalloc+0x6e>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	617b      	str	r3, [r7, #20]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d06a      	beq.n	8006aa2 <pvPortMalloc+0x14a>
 80069cc:	4b43      	ldr	r3, [pc, #268]	@ (8006adc <pvPortMalloc+0x184>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d865      	bhi.n	8006aa2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069d6:	4b42      	ldr	r3, [pc, #264]	@ (8006ae0 <pvPortMalloc+0x188>)
 80069d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069da:	4b41      	ldr	r3, [pc, #260]	@ (8006ae0 <pvPortMalloc+0x188>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e0:	e004      	b.n	80069ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d903      	bls.n	80069fe <pvPortMalloc+0xa6>
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f1      	bne.n	80069e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069fe:	4b35      	ldr	r3, [pc, #212]	@ (8006ad4 <pvPortMalloc+0x17c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d04c      	beq.n	8006aa2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	4413      	add	r3, r2
 8006a10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	1ad2      	subs	r2, r2, r3
 8006a22:	2308      	movs	r3, #8
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d920      	bls.n	8006a6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <pvPortMalloc+0xfc>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	613b      	str	r3, [r7, #16]
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a66:	69b8      	ldr	r0, [r7, #24]
 8006a68:	f000 f8fc 	bl	8006c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006adc <pvPortMalloc+0x184>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	4a19      	ldr	r2, [pc, #100]	@ (8006adc <pvPortMalloc+0x184>)
 8006a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a7a:	4b18      	ldr	r3, [pc, #96]	@ (8006adc <pvPortMalloc+0x184>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b19      	ldr	r3, [pc, #100]	@ (8006ae4 <pvPortMalloc+0x18c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d203      	bcs.n	8006a8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a86:	4b15      	ldr	r3, [pc, #84]	@ (8006adc <pvPortMalloc+0x184>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ae4 <pvPortMalloc+0x18c>)
 8006a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <pvPortMalloc+0x180>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006aa2:	f7ff fa3f 	bl	8005f24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <pvPortMalloc+0x170>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	60fb      	str	r3, [r7, #12]
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	e7fd      	b.n	8006ac4 <pvPortMalloc+0x16c>
	return pvReturn;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3728      	adds	r7, #40	@ 0x28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200011f0 	.word	0x200011f0
 8006ad8:	200011fc 	.word	0x200011fc
 8006adc:	200011f4 	.word	0x200011f4
 8006ae0:	200011e8 	.word	0x200011e8
 8006ae4:	200011f8 	.word	0x200011f8

08006ae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d04a      	beq.n	8006b90 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006afa:	2308      	movs	r3, #8
 8006afc:	425b      	negs	r3, r3
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	4b22      	ldr	r3, [pc, #136]	@ (8006b98 <vPortFree+0xb0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10b      	bne.n	8006b2e <vPortFree+0x46>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60fb      	str	r3, [r7, #12]
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	e7fd      	b.n	8006b2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00b      	beq.n	8006b4e <vPortFree+0x66>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60bb      	str	r3, [r7, #8]
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	4b11      	ldr	r3, [pc, #68]	@ (8006b98 <vPortFree+0xb0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d019      	beq.n	8006b90 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d115      	bne.n	8006b90 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	4b0b      	ldr	r3, [pc, #44]	@ (8006b98 <vPortFree+0xb0>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	401a      	ands	r2, r3
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b74:	f7ff f9c8 	bl	8005f08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <vPortFree+0xb4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4413      	add	r3, r2
 8006b82:	4a06      	ldr	r2, [pc, #24]	@ (8006b9c <vPortFree+0xb4>)
 8006b84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b86:	6938      	ldr	r0, [r7, #16]
 8006b88:	f000 f86c 	bl	8006c64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b8c:	f7ff f9ca 	bl	8005f24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b90:	bf00      	nop
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	200011fc 	.word	0x200011fc
 8006b9c:	200011f4 	.word	0x200011f4

08006ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ba6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bac:	4b27      	ldr	r3, [pc, #156]	@ (8006c4c <prvHeapInit+0xac>)
 8006bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00c      	beq.n	8006bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3307      	adds	r3, #7
 8006bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <prvHeapInit+0xac>)
 8006bd0:	4413      	add	r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <prvHeapInit+0xb0>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bde:	4b1c      	ldr	r3, [pc, #112]	@ (8006c50 <prvHeapInit+0xb0>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	4413      	add	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bec:	2208      	movs	r2, #8
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0307 	bic.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a15      	ldr	r2, [pc, #84]	@ (8006c54 <prvHeapInit+0xb4>)
 8006c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c02:	4b14      	ldr	r3, [pc, #80]	@ (8006c54 <prvHeapInit+0xb4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c0a:	4b12      	ldr	r3, [pc, #72]	@ (8006c54 <prvHeapInit+0xb4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c20:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <prvHeapInit+0xb4>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c58 <prvHeapInit+0xb8>)
 8006c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	4a09      	ldr	r2, [pc, #36]	@ (8006c5c <prvHeapInit+0xbc>)
 8006c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c38:	4b09      	ldr	r3, [pc, #36]	@ (8006c60 <prvHeapInit+0xc0>)
 8006c3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c3e:	601a      	str	r2, [r3, #0]
}
 8006c40:	bf00      	nop
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	200005e8 	.word	0x200005e8
 8006c50:	200011e8 	.word	0x200011e8
 8006c54:	200011f0 	.word	0x200011f0
 8006c58:	200011f8 	.word	0x200011f8
 8006c5c:	200011f4 	.word	0x200011f4
 8006c60:	200011fc 	.word	0x200011fc

08006c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c6c:	4b28      	ldr	r3, [pc, #160]	@ (8006d10 <prvInsertBlockIntoFreeList+0xac>)
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	e002      	b.n	8006c78 <prvInsertBlockIntoFreeList+0x14>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d8f7      	bhi.n	8006c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d108      	bne.n	8006ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d118      	bne.n	8006cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b15      	ldr	r3, [pc, #84]	@ (8006d14 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d00d      	beq.n	8006ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	e008      	b.n	8006cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d14 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e003      	b.n	8006cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d002      	beq.n	8006d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d02:	bf00      	nop
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	200011e8 	.word	0x200011e8
 8006d14:	200011f0 	.word	0x200011f0

08006d18 <adc_init>:

uint32_t adc_raw_data_1[TOTAL_ADC_CHANNELS];
uint16_t data_1;

error_t adc_init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
	 HAL_ADC_Start(&hadc1);
 8006d1c:	4802      	ldr	r0, [pc, #8]	@ (8006d28 <adc_init+0x10>)
 8006d1e:	f7fa ff5d 	bl	8001bdc <HAL_ADC_Start>
	 return ER_Success;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200003cc 	.word	0x200003cc

08006d2c <adc_conversion_1>:

error_t adc_conversion_1(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
	error_t local_error = ER_Success;
 8006d32:	2300      	movs	r3, #0
 8006d34:	83fb      	strh	r3, [r7, #30]
	uint8_t i =0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	777b      	strb	r3, [r7, #29]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	ADC_ChannelConfTypeDef sConfig = {0};
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	611a      	str	r2, [r3, #16]
 8006d48:	615a      	str	r2, [r3, #20]
	sConfig.Rank = 1;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8006d4e:	2305      	movs	r3, #5
 8006d50:	60bb      	str	r3, [r7, #8]

	for(i=0;i<TOTAL_ADC_CHANNELS;i++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	777b      	strb	r3, [r7, #29]
 8006d56:	e058      	b.n	8006e0a <adc_conversion_1+0xde>
	   {
		sConfig.Channel = adc_channels_1[i];
 8006d58:	7f7b      	ldrb	r3, [r7, #29]
 8006d5a:	4a30      	ldr	r2, [pc, #192]	@ (8006e1c <adc_conversion_1+0xf0>)
 8006d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d60:	603b      	str	r3, [r7, #0]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d62:	463b      	mov	r3, r7
 8006d64:	4619      	mov	r1, r3
 8006d66:	482e      	ldr	r0, [pc, #184]	@ (8006e20 <adc_conversion_1+0xf4>)
 8006d68:	f7fb f994 	bl	8002094 <HAL_ADC_ConfigChannel>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <adc_conversion_1+0x4e>
		{
//			Error_Handler();
			local_error |= ER_Fail;
 8006d72:	8bfb      	ldrh	r3, [r7, #30]
 8006d74:	f043 0301 	orr.w	r3, r3, #1
 8006d78:	83fb      	strh	r3, [r7, #30]
		}
		 for (int j = 0; j < ADC_SAMPLES; j++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	e021      	b.n	8006dc4 <adc_conversion_1+0x98>
		 {
			HAL_ADC_Start(&hadc1);
 8006d80:	4827      	ldr	r0, [pc, #156]	@ (8006e20 <adc_conversion_1+0xf4>)
 8006d82:	f7fa ff2b 	bl	8001bdc <HAL_ADC_Start>
			data_1 = HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT_MSEC);
 8006d86:	210a      	movs	r1, #10
 8006d88:	4825      	ldr	r0, [pc, #148]	@ (8006e20 <adc_conversion_1+0xf4>)
 8006d8a:	f7fb f873 	bl	8001e74 <HAL_ADC_PollForConversion>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	461a      	mov	r2, r3
 8006d92:	4b24      	ldr	r3, [pc, #144]	@ (8006e24 <adc_conversion_1+0xf8>)
 8006d94:	801a      	strh	r2, [r3, #0]
			if (data_1 == 0)
 8006d96:	4b23      	ldr	r3, [pc, #140]	@ (8006e24 <adc_conversion_1+0xf8>)
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10c      	bne.n	8006db8 <adc_conversion_1+0x8c>
			{
				adc_raw_data_1[i] += HAL_ADC_GetValue(&hadc1);
 8006d9e:	4820      	ldr	r0, [pc, #128]	@ (8006e20 <adc_conversion_1+0xf4>)
 8006da0:	f7fb f96a 	bl	8002078 <HAL_ADC_GetValue>
 8006da4:	4601      	mov	r1, r0
 8006da6:	7f7b      	ldrb	r3, [r7, #29]
 8006da8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e28 <adc_conversion_1+0xfc>)
 8006daa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006dae:	7f7b      	ldrb	r3, [r7, #29]
 8006db0:	440a      	add	r2, r1
 8006db2:	491d      	ldr	r1, [pc, #116]	@ (8006e28 <adc_conversion_1+0xfc>)
 8006db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//				HAL_Delay(1);
			}
			HAL_ADC_Stop(&hadc1);
 8006db8:	4819      	ldr	r0, [pc, #100]	@ (8006e20 <adc_conversion_1+0xf4>)
 8006dba:	f7fb f825 	bl	8001e08 <HAL_ADC_Stop>
		 for (int j = 0; j < ADC_SAMPLES; j++)
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006dca:	dbd9      	blt.n	8006d80 <adc_conversion_1+0x54>
		 }
			 adc_raw_data_1[i] = adc_raw_data_1[i] / ADC_SAMPLES;
 8006dcc:	7f7b      	ldrb	r3, [r7, #29]
 8006dce:	4a16      	ldr	r2, [pc, #88]	@ (8006e28 <adc_conversion_1+0xfc>)
 8006dd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006dd4:	7f7b      	ldrb	r3, [r7, #29]
 8006dd6:	4915      	ldr	r1, [pc, #84]	@ (8006e2c <adc_conversion_1+0x100>)
 8006dd8:	fba1 1202 	umull	r1, r2, r1, r2
 8006ddc:	0952      	lsrs	r2, r2, #5
 8006dde:	4912      	ldr	r1, [pc, #72]	@ (8006e28 <adc_conversion_1+0xfc>)
 8006de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			/************ANALOG_VALUES TO CAN  ***************/
			 can_data_adc_low_volt_1 = adc_raw_data_1[6] ;
 8006de4:	4b10      	ldr	r3, [pc, #64]	@ (8006e28 <adc_conversion_1+0xfc>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	4a11      	ldr	r2, [pc, #68]	@ (8006e30 <adc_conversion_1+0x104>)
 8006dea:	6013      	str	r3, [r2, #0]
			 can_data_adc_low_volt_2 = adc_raw_data_1[7] ;
 8006dec:	4b0e      	ldr	r3, [pc, #56]	@ (8006e28 <adc_conversion_1+0xfc>)
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	4a10      	ldr	r2, [pc, #64]	@ (8006e34 <adc_conversion_1+0x108>)
 8006df2:	6013      	str	r3, [r2, #0]
			 can_data_adc_low_volt_3 = adc_raw_data_1[8] ;
 8006df4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e28 <adc_conversion_1+0xfc>)
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	4a0f      	ldr	r2, [pc, #60]	@ (8006e38 <adc_conversion_1+0x10c>)
 8006dfa:	6013      	str	r3, [r2, #0]
			 can_data_adc_low_volt_4 = adc_raw_data_1[9] ;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <adc_conversion_1+0xfc>)
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	4a0e      	ldr	r2, [pc, #56]	@ (8006e3c <adc_conversion_1+0x110>)
 8006e02:	6013      	str	r3, [r2, #0]
	for(i=0;i<TOTAL_ADC_CHANNELS;i++)
 8006e04:	7f7b      	ldrb	r3, [r7, #29]
 8006e06:	3301      	adds	r3, #1
 8006e08:	777b      	strb	r3, [r7, #29]
 8006e0a:	7f7b      	ldrb	r3, [r7, #29]
 8006e0c:	2b09      	cmp	r3, #9
 8006e0e:	d9a3      	bls.n	8006d58 <adc_conversion_1+0x2c>
			}

	return local_error;
 8006e10:	8bfb      	ldrh	r3, [r7, #30]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3720      	adds	r7, #32
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	080096e4 	.word	0x080096e4
 8006e20:	200003cc 	.word	0x200003cc
 8006e24:	20001228 	.word	0x20001228
 8006e28:	20001200 	.word	0x20001200
 8006e2c:	10624dd3 	.word	0x10624dd3
 8006e30:	2000122c 	.word	0x2000122c
 8006e34:	20001230 	.word	0x20001230
 8006e38:	20001234 	.word	0x20001234
 8006e3c:	20001238 	.word	0x20001238

08006e40 <can_main_init>:
//    xSemaphoreGiveFromISR(can_receive_semaphore,pdFALSE);
}
#endif

error_t can_main_init(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
	error_t local_error = ER_Success;
 8006e46:	2300      	movs	r3, #0
 8006e48:	80fb      	strh	r3, [r7, #6]

	#ifdef CAN_1_START
	HAL_CAN_MspInit(&hcan);
 8006e4a:	4808      	ldr	r0, [pc, #32]	@ (8006e6c <can_main_init+0x2c>)
 8006e4c:	f7fa fb78 	bl	8001540 <HAL_CAN_MspInit>
	HAL_CAN_Init(&hcan);
 8006e50:	4806      	ldr	r0, [pc, #24]	@ (8006e6c <can_main_init+0x2c>)
 8006e52:	f7fb fe7b 	bl	8002b4c <HAL_CAN_Init>
	HAL_CAN_Start(&hcan);
 8006e56:	4805      	ldr	r0, [pc, #20]	@ (8006e6c <can_main_init+0x2c>)
 8006e58:	f7fc f83d 	bl	8002ed6 <HAL_CAN_Start>
	can_1_init();
 8006e5c:	f000 f808 	bl	8006e70 <can_1_init>
	#ifdef CAN_3_START
	HAL_CAN_MspInit(&hcan3);
	HAL_CAN_Start(&hcan3);
	#endif

    return local_error;
 8006e60:	88fb      	ldrh	r3, [r7, #6]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000041c 	.word	0x2000041c

08006e70 <can_1_init>:

error_t can_1_init(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08c      	sub	sp, #48	@ 0x30
 8006e74:	af00      	add	r7, sp, #0
	error_t local_error = ER_Fail;
 8006e76:	2301      	movs	r3, #1
 8006e78:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	CAN_FilterTypeDef canfilterconfig;

	#ifdef CAN_1_FIFO_0
	  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
	  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8006e7e:	230a      	movs	r3, #10
 8006e80:	61bb      	str	r3, [r7, #24]
	  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
	  canfilterconfig.FilterIdHigh = 0x001<<5;
 8006e86:	2320      	movs	r3, #32
 8006e88:	607b      	str	r3, [r7, #4]
	  canfilterconfig.FilterIdLow = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]
	  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 8006e8e:	2320      	movs	r3, #32
 8006e90:	60fb      	str	r3, [r7, #12]
	  canfilterconfig.FilterMaskIdLow = 0x0000;
 8006e92:	2300      	movs	r3, #0
 8006e94:	613b      	str	r3, [r7, #16]
	  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61fb      	str	r3, [r7, #28]
	  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	623b      	str	r3, [r7, #32]
	  canfilterconfig.SlaveStartFilterBank = 13;  // how many filters to assign to the CAN1 (master can)
 8006e9e:	230d      	movs	r3, #13
 8006ea0:	62bb      	str	r3, [r7, #40]	@ 0x28

		   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8006ea2:	1d3b      	adds	r3, r7, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4805      	ldr	r0, [pc, #20]	@ (8006ebc <can_1_init+0x4c>)
 8006ea8:	f7fb ff4b 	bl	8002d42 <HAL_CAN_ConfigFilter>
		local_error = ER_Success;
 8006eac:	2300      	movs	r3, #0
 8006eae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	#endif

	return local_error;
 8006eb0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3730      	adds	r7, #48	@ 0x30
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	2000041c 	.word	0x2000041c

08006ec0 <can_send_data>:
}



error_t can_send_data(dbc_messages_t message)
{
 8006ec0:	b590      	push	{r4, r7, lr}
 8006ec2:	b097      	sub	sp, #92	@ 0x5c
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
	  error_t local_error = ER_Success;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
      message_frame_t frame;
      message_tracker_t const * tracker;
      can_frame_wrapper_t buffer;
      uint8_t i = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	  HAL_CAN_Start(&hcan);
 8006ed6:	4836      	ldr	r0, [pc, #216]	@ (8006fb0 <can_send_data+0xf0>)
 8006ed8:	f7fb fffd 	bl	8002ed6 <HAL_CAN_Start>
      if(message > TOTAL_CAN_MESSAGES )
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d903      	bls.n	8006eea <can_send_data+0x2a>
      {
          #ifdef CAN_LOGS
          log_event("message not found in dbc.h");
          #endif
          local_error = ER_Out_of_range;
 8006ee2:	2320      	movs	r3, #32
 8006ee4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006ee8:	e05c      	b.n	8006fa4 <can_send_data+0xe4>
      }
      else
      {
          clear_data((uint8_t*)&frame,sizeof(frame));
 8006eea:	f107 0310 	add.w	r3, r7, #16
 8006eee:	2140      	movs	r1, #64	@ 0x40
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 f925 	bl	8007140 <clear_data>
          tracker = &can_tracker_array[message];
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	4a2e      	ldr	r2, [pc, #184]	@ (8006fb4 <can_send_data+0xf4>)
 8006efc:	4413      	add	r3, r2
 8006efe:	653b      	str	r3, [r7, #80]	@ 0x50
          frame.msg_id = tracker->msg_id;
 8006f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	613b      	str	r3, [r7, #16]
          buffer.port = tracker->port;
 8006f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	60bb      	str	r3, [r7, #8]

          frame.tx_header.DLC = CAN_DEFAULT_DLC;
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
          if(frame.msg_id <= CAN_STANDARD_FRAME_MAX_ID)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f16:	d204      	bcs.n	8006f22 <can_send_data+0x62>
          {
        	  frame.tx_header.IDE = CAN_ID_STD;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	643b      	str	r3, [r7, #64]	@ 0x40
              frame.tx_header.StdId = frame.msg_id;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f20:	e003      	b.n	8006f2a <can_send_data+0x6a>
          }
          else
          {
        	  frame.tx_header.IDE = CAN_ID_EXT;
 8006f22:	2304      	movs	r3, #4
 8006f24:	643b      	str	r3, [r7, #64]	@ 0x40
              frame.tx_header.ExtId = frame.msg_id;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          for(i=0;i<tracker->signal_count;i++)
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8006f30:	e024      	b.n	8006f7c <can_send_data+0xbc>
          {
              local_error |= message_packer( &frame,
                                             (signal_attributes_t*)&dbc_signal_attributes[(tracker->signal_offset)+i],
 8006f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f34:	88db      	ldrh	r3, [r3, #6]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006f3c:	441a      	add	r2, r3
              local_error |= message_packer( &frame,
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4413      	add	r3, r2
 8006f44:	4a1c      	ldr	r2, [pc, #112]	@ (8006fb8 <can_send_data+0xf8>)
 8006f46:	1899      	adds	r1, r3, r2
                                             (uint32_t*)can_data_pointer[(tracker->signal_offset)+i]);
 8006f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f4a:	88db      	ldrh	r3, [r3, #6]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006f52:	4413      	add	r3, r2
 8006f54:	4a19      	ldr	r2, [pc, #100]	@ (8006fbc <can_send_data+0xfc>)
 8006f56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
              local_error |= message_packer( &frame,
 8006f5a:	f107 0310 	add.w	r3, r7, #16
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fbf8 	bl	8007754 <message_packer>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
          for(i=0;i<tracker->signal_count;i++)
 8006f72:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8006f76:	3301      	adds	r3, #1
 8006f78:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f7e:	791b      	ldrb	r3, [r3, #4]
 8006f80:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d3d4      	bcc.n	8006f32 <can_send_data+0x72>
          }

          HAL_CAN_AddTxMessage(buffer.port, &frame.tx_header, frame.data, &buffer.mailbox); /* open - verify frame.data for pointer error */
 8006f88:	68b8      	ldr	r0, [r7, #8]
 8006f8a:	f107 0308 	add.w	r3, r7, #8
 8006f8e:	1d1c      	adds	r4, r3, #4
 8006f90:	f107 0310 	add.w	r3, r7, #16
 8006f94:	1d1a      	adds	r2, r3, #4
 8006f96:	f107 0310 	add.w	r3, r7, #16
 8006f9a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	f7fb ffdd 	bl	8002f5e <HAL_CAN_AddTxMessage>

      }
      return local_error;
 8006fa4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	375c      	adds	r7, #92	@ 0x5c
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd90      	pop	{r4, r7, pc}
 8006fb0:	2000041c 	.word	0x2000041c
 8006fb4:	08009c7c 	.word	0x08009c7c
 8006fb8:	080098b8 	.word	0x080098b8
 8006fbc:	0800970c 	.word	0x0800970c

08006fc0 <can_receive_processing>:

error_t can_receive_processing(message_frame_t* frame)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	uint16_t i=0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	81fb      	strh	r3, [r7, #14]
	error_t local_error = ER_Success;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	81bb      	strh	r3, [r7, #12]
	message_tracker_t const * tracker; /* open - check for data corruption */


	if(frame->rx_header.ExtId)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d010      	beq.n	8006ffa <can_receive_processing+0x3a>
	{
		frame->msg_id = frame->rx_header.ExtId;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	601a      	str	r2, [r3, #0]
		local_error |= hashmap_query(frame,&tracker,can_hashmap);
 8006fe0:	f107 0308 	add.w	r3, r7, #8
 8006fe4:	4a24      	ldr	r2, [pc, #144]	@ (8007078 <can_receive_processing+0xb8>)
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f99d 	bl	8007328 <hashmap_query>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	89bb      	ldrh	r3, [r7, #12]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	81bb      	strh	r3, [r7, #12]
 8006ff8:	e00f      	b.n	800701a <can_receive_processing+0x5a>
	}
	else
	{
		frame->msg_id = frame->rx_header.StdId;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	601a      	str	r2, [r3, #0]
		local_error |= hashmap_query(frame,&tracker,can_hashmap);
 8007002:	f107 0308 	add.w	r3, r7, #8
 8007006:	4a1c      	ldr	r2, [pc, #112]	@ (8007078 <can_receive_processing+0xb8>)
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f98c 	bl	8007328 <hashmap_query>
 8007010:	4603      	mov	r3, r0
 8007012:	461a      	mov	r2, r3
 8007014:	89bb      	ldrh	r3, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	81bb      	strh	r3, [r7, #12]
	}

	if(local_error == ER_Success)
 800701a:	89bb      	ldrh	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d126      	bne.n	800706e <can_receive_processing+0xae>
	{
		 for(i=0;i<tracker->signal_count;i++)
 8007020:	2300      	movs	r3, #0
 8007022:	81fb      	strh	r3, [r7, #14]
 8007024:	e01d      	b.n	8007062 <can_receive_processing+0xa2>
		{
			local_error |= message_unpacker( frame,
											 (signal_attributes_t*)&dbc_signal_attributes[(tracker->signal_offset)+i],
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	461a      	mov	r2, r3
 800702c:	89fb      	ldrh	r3, [r7, #14]
 800702e:	441a      	add	r2, r3
			local_error |= message_unpacker( frame,
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	4a11      	ldr	r2, [pc, #68]	@ (800707c <can_receive_processing+0xbc>)
 8007038:	1899      	adds	r1, r3, r2
											 (uint32_t*)can_data_pointer[(tracker->signal_offset)+i]);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	88db      	ldrh	r3, [r3, #6]
 800703e:	461a      	mov	r2, r3
 8007040:	89fb      	ldrh	r3, [r7, #14]
 8007042:	4413      	add	r3, r2
 8007044:	4a0e      	ldr	r2, [pc, #56]	@ (8007080 <can_receive_processing+0xc0>)
 8007046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			local_error |= message_unpacker( frame,
 800704a:	461a      	mov	r2, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f99b 	bl	8007388 <message_unpacker>
 8007052:	4603      	mov	r3, r0
 8007054:	461a      	mov	r2, r3
 8007056:	89bb      	ldrh	r3, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	81bb      	strh	r3, [r7, #12]
		 for(i=0;i<tracker->signal_count;i++)
 800705c:	89fb      	ldrh	r3, [r7, #14]
 800705e:	3301      	adds	r3, #1
 8007060:	81fb      	strh	r3, [r7, #14]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	791b      	ldrb	r3, [r3, #4]
 8007066:	461a      	mov	r2, r3
 8007068:	89fb      	ldrh	r3, [r7, #14]
 800706a:	4293      	cmp	r3, r2
 800706c:	d3db      	bcc.n	8007026 <can_receive_processing+0x66>


		}
	}

    return local_error;
 800706e:	89bb      	ldrh	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	200013d8 	.word	0x200013d8
 800707c:	080098b8 	.word	0x080098b8
 8007080:	0800970c 	.word	0x0800970c

08007084 <can_receive_data_can_1>:
extern message_frame_t frame;
error_t can_receive_data_can_1(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
	error_t local_error = ER_Success;
 800708a:	2300      	movs	r3, #0
 800708c:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction_counter = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	717b      	strb	r3, [r7, #5]
	clear_data((uint8_t*)&frame.data,8);
 8007092:	2108      	movs	r1, #8
 8007094:	4824      	ldr	r0, [pc, #144]	@ (8007128 <can_receive_data_can_1+0xa4>)
 8007096:	f000 f853 	bl	8007140 <clear_data>
	clear_data((uint8_t*)&frame.rx_header,sizeof(CAN_RxHeaderTypeDef));
 800709a:	211c      	movs	r1, #28
 800709c:	4823      	ldr	r0, [pc, #140]	@ (800712c <can_receive_data_can_1+0xa8>)
 800709e:	f000 f84f 	bl	8007140 <clear_data>
	message_tracker_t const * tracker;
	#ifdef CAN_1_FIFO_0
	transaction_counter = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	717b      	strb	r3, [r7, #5]
	if(	(HAL_CAN_GetRxFifoFillLevel(&hcan,CAN_RX_FIFO0))
 80070a6:	2100      	movs	r1, #0
 80070a8:	4821      	ldr	r0, [pc, #132]	@ (8007130 <can_receive_data_can_1+0xac>)
 80070aa:	f7fc f94a 	bl	8003342 <HAL_CAN_GetRxFifoFillLevel>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d026      	beq.n	8007102 <can_receive_data_can_1+0x7e>
			&&(transaction_counter < CAN_RX_TRANSACTION_THRESOHOLD))
 80070b4:	797b      	ldrb	r3, [r7, #5]
 80070b6:	2b63      	cmp	r3, #99	@ 0x63
 80070b8:	d823      	bhi.n	8007102 <can_receive_data_can_1+0x7e>
	{

		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &frame.rx_header, (uint8_t*)&frame.data);
 80070ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <can_receive_data_can_1+0xa4>)
 80070bc:	4a1b      	ldr	r2, [pc, #108]	@ (800712c <can_receive_data_can_1+0xa8>)
 80070be:	2100      	movs	r1, #0
 80070c0:	481b      	ldr	r0, [pc, #108]	@ (8007130 <can_receive_data_can_1+0xac>)
 80070c2:	f7fc f81c 	bl	80030fe <HAL_CAN_GetRxMessage>

		if((frame.rx_header.StdId == 1 )|| (frame.rx_header.StdId == 7 ))
 80070c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007134 <can_receive_data_can_1+0xb0>)
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d003      	beq.n	80070d6 <can_receive_data_can_1+0x52>
 80070ce:	4b19      	ldr	r3, [pc, #100]	@ (8007134 <can_receive_data_can_1+0xb0>)
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2b07      	cmp	r3, #7
 80070d4:	d112      	bne.n	80070fc <can_receive_data_can_1+0x78>
		{
		local_error |= hashmap_query(&frame,&tracker,can_hashmap);
 80070d6:	463b      	mov	r3, r7
 80070d8:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <can_receive_data_can_1+0xb4>)
 80070da:	4619      	mov	r1, r3
 80070dc:	4815      	ldr	r0, [pc, #84]	@ (8007134 <can_receive_data_can_1+0xb0>)
 80070de:	f000 f923 	bl	8007328 <hashmap_query>
 80070e2:	4603      	mov	r3, r0
 80070e4:	461a      	mov	r2, r3
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	80fb      	strh	r3, [r7, #6]
		local_error |= can_receive_processing(&frame);
 80070ec:	4811      	ldr	r0, [pc, #68]	@ (8007134 <can_receive_data_can_1+0xb0>)
 80070ee:	f7ff ff67 	bl	8006fc0 <can_receive_processing>
 80070f2:	4603      	mov	r3, r0
 80070f4:	461a      	mov	r2, r3
 80070f6:	88fb      	ldrh	r3, [r7, #6]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
		}
		transaction_counter++;
 80070fc:	797b      	ldrb	r3, [r7, #5]
 80070fe:	3301      	adds	r3, #1
 8007100:	717b      	strb	r3, [r7, #5]

	}
	#endif


		if(frame.msg_id == 7)
 8007102:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <can_receive_data_can_1+0xb0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b07      	cmp	r3, #7
 8007108:	d103      	bne.n	8007112 <can_receive_data_can_1+0x8e>
		{
			flag = 1;
 800710a:	4b0c      	ldr	r3, [pc, #48]	@ (800713c <can_receive_data_can_1+0xb8>)
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	e005      	b.n	800711e <can_receive_data_can_1+0x9a>

		}
		else
		{
			flag = 0;
 8007112:	4b0a      	ldr	r3, [pc, #40]	@ (800713c <can_receive_data_can_1+0xb8>)
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
			frame.msg_id = 0;
 8007118:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <can_receive_data_can_1+0xb0>)
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]

		}

return local_error;
 800711e:	88fb      	ldrh	r3, [r7, #6]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	2000144c 	.word	0x2000144c
 800712c:	20001454 	.word	0x20001454
 8007130:	2000041c 	.word	0x2000041c
 8007134:	20001448 	.word	0x20001448
 8007138:	200013d8 	.word	0x200013d8
 800713c:	2000143c 	.word	0x2000143c

08007140 <clear_data>:
 * @param		data to be cleared
 * @param		size of data to be cleared
 * @return		report error in case of failure
 */
error_t clear_data( uint8_t * data, uint32_t size)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
	error_t local_error = ER_Success;
 800714e:	2300      	movs	r3, #0
 8007150:	817b      	strh	r3, [r7, #10]
	for(i = 0 ; i < size; i++)
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	e00f      	b.n	8007178 <clear_data+0x38>
	{
		if( data + i == NULL)
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <clear_data+0x28>
		{
			local_error = ER_Fail;
 8007162:	2301      	movs	r3, #1
 8007164:	817b      	strh	r3, [r7, #10]
			break;
 8007166:	e00b      	b.n	8007180 <clear_data+0x40>
		}
		else
		{
			*(data + i) = 0x00;
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4413      	add	r3, r2
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]
	for(i = 0 ; i < size; i++)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3301      	adds	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d3eb      	bcc.n	8007158 <clear_data+0x18>
		}
	}
	return local_error;
 8007180:	897b      	ldrh	r3, [r7, #10]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
	...

08007190 <dbc_init>:
/**
* @brief    initialize the backend data with initial values from attributes
* @return   return error in case of failure
*/
error_t dbc_init(void)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
        uint16_t i = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	80fb      	strh	r3, [r7, #6]
        for(i=0;i<TOTAL_CAN_SIGNALS;i++)
 800719a:	2300      	movs	r3, #0
 800719c:	80fb      	strh	r3, [r7, #6]
 800719e:	e008      	b.n	80071b2 <dbc_init+0x22>
        {
                *can_data_pointer[i]=0;
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	4a09      	ldr	r2, [pc, #36]	@ (80071c8 <dbc_init+0x38>)
 80071a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
        for(i=0;i<TOTAL_CAN_SIGNALS;i++)
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	3301      	adds	r3, #1
 80071b0:	80fb      	strh	r3, [r7, #6]
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	2b6a      	cmp	r3, #106	@ 0x6a
 80071b6:	d9f3      	bls.n	80071a0 <dbc_init+0x10>
        }
        return ER_Success;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	08009cfc 	.word	0x08009cfc

080071cc <hashmap_data_allocate>:
 * @brief   allocate data for the hashmap nodes
 * @param   double pointer to store the pointer allocated
 * @return  report error in case of failure
*/
error_t hashmap_data_allocate(tracker_node_t** node_pointer,tracker_node_t* hashmap_data)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
    error_t local_error = ER_Success;
 80071d6:	2300      	movs	r3, #0
 80071d8:	81fb      	strh	r3, [r7, #14]
    static uint16_t memory_counter = 0;
    if(node_pointer == NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d102      	bne.n	80071e6 <hashmap_data_allocate+0x1a>
    {
        local_error = ER_Null;
 80071e0:	2302      	movs	r3, #2
 80071e2:	81fb      	strh	r3, [r7, #14]
 80071e4:	e013      	b.n	800720e <hashmap_data_allocate+0x42>
    }
    else if(memory_counter >= TOTAL_CAN_MESSAGES)
 80071e6:	4b0d      	ldr	r3, [pc, #52]	@ (800721c <hashmap_data_allocate+0x50>)
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	2b07      	cmp	r3, #7
 80071ec:	d902      	bls.n	80071f4 <hashmap_data_allocate+0x28>
    {
        local_error = ER_Fail;
 80071ee:	2301      	movs	r3, #1
 80071f0:	81fb      	strh	r3, [r7, #14]
 80071f2:	e00c      	b.n	800720e <hashmap_data_allocate+0x42>
    }
    else
    {
        *node_pointer = &hashmap_data[memory_counter];
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <hashmap_data_allocate+0x50>)
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	441a      	add	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
        memory_counter++;
 8007202:	4b06      	ldr	r3, [pc, #24]	@ (800721c <hashmap_data_allocate+0x50>)
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	4b04      	ldr	r3, [pc, #16]	@ (800721c <hashmap_data_allocate+0x50>)
 800720c:	801a      	strh	r2, [r3, #0]
    }
    return local_error;
 800720e:	89fb      	ldrh	r3, [r7, #14]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	20001438 	.word	0x20001438

08007220 <hashmap_builder>:
 * @brief   Build a hashmap for storing handler array nodes
 * @param   Handler array data set
 * @return  report error in case of failure
 */
error_t hashmap_builder(const message_tracker_t* array, tracker_node_t** hashmap, tracker_node_t* hashmap_data)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
    error_t local_error = ER_Success;
 800722c:	2300      	movs	r3, #0
 800722e:	83fb      	strh	r3, [r7, #30]
    uint32_t i = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	61bb      	str	r3, [r7, #24]
    uint16_t id = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	827b      	strh	r3, [r7, #18]
    uint16_t hash_id;
    tracker_node_t* node;

    for(i=0;i<TOTAL_CAN_MESSAGES;i++)
 8007238:	2300      	movs	r3, #0
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	e051      	b.n	80072e2 <hashmap_builder+0xc2>
    {
        id = array[i].msg_id;
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	827b      	strh	r3, [r7, #18]
        hash_id = id % HASHMAP_SIZE;
 800724a:	8a7b      	ldrh	r3, [r7, #18]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	823b      	strh	r3, [r7, #16]

        if(hashmap[hash_id]==NULL)
 8007252:	8a3b      	ldrh	r3, [r7, #16]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	4413      	add	r3, r2
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d116      	bne.n	800728e <hashmap_builder+0x6e>
        {
            #ifdef HASHMAP_LOGS
            log_hex("Creating node in hashmap at",hash_id);

            #endif
            local_error |= hashmap_data_allocate(&hashmap[hash_id],hashmap_data);
 8007260:	8a3b      	ldrh	r3, [r7, #16]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	4413      	add	r3, r2
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff ffae 	bl	80071cc <hashmap_data_allocate>
 8007270:	4603      	mov	r3, r0
 8007272:	461a      	mov	r2, r3
 8007274:	8bfb      	ldrh	r3, [r7, #30]
 8007276:	4313      	orrs	r3, r2
 8007278:	83fb      	strh	r3, [r7, #30]
            if(local_error == ER_Success)
 800727a:	8bfb      	ldrh	r3, [r7, #30]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d124      	bne.n	80072ca <hashmap_builder+0xaa>
            {
                node = hashmap[hash_id];
 8007280:	8a3b      	ldrh	r3, [r7, #16]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	4413      	add	r3, r2
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e01d      	b.n	80072ca <hashmap_builder+0xaa>
            }
        }
        else
        {
            node = hashmap[hash_id];
 800728e:	8a3b      	ldrh	r3, [r7, #16]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4413      	add	r3, r2
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	617b      	str	r3, [r7, #20]
            while(node -> next != NULL)
 800729a:	e002      	b.n	80072a2 <hashmap_builder+0x82>
            {
                node = node -> next;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	617b      	str	r3, [r7, #20]
            while(node -> next != NULL)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f8      	bne.n	800729c <hashmap_builder+0x7c>
            }
            local_error |= hashmap_data_allocate(&(node -> next),hashmap_data);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff ff8c 	bl	80071cc <hashmap_data_allocate>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	8bfb      	ldrh	r3, [r7, #30]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	83fb      	strh	r3, [r7, #30]
            if(local_error == ER_Success)
 80072be:	8bfb      	ldrh	r3, [r7, #30]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d102      	bne.n	80072ca <hashmap_builder+0xaa>
            {
                node = node -> next;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	617b      	str	r3, [r7, #20]
            }
        }

        if(local_error == ER_Success)
 80072ca:	8bfb      	ldrh	r3, [r7, #30]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <hashmap_builder+0xbc>
        {
            node -> tracker_data = &array[i];
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	441a      	add	r2, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	605a      	str	r2, [r3, #4]
    for(i=0;i<TOTAL_CAN_MESSAGES;i++)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	3301      	adds	r3, #1
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b07      	cmp	r3, #7
 80072e6:	d9aa      	bls.n	800723e <hashmap_builder+0x1e>
        }
    }
    return local_error;
 80072e8:	8bfb      	ldrh	r3, [r7, #30]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3720      	adds	r7, #32
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <hashmap_init>:
 *		store the handler function pointer that points to 
 *		static handler_array defined in dbc.h
 * @return	report error in case of failure
 */ 
error_t hashmap_init()
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
	error_t local_error = ER_Success;
 80072fa:	2300      	movs	r3, #0
 80072fc:	80fb      	strh	r3, [r7, #6]
	local_error |=  hashmap_builder(can_tracker_array,(tracker_node_t**)&can_hashmap,(tracker_node_t*)&can_hashmap_data);
 80072fe:	4a07      	ldr	r2, [pc, #28]	@ (800731c <hashmap_init+0x28>)
 8007300:	4907      	ldr	r1, [pc, #28]	@ (8007320 <hashmap_init+0x2c>)
 8007302:	4808      	ldr	r0, [pc, #32]	@ (8007324 <hashmap_init+0x30>)
 8007304:	f7ff ff8c 	bl	8007220 <hashmap_builder>
 8007308:	4603      	mov	r3, r0
 800730a:	461a      	mov	r2, r3
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	4313      	orrs	r3, r2
 8007310:	80fb      	strh	r3, [r7, #6]
	return local_error;
 8007312:	88fb      	ldrh	r3, [r7, #6]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	200013f8 	.word	0x200013f8
 8007320:	200013d8 	.word	0x200013d8
 8007324:	08009ea8 	.word	0x08009ea8

08007328 <hashmap_query>:
 * @param	frame of the can packet to be checked in hashmap
 * @param	handler data to store packer unpacker for given msg_id
 * @return	report error in case of failure
 */ 
error_t hashmap_query(message_frame_t* frame, message_tracker_t const **  handler_data, tracker_node_t** hashmap)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	@ 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
	error_t local_error = ER_Fail;
 8007334:	2301      	movs	r3, #1
 8007336:	83fb      	strh	r3, [r7, #30]
	uint16_t hash_id = frame->msg_id % HASHMAP_SIZE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	82fb      	strh	r3, [r7, #22]
	tracker_node_t* node = hashmap[hash_id];
 8007344:	8afb      	ldrh	r3, [r7, #22]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	4413      	add	r3, r2
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	61bb      	str	r3, [r7, #24]
    while(node != NULL)
 8007350:	e010      	b.n	8007374 <hashmap_query+0x4c>
    {
        if(frame->msg_id == node->tracker_data->msg_id)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d106      	bne.n	800736e <hashmap_query+0x46>
        {
            *handler_data = node->tracker_data;
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	601a      	str	r2, [r3, #0]
            local_error = ER_Success;
 8007368:	2300      	movs	r3, #0
 800736a:	83fb      	strh	r3, [r7, #30]
            #ifdef HASHMAP_LOGS
            log_hex("msg_id found in hashmap" ,frame->msg_id);

            #endif
            break;
 800736c:	e005      	b.n	800737a <hashmap_query+0x52>
        }
        node = node->next;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	61bb      	str	r3, [r7, #24]
    while(node != NULL)
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1eb      	bne.n	8007352 <hashmap_query+0x2a>
    }
	return local_error;
 800737a:	8bfb      	ldrh	r3, [r7, #30]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3724      	adds	r7, #36	@ 0x24
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <message_unpacker>:


error_t message_unpacker(   message_frame_t* frame,
                const signal_attributes_t* reference,
                volatile uint32_t* destination)
{
 8007388:	b480      	push	{r7}
 800738a:	b08d      	sub	sp, #52	@ 0x34
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
    error_t local_error = ER_Success;
 8007394:	2300      	movs	r3, #0
 8007396:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if((frame == NULL)||(reference == NULL)||(destination == NULL))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <message_unpacker+0x22>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <message_unpacker+0x22>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <message_unpacker+0x28>
    {
        local_error = ER_Null;
 80073aa:	2302      	movs	r3, #2
 80073ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80073ae:	e1ca      	b.n	8007746 <message_unpacker+0x3be>
        #endif
    }
    else
    {
	    float accumulator_float;
		uint32_t mask = 1;
 80073b0:	2301      	movs	r3, #1
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
		uint32_t accumulator = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
		int32_t accumulator_s32 = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
		uint32_t whole_data = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	623b      	str	r3, [r7, #32]
        int8_t index_pointer = reference->start / 8; /* pointer to the correct byte in the frame */
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	791b      	ldrb	r3, [r3, #4]
 80073c4:	08db      	lsrs	r3, r3, #3
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        uint8_t bits_pointer = reference->start % 8;  /* pointer to the correct bit in the byte pointed by index pointer */
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	791b      	ldrb	r3, [r3, #4]
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	    uint8_t byte_buffer = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	77fb      	strb	r3, [r7, #31]
	    uint8_t bits_copied = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	    uint8_t bits_to_be_copied = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	77bb      	strb	r3, [r7, #30]


        while((bits_copied < reference->cache->length)&&(index_pointer < BITS_IN_A_BYTE)) /* open - replace with CAN standard DLC */
 80073e6:	e06f      	b.n	80074c8 <message_unpacker+0x140>
        {
            bits_to_be_copied =  minimum_of( reference->cache->length - bits_copied, BITS_IN_A_BYTE - bits_pointer);
 80073e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073ec:	f1c3 0208 	rsb	r2, r3, #8
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073fe:	1acb      	subs	r3, r1, r3
 8007400:	4293      	cmp	r3, r2
 8007402:	bfa8      	it	ge
 8007404:	4613      	movge	r3, r2
 8007406:	77bb      	strb	r3, [r7, #30]
            #ifdef MESSAGE_SUPPORT_LOGS
            log_event("bits_copied:%d, reference->cache->length:%d, bits_to_be_copied:%d"
                    ,bits_copied ,reference->cache->length,bits_to_be_copied);

            #endif
            byte_buffer = frame->data[index_pointer];
 8007408:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	791b      	ldrb	r3, [r3, #4]
 8007412:	77fb      	strb	r3, [r7, #31]
            #ifdef MESSAGE_SUPPORT_LOGS
            log_event("raw: byte_buffer:0x%x, data[i]:0x%x"
                                ,byte_buffer,frame -> data[index_pointer]);

            #endif
            byte_buffer >>= bits_pointer;
 8007414:	7ffa      	ldrb	r2, [r7, #31]
 8007416:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800741a:	fa42 f303 	asr.w	r3, r2, r3
 800741e:	77fb      	strb	r3, [r7, #31]
            byte_buffer &= (ALL_F_8 >> ( BITS_IN_A_BYTE - bits_to_be_copied ));
 8007420:	7fbb      	ldrb	r3, [r7, #30]
 8007422:	f1c3 0308 	rsb	r3, r3, #8
 8007426:	22ff      	movs	r2, #255	@ 0xff
 8007428:	fa42 f303 	asr.w	r3, r2, r3
 800742c:	b25a      	sxtb	r2, r3
 800742e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007432:	4013      	ands	r3, r2
 8007434:	b25b      	sxtb	r3, r3
 8007436:	77fb      	strb	r3, [r7, #31]
            whole_data = byte_buffer;
 8007438:	7ffb      	ldrb	r3, [r7, #31]
 800743a:	623b      	str	r3, [r7, #32]
            accumulator |= (whole_data << bits_copied);
 800743c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007440:	6a3a      	ldr	r2, [r7, #32]
 8007442:	409a      	lsls	r2, r3
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]
            #ifdef MESSAGE_SUPPORT_LOGS
            log_event("byte_buffer:0x%x, data[i]:0x%x, accumulator:0x%08x"
                    ,byte_buffer,frame -> data[index_pointer], accumulator);
            #endif
            bits_copied += bits_to_be_copied;
 800744a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800744e:	7fbb      	ldrb	r3, [r7, #30]
 8007450:	4413      	add	r3, r2
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            bits_pointer = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

            if( reference->cache->format == Intel )
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007462:	7d9b      	ldrb	r3, [r3, #22]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d107      	bne.n	8007478 <message_unpacker+0xf0>
            {
                index_pointer++;
 8007468:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800746c:	b2db      	uxtb	r3, r3
 800746e:	3301      	adds	r3, #1
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007476:	e012      	b.n	800749e <message_unpacker+0x116>
            }
            else if( reference->cache->format == Motorola )
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800747e:	7d9b      	ldrb	r3, [r3, #22]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d107      	bne.n	8007494 <message_unpacker+0x10c>
            {
                index_pointer--;
 8007484:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007492:	e004      	b.n	800749e <message_unpacker+0x116>
            }
            else
            {
                local_error |= ER_Fail | ER_Mismatch ;
 8007494:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007496:	f043 0311 	orr.w	r3, r3, #17
 800749a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                break;
 800749c:	e020      	b.n	80074e0 <message_unpacker+0x158>
            }

            if((( index_pointer > BITS_IN_A_BYTE )||( index_pointer < ZERO )) && (bits_copied < reference->cache->length))
 800749e:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	dc03      	bgt.n	80074ae <message_unpacker+0x126>
 80074a6:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da0c      	bge.n	80074c8 <message_unpacker+0x140>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d204      	bcs.n	80074c8 <message_unpacker+0x140>
            {
                local_error |= ER_Fail | ER_Overflow ;
 80074be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80074c0:	f043 0309 	orr.w	r3, r3, #9
 80074c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                #ifdef MESSAGE_SUPPORT_LOGS
                log_event("Size Error while final unpacking data from data[]");
                #endif
                break;
 80074c6:	e00b      	b.n	80074e0 <message_unpacker+0x158>
        while((bits_copied < reference->cache->length)&&(index_pointer < BITS_IN_A_BYTE)) /* open - replace with CAN standard DLC */
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d203      	bcs.n	80074e0 <message_unpacker+0x158>
 80074d8:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80074dc:	2b07      	cmp	r3, #7
 80074de:	dd83      	ble.n	80073e8 <message_unpacker+0x60>
            }
        }

        if(local_error == ER_Success)
 80074e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f040 8129 	bne.w	800773a <message_unpacker+0x3b2>
        {
            if((reference->cache->sign == Signed_float)||(reference->cache->sign == Unsigned_float))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80074ee:	7d5b      	ldrb	r3, [r3, #21]
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d005      	beq.n	8007500 <message_unpacker+0x178>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80074fa:	7d5b      	ldrb	r3, [r3, #21]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d168      	bne.n	80075d2 <message_unpacker+0x24a>
            {
                #ifdef MESSAGE_SUPPORT_LOGS
                log_event("Data type Floating");
                #endif

                accumulator_s32 = *((int32_t*)&accumulator);
 8007500:	f107 0314 	add.w	r3, r7, #20
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	613b      	str	r3, [r7, #16]

                if((reference->cache->length != BITS_IN_UINT32)&&(reference->cache->sign == Signed_float))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b20      	cmp	r3, #32
 8007512:	d01f      	beq.n	8007554 <message_unpacker+0x1cc>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800751a:	7d5b      	ldrb	r3, [r3, #21]
 800751c:	2b03      	cmp	r3, #3
 800751e:	d119      	bne.n	8007554 <message_unpacker+0x1cc>
                {
                    mask = 0x1 << (reference->cache->length - 1);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	3b01      	subs	r3, #1
 800752a:	2201      	movs	r2, #1
 800752c:	fa02 f303 	lsl.w	r3, r2, r3
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
                    if( accumulator_s32 & mask)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	461a      	mov	r2, r3
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	4013      	ands	r3, r2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <message_unpacker+0x1cc>
                    {
                        accumulator_s32 |= (ALL_F_32 << reference->cache->length);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	4093      	lsls	r3, r2
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]
                #ifdef MESSAGE_SUPPORT_LOGS
                log_event("signed_pick:0x%lx",accumulator_s32);

                #endif

                accumulator_float = (accumulator_s32 * reference->cache->factor) + reference->cache->offset;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007564:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007568:	ee07 3a10 	vmov	s14, r3
 800756c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007576:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800757a:	ee07 3a10 	vmov	s14, r3
 800757e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007582:	edc7 7a06 	vstr	s15, [r7, #24]

                #ifdef RANGE_CHECK
                if( (accumulator_float < reference->cache->minimum)||(accumulator_float > reference->cache->maximum))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800758c:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8007590:	edd7 7a06 	vldr	s15, [r7, #24]
 8007594:	ee07 3a10 	vmov	s14, r3
 8007598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800759c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a0:	dc0d      	bgt.n	80075be <message_unpacker+0x236>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80075a8:	f8d3 3011 	ldr.w	r3, [r3, #17]
 80075ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80075b0:	ee07 3a10 	vmov	s14, r3
 80075b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075bc:	d504      	bpl.n	80075c8 <message_unpacker+0x240>
                {
                    local_error |= ER_Out_of_range;
 80075be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                if( (accumulator_float < reference->cache->minimum)||(accumulator_float > reference->cache->maximum))
 80075c6:	e0b8      	b.n	800773a <message_unpacker+0x3b2>

                    #endif
                }
                else
                {
                    accumulator = *((uint32_t*)&accumulator_float);
 80075c8:	f107 0318 	add.w	r3, r7, #24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	617b      	str	r3, [r7, #20]
                if( (accumulator_float < reference->cache->minimum)||(accumulator_float > reference->cache->maximum))
 80075d0:	e0b3      	b.n	800773a <message_unpacker+0x3b2>
                }
                #else
                accumulator = *((uint32_t*)&accumulator_float);
                #endif
            }
            else if(reference->cache->sign == Signed)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80075d8:	7d5b      	ldrb	r3, [r3, #21]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d16b      	bne.n	80076b6 <message_unpacker+0x32e>
            {
                #ifdef MESSAGE_SUPPORT_LOGS
                log_event("Data type Signed");
                #endif

                accumulator_s32 = *((int32_t*)&accumulator);
 80075de:	f107 0314 	add.w	r3, r7, #20
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	613b      	str	r3, [r7, #16]
                if(reference->cache->length != BITS_IN_UINT32)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d019      	beq.n	8007626 <message_unpacker+0x29e>
                {
                    mask = 0x1 << (reference->cache->length - 1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	2201      	movs	r2, #1
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
                    if( accumulator_s32 & mask)
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	461a      	mov	r2, r3
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <message_unpacker+0x29e>
                    {
                        accumulator_s32 |= (ALL_F_32 << reference->cache->length);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	f04f 33ff 	mov.w	r3, #4294967295
 800761e:	4093      	lsls	r3, r2
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
                #ifdef MESSAGE_SUPPORT_LOGS
                log_event("signed_pick:0x%lx",accumulator_s32);

                #endif

                accumulator_s32 = (accumulator_s32 * reference->cache->factor) + reference->cache->offset;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007636:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800763a:	ee07 3a10 	vmov	s14, r3
 800763e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007648:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800764c:	ee07 3a10 	vmov	s14, r3
 8007650:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007658:	ee17 3a90 	vmov	r3, s15
 800765c:	613b      	str	r3, [r7, #16]

                #ifdef RANGE_CHECK
                if( ((float)accumulator_s32 < reference->cache->minimum)||((float)accumulator_s32 > reference->cache->maximum))
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800766e:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8007672:	ee07 3a10 	vmov	s14, r3
 8007676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800767a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767e:	d410      	bmi.n	80076a2 <message_unpacker+0x31a>
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007690:	f8d3 3011 	ldr.w	r3, [r3, #17]
 8007694:	ee07 3a10 	vmov	s14, r3
 8007698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800769c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a0:	dd04      	ble.n	80076ac <message_unpacker+0x324>
                {
                    local_error |= ER_Out_of_range;
 80076a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80076a4:	f043 0320 	orr.w	r3, r3, #32
 80076a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80076aa:	e046      	b.n	800773a <message_unpacker+0x3b2>

                    #endif
                }
                else
                {
                    accumulator = *((uint32_t*)&accumulator_s32);
 80076ac:	f107 0310 	add.w	r3, r7, #16
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	e041      	b.n	800773a <message_unpacker+0x3b2>
            {
                #ifdef MESSAGE_SUPPORT_LOGS
                log_event("Data type Unsigned");
                #endif

                accumulator = (accumulator * reference->cache->factor) + reference->cache->offset;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	ee07 3a90 	vmov	s15, r3
 80076bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80076c6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80076ca:	ee07 3a10 	vmov	s14, r3
 80076ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80076d8:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80076dc:	ee07 3a10 	vmov	s14, r3
 80076e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e8:	ee17 3a90 	vmov	r3, s15
 80076ec:	617b      	str	r3, [r7, #20]

                #ifdef RANGE_CHECK
                if( ((float)accumulator < reference->cache->minimum)||
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80076fe:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8007702:	ee07 3a10 	vmov	s14, r3
 8007706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770e:	d410      	bmi.n	8007732 <message_unpacker+0x3aa>
                    ((float)accumulator > reference->cache->maximum))
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007720:	f8d3 3011 	ldr.w	r3, [r3, #17]
                if( ((float)accumulator < reference->cache->minimum)||
 8007724:	ee07 3a10 	vmov	s14, r3
 8007728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	dd03      	ble.n	800773a <message_unpacker+0x3b2>
                {
                    local_error |= ER_Out_of_range;
 8007732:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007734:	f043 0320 	orr.w	r3, r3, #32
 8007738:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                #endif

            }
        }

        if(local_error == ER_Success)
 800773a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <message_unpacker+0x3be>
        {
            *destination = *((uint32_t*)&accumulator);
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
            ,frame->msg_id,destination->datatype,destination->data);

            #endif
        }
    }
    return local_error;
 8007746:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8007748:	4618      	mov	r0, r3
 800774a:	3734      	adds	r7, #52	@ 0x34
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <message_packer>:
 * @return  report error in case of failure
 */
error_t message_packer( message_frame_t* frame,
                const signal_attributes_t* reference,
                volatile uint32_t* source)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	@ 0x28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
    error_t local_error = ER_Success;
 8007760:	2300      	movs	r3, #0
 8007762:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if((frame == NULL)||(reference == NULL)||(source == NULL))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <message_packer+0x22>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <message_packer+0x22>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <message_packer+0x2c>
    {
        local_error |= ER_Null;
 8007776:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007778:	f043 0302 	orr.w	r3, r3, #2
 800777c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800777e:	e1e7      	b.n	8007b50 <message_packer+0x3fc>
        log_event("NULL error detected");
        #endif
    }
    else
    {
        uint32_t accumulator = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
        int32_t  accumulator_s32 = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]
        float accumulator_float = 0;
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
        int8_t index_pointer = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint8_t bits_pointer = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t mask = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	76fb      	strb	r3, [r7, #27]
        uint8_t byte_buffer = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	76bb      	strb	r3, [r7, #26]
        uint8_t bits_copied = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t bits_to_be_copied = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	767b      	strb	r3, [r7, #25]

        if((reference->cache->sign == Signed_float)||(reference->cache->sign == Unsigned_float))
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80077b2:	7d5b      	ldrb	r3, [r3, #21]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d005      	beq.n	80077c4 <message_packer+0x70>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80077be:	7d5b      	ldrb	r3, [r3, #21]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d171      	bne.n	80078a8 <message_packer+0x154>
        {
            #ifdef MESSAGE_SUPPORT_LOGS_2
            log_event("Data type Floating");
            #endif

            accumulator_float = *((float*)source);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	61fb      	str	r3, [r7, #28]
            log_event("accumulator_float, %f",accumulator_float);

            #endif

            #ifdef RANGE_CHECK
            if( (accumulator_float < reference->cache->minimum)||(accumulator_float > reference->cache->maximum))
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80077d0:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80077d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80077d8:	ee07 3a10 	vmov	s14, r3
 80077dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e4:	d40d      	bmi.n	8007802 <message_packer+0xae>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80077ec:	f8d3 3011 	ldr.w	r3, [r3, #17]
 80077f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80077f4:	ee07 3a10 	vmov	s14, r3
 80077f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007800:	dd04      	ble.n	800780c <message_packer+0xb8>
            {
                local_error |= ER_Out_of_range;
 8007802:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007804:	f043 0320 	orr.w	r3, r3, #32
 8007808:	84fb      	strh	r3, [r7, #38]	@ 0x26
            if( (accumulator_float < reference->cache->minimum)||(accumulator_float > reference->cache->maximum))
 800780a:	e0f4      	b.n	80079f6 <message_packer+0x2a2>
            else
            {
            #endif


                if(reference->cache->sign == Signed_float)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007812:	7d5b      	ldrb	r3, [r3, #21]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d12d      	bne.n	8007874 <message_packer+0x120>
                {
                    accumulator_s32 = ((float)(accumulator_float - reference->cache->offset )
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800781e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8007822:	edd7 7a07 	vldr	s15, [r7, #28]
 8007826:	ee07 3a10 	vmov	s14, r3
 800782a:	ee37 7ac7 	vsub.f32	s14, s15, s14
                        / reference->cache->factor);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007834:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eec7 7a27 	vdiv.f32	s15, s14, s15
                    accumulator_s32 = ((float)(accumulator_float - reference->cache->offset )
 8007840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007844:	ee17 3a90 	vmov	r3, s15
 8007848:	613b      	str	r3, [r7, #16]

                    #ifdef MESSAGE_SUPPORT_LOGS_2
                    log_event("accumulator_s32, 0x%lx",accumulator_s32);

                    #endif
                    if(accumulator_s32 < 0)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	da0c      	bge.n	800786a <message_packer+0x116>
                    {
                        accumulator_s32 &= ( ALL_F_32 >>
                            ( BITS_IN_UINT32 - reference->cache->length ));
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f1c3 0320 	rsb	r3, r3, #32
                        accumulator_s32 &= ( ALL_F_32 >>
 800785c:	f04f 32ff 	mov.w	r2, #4294967295
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4013      	ands	r3, r2
 8007868:	613b      	str	r3, [r7, #16]

                    }
                    accumulator = *((uint32_t*)&accumulator_s32);
 800786a:	f107 0310 	add.w	r3, r7, #16
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	617b      	str	r3, [r7, #20]
            if( (accumulator_float < reference->cache->minimum)||(accumulator_float > reference->cache->maximum))
 8007872:	e0c0      	b.n	80079f6 <message_packer+0x2a2>
                }
                else
                {
                    accumulator = ((float)(accumulator_float - reference->cache->offset )
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800787a:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800787e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007882:	ee07 3a10 	vmov	s14, r3
 8007886:	ee37 7ac7 	vsub.f32	s14, s15, s14
                            / reference->cache->factor);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007890:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007894:	ee07 3a90 	vmov	s15, r3
 8007898:	eec7 7a27 	vdiv.f32	s15, s14, s15
                    accumulator = ((float)(accumulator_float - reference->cache->offset )
 800789c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078a0:	ee17 3a90 	vmov	r3, s15
 80078a4:	617b      	str	r3, [r7, #20]
            if( (accumulator_float < reference->cache->minimum)||(accumulator_float > reference->cache->maximum))
 80078a6:	e0a6      	b.n	80079f6 <message_packer+0x2a2>
                }
            #ifdef RANGE_CHECK
            }
            #endif
        }
        else if(reference->cache->sign == Signed)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80078ae:	7d5b      	ldrb	r3, [r3, #21]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d15a      	bne.n	800796a <message_packer+0x216>
        {
            #ifdef MESSAGE_SUPPORT_LOGS_2
            log_event("Data type Signed");
            #endif
            memcpy(&accumulator_s32,(const void*)source,SIZE_OF_UINT32);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	613b      	str	r3, [r7, #16]
            log_event("accumulator_s32, %d",accumulator_s32);

            #endif

            #ifdef RANGE_CHECK
            if( ((float)accumulator_s32 < reference->cache->minimum)||((float)accumulator_s32 > reference->cache->maximum))
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80078ca:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80078ce:	ee07 3a10 	vmov	s14, r3
 80078d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078da:	d410      	bmi.n	80078fe <message_packer+0x1aa>
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80078ec:	f8d3 3011 	ldr.w	r3, [r3, #17]
 80078f0:	ee07 3a10 	vmov	s14, r3
 80078f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fc:	dd04      	ble.n	8007908 <message_packer+0x1b4>
            {
                local_error |= ER_Out_of_range;
 80078fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007900:	f043 0320 	orr.w	r3, r3, #32
 8007904:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007906:	e076      	b.n	80079f6 <message_packer+0x2a2>
                #endif
            }
            else
            {
            #endif
                accumulator_s32 = ( accumulator_s32 - reference->cache->offset ) / reference->cache->factor;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007918:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800791c:	ee07 3a10 	vmov	s14, r3
 8007920:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800792a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800793a:	ee17 3a90 	vmov	r3, s15
 800793e:	613b      	str	r3, [r7, #16]
                #ifdef MESSAGE_SUPPORT_LOGS_2
                log_event("accumulator_s32, 0x%lx",accumulator_s32);

                #endif
                if(accumulator_s32 < 0)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	da0c      	bge.n	8007960 <message_packer+0x20c>
                {
                    accumulator_s32 &= ( ALL_F_32 >>
                        ( BITS_IN_UINT32 - reference->cache->length ));
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	f1c3 0320 	rsb	r3, r3, #32
                    accumulator_s32 &= ( ALL_F_32 >>
 8007952:	f04f 32ff 	mov.w	r2, #4294967295
 8007956:	fa22 f303 	lsr.w	r3, r2, r3
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4013      	ands	r3, r2
 800795e:	613b      	str	r3, [r7, #16]

                }
                accumulator = *((uint32_t*)&accumulator_s32);
 8007960:	f107 0310 	add.w	r3, r7, #16
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e045      	b.n	80079f6 <message_packer+0x2a2>
        {
            #ifdef MESSAGE_SUPPORT_LOGS_2
            log_event("Data type Unsigned");
            #endif

            memcpy(&accumulator,(const void*)source,SIZE_OF_UINT32);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	617b      	str	r3, [r7, #20]

            #endif


            #ifdef RANGE_CHECK
            if( ((float)accumulator < reference->cache->minimum)|| ((float)accumulator > reference->cache->maximum))
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007980:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8007984:	ee07 3a10 	vmov	s14, r3
 8007988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007990:	d410      	bmi.n	80079b4 <message_packer+0x260>
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	ee07 3a90 	vmov	s15, r3
 8007998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80079a2:	f8d3 3011 	ldr.w	r3, [r3, #17]
 80079a6:	ee07 3a10 	vmov	s14, r3
 80079aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b2:	dd04      	ble.n	80079be <message_packer+0x26a>
            {
                local_error |= ER_Out_of_range;
 80079b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079b6:	f043 0320 	orr.w	r3, r3, #32
 80079ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80079bc:	e01b      	b.n	80079f6 <message_packer+0x2a2>

                #endif
            }
            else
            {
                accumulator = ( accumulator - reference->cache->offset ) / reference->cache->factor;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80079ce:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80079d2:	ee07 3a10 	vmov	s14, r3
 80079d6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80079e0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80079ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079f0:	ee17 3a90 	vmov	r3, s15
 80079f4:	617b      	str	r3, [r7, #20]
                                / reference->cache->factor;

            #endif
        }

        if(local_error == ER_Success)
 80079f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f040 80a9 	bne.w	8007b50 <message_packer+0x3fc>
            #ifdef MESSAGE_SUPPORT_LOGS_2
            log_event("accumulator before: 0x%lx",accumulator);

            #endif

            index_pointer = reference->start / 8;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	791b      	ldrb	r3, [r3, #4]
 8007a02:	08db      	lsrs	r3, r3, #3
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            bits_pointer = reference->start % 8;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	791b      	ldrb	r3, [r3, #4]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

            while((bits_copied < reference->cache->length)&&(index_pointer < BITS_IN_A_BYTE ))
 8007a16:	e08e      	b.n	8007b36 <message_packer+0x3e2>
            {
                bits_to_be_copied =  minimum_of( reference->cache->length - bits_copied, BITS_IN_A_BYTE - bits_pointer);
 8007a18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a1c:	f1c3 0208 	rsb	r2, r3, #8
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a2e:	1acb      	subs	r3, r1, r3
 8007a30:	4293      	cmp	r3, r2
 8007a32:	bfa8      	it	ge
 8007a34:	4613      	movge	r3, r2
 8007a36:	767b      	strb	r3, [r7, #25]
                log_event("bits_copied:%d, reference->cache->length:%d, bits_to_be_copied:%d"
                        ,bits_copied ,reference->cache->length,bits_to_be_copied);

                #endif

                mask = power_calculate(2,bits_to_be_copied)-1;
 8007a38:	7e7b      	ldrb	r3, [r7, #25]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	2002      	movs	r0, #2
 8007a3e:	f000 ff19 	bl	8008874 <power_calculate>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	b2d3      	uxtb	r3, r2
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	76fb      	strb	r3, [r7, #27]
                mask <<= bits_pointer;
 8007a4c:	7efa      	ldrb	r2, [r7, #27]
 8007a4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	76fb      	strb	r3, [r7, #27]
                frame -> data[index_pointer] &= ~mask;
 8007a58:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	791b      	ldrb	r3, [r3, #4]
 8007a62:	b25a      	sxtb	r2, r3
 8007a64:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	b25b      	sxtb	r3, r3
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	b25a      	sxtb	r2, r3
 8007a70:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007a74:	b2d1      	uxtb	r1, r2
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	460a      	mov	r2, r1
 8007a7c:	711a      	strb	r2, [r3, #4]
                byte_buffer = accumulator;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	76bb      	strb	r3, [r7, #26]
                byte_buffer <<= bits_pointer;
 8007a82:	7eba      	ldrb	r2, [r7, #26]
 8007a84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a88:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8c:	76bb      	strb	r3, [r7, #26]
                byte_buffer &= mask;
 8007a8e:	7eba      	ldrb	r2, [r7, #26]
 8007a90:	7efb      	ldrb	r3, [r7, #27]
 8007a92:	4013      	ands	r3, r2
 8007a94:	76bb      	strb	r3, [r7, #26]
                frame -> data[index_pointer] |= byte_buffer;
 8007a96:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	7919      	ldrb	r1, [r3, #4]
 8007aa0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007aa4:	7eba      	ldrb	r2, [r7, #26]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	b2d1      	uxtb	r1, r2
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4413      	add	r3, r2
 8007aae:	460a      	mov	r2, r1
 8007ab0:	711a      	strb	r2, [r3, #4]
                log_event("mask:0x%x, byte_buffer:0x%x, data[i]:0x%x"
                        ,mask ,byte_buffer,frame -> data[index_pointer]);

                #endif

                accumulator >>= bits_to_be_copied;
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	7e7b      	ldrb	r3, [r7, #25]
 8007ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aba:	617b      	str	r3, [r7, #20]
                bits_copied += bits_to_be_copied;
 8007abc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007ac0:	7e7b      	ldrb	r3, [r7, #25]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                bits_pointer = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

                #ifdef MESSAGE_SUPPORT_LOGS_2
                log_event("accumulator:0x%x",accumulator);

                #endif
                if( reference->cache->format == Intel )
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007ad4:	7d9b      	ldrb	r3, [r3, #22]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d107      	bne.n	8007aea <message_packer+0x396>
                {
                    index_pointer++;
 8007ada:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007ae8:	e012      	b.n	8007b10 <message_packer+0x3bc>
                }
                else if( reference->cache->format == Motorola )
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007af0:	7d9b      	ldrb	r3, [r3, #22]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d107      	bne.n	8007b06 <message_packer+0x3b2>
                {
                    index_pointer--;
 8007af6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007b04:	e004      	b.n	8007b10 <message_packer+0x3bc>
                }
                else
                {
                    local_error |= ER_Fail | ER_Mismatch ;
 8007b06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b08:	f043 0311 	orr.w	r3, r3, #17
 8007b0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 8007b0e:	e01f      	b.n	8007b50 <message_packer+0x3fc>
                }

                if((( index_pointer > BITS_IN_A_BYTE )||( index_pointer < ZERO )) && (bits_copied < reference->cache->length))
 8007b10:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	dc03      	bgt.n	8007b20 <message_packer+0x3cc>
 8007b18:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	da0a      	bge.n	8007b36 <message_packer+0x3e2>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d202      	bcs.n	8007b36 <message_packer+0x3e2>
                {
                    local_error = ER_Fail;
 8007b30:	2301      	movs	r3, #1
 8007b32:	84fb      	strh	r3, [r7, #38]	@ 0x26

                    #ifdef MESSAGE_SUPPORT_LOGS_2
                    log_event("Size Error while final packing data in data[]");
                    #endif

                    break;
 8007b34:	e00c      	b.n	8007b50 <message_packer+0x3fc>
            while((bits_copied < reference->cache->length)&&(index_pointer < BITS_IN_A_BYTE ))
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d204      	bcs.n	8007b50 <message_packer+0x3fc>
 8007b46:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007b4a:	2b07      	cmp	r3, #7
 8007b4c:	f77f af64 	ble.w	8007a18 <message_packer+0x2c4>
            log_event("final_can_data: 0x%08x%08x ",frame->data32[1],frame->data32[0]);

            #endif
        }
    }
    return local_error;
 8007b50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3728      	adds	r7, #40	@ 0x28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <gpio_init>:
 */

message_frame_t frame;

void gpio_init(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
	write_gpio_board_1_ch_1(RELAY_OFF);
 8007b60:	2201      	movs	r2, #1
 8007b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007b6a:	f7fb fe97 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_2(RELAY_OFF);
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007b78:	f7fb fe90 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_3(RELAY_OFF);
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007b86:	f7fb fe89 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_4(RELAY_OFF);
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	2110      	movs	r1, #16
 8007b8e:	487a      	ldr	r0, [pc, #488]	@ (8007d78 <gpio_init+0x21c>)
 8007b90:	f7fb fe84 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_5(RELAY_OFF);
 8007b94:	2201      	movs	r2, #1
 8007b96:	2120      	movs	r1, #32
 8007b98:	4877      	ldr	r0, [pc, #476]	@ (8007d78 <gpio_init+0x21c>)
 8007b9a:	f7fb fe7f 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_6(RELAY_OFF);
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	2140      	movs	r1, #64	@ 0x40
 8007ba2:	4875      	ldr	r0, [pc, #468]	@ (8007d78 <gpio_init+0x21c>)
 8007ba4:	f7fb fe7a 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_7(RELAY_OFF);
 8007ba8:	2201      	movs	r2, #1
 8007baa:	2180      	movs	r1, #128	@ 0x80
 8007bac:	4873      	ldr	r0, [pc, #460]	@ (8007d7c <gpio_init+0x220>)
 8007bae:	f7fb fe75 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_8(RELAY_OFF);
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007bb8:	4870      	ldr	r0, [pc, #448]	@ (8007d7c <gpio_init+0x220>)
 8007bba:	f7fb fe6f 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_9(RELAY_OFF);
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007bc4:	486d      	ldr	r0, [pc, #436]	@ (8007d7c <gpio_init+0x220>)
 8007bc6:	f7fb fe69 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_10(RELAY_OFF);
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007bd0:	486a      	ldr	r0, [pc, #424]	@ (8007d7c <gpio_init+0x220>)
 8007bd2:	f7fb fe63 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_11(RELAY_OFF);
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007bdc:	4867      	ldr	r0, [pc, #412]	@ (8007d7c <gpio_init+0x220>)
 8007bde:	f7fb fe5d 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_12(RELAY_OFF);
 8007be2:	2201      	movs	r2, #1
 8007be4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007be8:	4864      	ldr	r0, [pc, #400]	@ (8007d7c <gpio_init+0x220>)
 8007bea:	f7fb fe57 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_13(RELAY_OFF);
 8007bee:	2201      	movs	r2, #1
 8007bf0:	2104      	movs	r1, #4
 8007bf2:	4863      	ldr	r0, [pc, #396]	@ (8007d80 <gpio_init+0x224>)
 8007bf4:	f7fb fe52 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_14(RELAY_OFF);
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	2108      	movs	r1, #8
 8007bfc:	4860      	ldr	r0, [pc, #384]	@ (8007d80 <gpio_init+0x224>)
 8007bfe:	f7fb fe4d 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_15(RELAY_OFF);
 8007c02:	2201      	movs	r2, #1
 8007c04:	2120      	movs	r1, #32
 8007c06:	485e      	ldr	r0, [pc, #376]	@ (8007d80 <gpio_init+0x224>)
 8007c08:	f7fb fe48 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_1_ch_16(RELAY_OFF);
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	2140      	movs	r1, #64	@ 0x40
 8007c10:	485b      	ldr	r0, [pc, #364]	@ (8007d80 <gpio_init+0x224>)
 8007c12:	f7fb fe43 	bl	800389c <HAL_GPIO_WritePin>

	write_gpio_board_2_ch_1(RELAY_OFF);
 8007c16:	2201      	movs	r2, #1
 8007c18:	2180      	movs	r1, #128	@ 0x80
 8007c1a:	4859      	ldr	r0, [pc, #356]	@ (8007d80 <gpio_init+0x224>)
 8007c1c:	f7fb fe3e 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_2(RELAY_OFF);
 8007c20:	2201      	movs	r2, #1
 8007c22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007c26:	4856      	ldr	r0, [pc, #344]	@ (8007d80 <gpio_init+0x224>)
 8007c28:	f7fb fe38 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_3(RELAY_OFF);
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c32:	4853      	ldr	r0, [pc, #332]	@ (8007d80 <gpio_init+0x224>)
 8007c34:	f7fb fe32 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_4(RELAY_OFF);
 8007c38:	2201      	movs	r2, #1
 8007c3a:	2140      	movs	r1, #64	@ 0x40
 8007c3c:	4851      	ldr	r0, [pc, #324]	@ (8007d84 <gpio_init+0x228>)
 8007c3e:	f7fb fe2d 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_5(RELAY_OFF);
 8007c42:	2201      	movs	r2, #1
 8007c44:	2180      	movs	r1, #128	@ 0x80
 8007c46:	484f      	ldr	r0, [pc, #316]	@ (8007d84 <gpio_init+0x228>)
 8007c48:	f7fb fe28 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_6(RELAY_OFF);
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007c52:	484c      	ldr	r0, [pc, #304]	@ (8007d84 <gpio_init+0x228>)
 8007c54:	f7fb fe22 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_7(RELAY_OFF);
 8007c58:	2201      	movs	r2, #1
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	484a      	ldr	r0, [pc, #296]	@ (8007d88 <gpio_init+0x22c>)
 8007c5e:	f7fb fe1d 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_8(RELAY_OFF);
 8007c62:	2201      	movs	r2, #1
 8007c64:	2104      	movs	r1, #4
 8007c66:	4848      	ldr	r0, [pc, #288]	@ (8007d88 <gpio_init+0x22c>)
 8007c68:	f7fb fe18 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_9(RELAY_OFF);
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	2108      	movs	r1, #8
 8007c70:	4845      	ldr	r0, [pc, #276]	@ (8007d88 <gpio_init+0x22c>)
 8007c72:	f7fb fe13 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_10(RELAY_OFF);
 8007c76:	2201      	movs	r2, #1
 8007c78:	2110      	movs	r1, #16
 8007c7a:	4843      	ldr	r0, [pc, #268]	@ (8007d88 <gpio_init+0x22c>)
 8007c7c:	f7fb fe0e 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_11(RELAY_OFF);
 8007c80:	2201      	movs	r2, #1
 8007c82:	2120      	movs	r1, #32
 8007c84:	4840      	ldr	r0, [pc, #256]	@ (8007d88 <gpio_init+0x22c>)
 8007c86:	f7fb fe09 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_12(RELAY_OFF);
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007c90:	483d      	ldr	r0, [pc, #244]	@ (8007d88 <gpio_init+0x22c>)
 8007c92:	f7fb fe03 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_13(RELAY_OFF);
 8007c96:	2201      	movs	r2, #1
 8007c98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007c9c:	483a      	ldr	r0, [pc, #232]	@ (8007d88 <gpio_init+0x22c>)
 8007c9e:	f7fb fdfd 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_14(RELAY_OFF);
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007ca8:	4837      	ldr	r0, [pc, #220]	@ (8007d88 <gpio_init+0x22c>)
 8007caa:	f7fb fdf7 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_15(RELAY_OFF);
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cb4:	4834      	ldr	r0, [pc, #208]	@ (8007d88 <gpio_init+0x22c>)
 8007cb6:	f7fb fdf1 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_2_ch_16(RELAY_OFF);
 8007cba:	2201      	movs	r2, #1
 8007cbc:	2104      	movs	r1, #4
 8007cbe:	4833      	ldr	r0, [pc, #204]	@ (8007d8c <gpio_init+0x230>)
 8007cc0:	f7fb fdec 	bl	800389c <HAL_GPIO_WritePin>

	write_gpio_board_3_ch_1(RELAY_OFF);
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4831      	ldr	r0, [pc, #196]	@ (8007d90 <gpio_init+0x234>)
 8007cca:	f7fb fde7 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_2(RELAY_OFF);
 8007cce:	2201      	movs	r2, #1
 8007cd0:	2102      	movs	r1, #2
 8007cd2:	482f      	ldr	r0, [pc, #188]	@ (8007d90 <gpio_init+0x234>)
 8007cd4:	f7fb fde2 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_3(RELAY_OFF);
 8007cd8:	2201      	movs	r2, #1
 8007cda:	2104      	movs	r1, #4
 8007cdc:	482c      	ldr	r0, [pc, #176]	@ (8007d90 <gpio_init+0x234>)
 8007cde:	f7fb fddd 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_4(RELAY_OFF);
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	2108      	movs	r1, #8
 8007ce6:	482a      	ldr	r0, [pc, #168]	@ (8007d90 <gpio_init+0x234>)
 8007ce8:	f7fb fdd8 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_5(RELAY_OFF);
 8007cec:	2201      	movs	r2, #1
 8007cee:	2110      	movs	r1, #16
 8007cf0:	4827      	ldr	r0, [pc, #156]	@ (8007d90 <gpio_init+0x234>)
 8007cf2:	f7fb fdd3 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_6(RELAY_OFF);
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	2120      	movs	r1, #32
 8007cfa:	4825      	ldr	r0, [pc, #148]	@ (8007d90 <gpio_init+0x234>)
 8007cfc:	f7fb fdce 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_7(RELAY_OFF);
 8007d00:	2201      	movs	r2, #1
 8007d02:	2140      	movs	r1, #64	@ 0x40
 8007d04:	4822      	ldr	r0, [pc, #136]	@ (8007d90 <gpio_init+0x234>)
 8007d06:	f7fb fdc9 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_8(RELAY_OFF);
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	2180      	movs	r1, #128	@ 0x80
 8007d0e:	4820      	ldr	r0, [pc, #128]	@ (8007d90 <gpio_init+0x234>)
 8007d10:	f7fb fdc4 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_9(RELAY_OFF);
 8007d14:	2201      	movs	r2, #1
 8007d16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007d1a:	481d      	ldr	r0, [pc, #116]	@ (8007d90 <gpio_init+0x234>)
 8007d1c:	f7fb fdbe 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_10(RELAY_OFF);
 8007d20:	2201      	movs	r2, #1
 8007d22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d26:	481a      	ldr	r0, [pc, #104]	@ (8007d90 <gpio_init+0x234>)
 8007d28:	f7fb fdb8 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_11(RELAY_OFF);
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d32:	4817      	ldr	r0, [pc, #92]	@ (8007d90 <gpio_init+0x234>)
 8007d34:	f7fb fdb2 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_12(RELAY_OFF);
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007d3e:	4814      	ldr	r0, [pc, #80]	@ (8007d90 <gpio_init+0x234>)
 8007d40:	f7fb fdac 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_13(RELAY_OFF);
 8007d44:	2201      	movs	r2, #1
 8007d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007d4a:	4811      	ldr	r0, [pc, #68]	@ (8007d90 <gpio_init+0x234>)
 8007d4c:	f7fb fda6 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_14(RELAY_OFF);
 8007d50:	2201      	movs	r2, #1
 8007d52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007d56:	480e      	ldr	r0, [pc, #56]	@ (8007d90 <gpio_init+0x234>)
 8007d58:	f7fb fda0 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_15(RELAY_OFF);
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007d62:	480b      	ldr	r0, [pc, #44]	@ (8007d90 <gpio_init+0x234>)
 8007d64:	f7fb fd9a 	bl	800389c <HAL_GPIO_WritePin>
	write_gpio_board_3_ch_16(RELAY_OFF);
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d6e:	4808      	ldr	r0, [pc, #32]	@ (8007d90 <gpio_init+0x234>)
 8007d70:	f7fb fd94 	bl	800389c <HAL_GPIO_WritePin>


}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	48000400 	.word	0x48000400
 8007d7c:	48000800 	.word	0x48000800
 8007d80:	48000c00 	.word	0x48000c00
 8007d84:	48001400 	.word	0x48001400
 8007d88:	48001800 	.word	0x48001800
 8007d8c:	48001c00 	.word	0x48001c00
 8007d90:	48001000 	.word	0x48001000

08007d94 <middleware_variables_input>:
float current;
void middleware_variables_input(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0

	/*****************DIGITAL_INPUTS TO CAN *********************/
	can_data_gpio_input_1 	= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);//1-PA4
 8007d98:	2110      	movs	r1, #16
 8007d9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007d9e:	f7fb fd65 	bl	800386c <HAL_GPIO_ReadPin>
 8007da2:	4603      	mov	r3, r0
 8007da4:	461a      	mov	r2, r3
 8007da6:	4bb4      	ldr	r3, [pc, #720]	@ (8008078 <middleware_variables_input+0x2e4>)
 8007da8:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_2	= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);//2-PA5
 8007daa:	2120      	movs	r1, #32
 8007dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007db0:	f7fb fd5c 	bl	800386c <HAL_GPIO_ReadPin>
 8007db4:	4603      	mov	r3, r0
 8007db6:	461a      	mov	r2, r3
 8007db8:	4bb0      	ldr	r3, [pc, #704]	@ (800807c <middleware_variables_input+0x2e8>)
 8007dba:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_3	= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);//3-PA6
 8007dbc:	2140      	movs	r1, #64	@ 0x40
 8007dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007dc2:	f7fb fd53 	bl	800386c <HAL_GPIO_ReadPin>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4bad      	ldr	r3, [pc, #692]	@ (8008080 <middleware_variables_input+0x2ec>)
 8007dcc:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_4	= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);//4-PA7
 8007dce:	2180      	movs	r1, #128	@ 0x80
 8007dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007dd4:	f7fb fd4a 	bl	800386c <HAL_GPIO_ReadPin>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4ba9      	ldr	r3, [pc, #676]	@ (8008084 <middleware_variables_input+0x2f0>)
 8007dde:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_5	= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);//5-PA10
 8007de0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007de8:	f7fb fd40 	bl	800386c <HAL_GPIO_ReadPin>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	4ba5      	ldr	r3, [pc, #660]	@ (8008088 <middleware_variables_input+0x2f4>)
 8007df2:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_6	= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);//6-PA12
 8007df4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007dfc:	f7fb fd36 	bl	800386c <HAL_GPIO_ReadPin>
 8007e00:	4603      	mov	r3, r0
 8007e02:	461a      	mov	r2, r3
 8007e04:	4ba1      	ldr	r3, [pc, #644]	@ (800808c <middleware_variables_input+0x2f8>)
 8007e06:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_7	= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);//7-PA15
 8007e08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e10:	f7fb fd2c 	bl	800386c <HAL_GPIO_ReadPin>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	4b9d      	ldr	r3, [pc, #628]	@ (8008090 <middleware_variables_input+0x2fc>)
 8007e1a:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_8	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);//8-PB1
 8007e1c:	2102      	movs	r1, #2
 8007e1e:	489d      	ldr	r0, [pc, #628]	@ (8008094 <middleware_variables_input+0x300>)
 8007e20:	f7fb fd24 	bl	800386c <HAL_GPIO_ReadPin>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	4b9b      	ldr	r3, [pc, #620]	@ (8008098 <middleware_variables_input+0x304>)
 8007e2a:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_9	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);//9-PB2
 8007e2c:	2104      	movs	r1, #4
 8007e2e:	4899      	ldr	r0, [pc, #612]	@ (8008094 <middleware_variables_input+0x300>)
 8007e30:	f7fb fd1c 	bl	800386c <HAL_GPIO_ReadPin>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	4b98      	ldr	r3, [pc, #608]	@ (800809c <middleware_variables_input+0x308>)
 8007e3a:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_10	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);//10-PB8
 8007e3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007e40:	4894      	ldr	r0, [pc, #592]	@ (8008094 <middleware_variables_input+0x300>)
 8007e42:	f7fb fd13 	bl	800386c <HAL_GPIO_ReadPin>
 8007e46:	4603      	mov	r3, r0
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4b95      	ldr	r3, [pc, #596]	@ (80080a0 <middleware_variables_input+0x30c>)
 8007e4c:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_11	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);//11-PB9
 8007e4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007e52:	4890      	ldr	r0, [pc, #576]	@ (8008094 <middleware_variables_input+0x300>)
 8007e54:	f7fb fd0a 	bl	800386c <HAL_GPIO_ReadPin>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4b91      	ldr	r3, [pc, #580]	@ (80080a4 <middleware_variables_input+0x310>)
 8007e5e:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_12	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);//12-PB10
 8007e60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007e64:	488b      	ldr	r0, [pc, #556]	@ (8008094 <middleware_variables_input+0x300>)
 8007e66:	f7fb fd01 	bl	800386c <HAL_GPIO_ReadPin>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4b8e      	ldr	r3, [pc, #568]	@ (80080a8 <middleware_variables_input+0x314>)
 8007e70:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_13	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);//13-PB11
 8007e72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007e76:	4887      	ldr	r0, [pc, #540]	@ (8008094 <middleware_variables_input+0x300>)
 8007e78:	f7fb fcf8 	bl	800386c <HAL_GPIO_ReadPin>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4b8a      	ldr	r3, [pc, #552]	@ (80080ac <middleware_variables_input+0x318>)
 8007e82:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_14	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);//14-PB12
 8007e84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007e88:	4882      	ldr	r0, [pc, #520]	@ (8008094 <middleware_variables_input+0x300>)
 8007e8a:	f7fb fcef 	bl	800386c <HAL_GPIO_ReadPin>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	461a      	mov	r2, r3
 8007e92:	4b87      	ldr	r3, [pc, #540]	@ (80080b0 <middleware_variables_input+0x31c>)
 8007e94:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_15	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);//15-PB13
 8007e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007e9a:	487e      	ldr	r0, [pc, #504]	@ (8008094 <middleware_variables_input+0x300>)
 8007e9c:	f7fb fce6 	bl	800386c <HAL_GPIO_ReadPin>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4b83      	ldr	r3, [pc, #524]	@ (80080b4 <middleware_variables_input+0x320>)
 8007ea6:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_16	= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);//16-PB15
 8007ea8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007eac:	4879      	ldr	r0, [pc, #484]	@ (8008094 <middleware_variables_input+0x300>)
 8007eae:	f7fb fcdd 	bl	800386c <HAL_GPIO_ReadPin>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4b80      	ldr	r3, [pc, #512]	@ (80080b8 <middleware_variables_input+0x324>)
 8007eb8:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_17	= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);//17-PC4
 8007eba:	2110      	movs	r1, #16
 8007ebc:	487f      	ldr	r0, [pc, #508]	@ (80080bc <middleware_variables_input+0x328>)
 8007ebe:	f7fb fcd5 	bl	800386c <HAL_GPIO_ReadPin>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4b7e      	ldr	r3, [pc, #504]	@ (80080c0 <middleware_variables_input+0x32c>)
 8007ec8:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_18	= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);//18-PC5
 8007eca:	2120      	movs	r1, #32
 8007ecc:	487b      	ldr	r0, [pc, #492]	@ (80080bc <middleware_variables_input+0x328>)
 8007ece:	f7fb fccd 	bl	800386c <HAL_GPIO_ReadPin>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80080c4 <middleware_variables_input+0x330>)
 8007ed8:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_19	= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);//19-PC6
 8007eda:	2140      	movs	r1, #64	@ 0x40
 8007edc:	4877      	ldr	r0, [pc, #476]	@ (80080bc <middleware_variables_input+0x328>)
 8007ede:	f7fb fcc5 	bl	800386c <HAL_GPIO_ReadPin>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	4b78      	ldr	r3, [pc, #480]	@ (80080c8 <middleware_variables_input+0x334>)
 8007ee8:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_20	= HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);//20-PD4
 8007eea:	2110      	movs	r1, #16
 8007eec:	4877      	ldr	r0, [pc, #476]	@ (80080cc <middleware_variables_input+0x338>)
 8007eee:	f7fb fcbd 	bl	800386c <HAL_GPIO_ReadPin>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4b76      	ldr	r3, [pc, #472]	@ (80080d0 <middleware_variables_input+0x33c>)
 8007ef8:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_21	= HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);//21-PD10
 8007efa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007efe:	4873      	ldr	r0, [pc, #460]	@ (80080cc <middleware_variables_input+0x338>)
 8007f00:	f7fb fcb4 	bl	800386c <HAL_GPIO_ReadPin>
 8007f04:	4603      	mov	r3, r0
 8007f06:	461a      	mov	r2, r3
 8007f08:	4b72      	ldr	r3, [pc, #456]	@ (80080d4 <middleware_variables_input+0x340>)
 8007f0a:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_22	= HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);//22-PD11
 8007f0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007f10:	486e      	ldr	r0, [pc, #440]	@ (80080cc <middleware_variables_input+0x338>)
 8007f12:	f7fb fcab 	bl	800386c <HAL_GPIO_ReadPin>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80080d8 <middleware_variables_input+0x344>)
 8007f1c:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_23	= HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);//23-PD12
 8007f1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007f22:	486a      	ldr	r0, [pc, #424]	@ (80080cc <middleware_variables_input+0x338>)
 8007f24:	f7fb fca2 	bl	800386c <HAL_GPIO_ReadPin>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80080dc <middleware_variables_input+0x348>)
 8007f2e:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_24	= HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);//24-PD13
 8007f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007f34:	4865      	ldr	r0, [pc, #404]	@ (80080cc <middleware_variables_input+0x338>)
 8007f36:	f7fb fc99 	bl	800386c <HAL_GPIO_ReadPin>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4b68      	ldr	r3, [pc, #416]	@ (80080e0 <middleware_variables_input+0x34c>)
 8007f40:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_25	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3);//25-PF3
 8007f42:	2108      	movs	r1, #8
 8007f44:	4867      	ldr	r0, [pc, #412]	@ (80080e4 <middleware_variables_input+0x350>)
 8007f46:	f7fb fc91 	bl	800386c <HAL_GPIO_ReadPin>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4b66      	ldr	r3, [pc, #408]	@ (80080e8 <middleware_variables_input+0x354>)
 8007f50:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_26	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5);//26-PF5
 8007f52:	2120      	movs	r1, #32
 8007f54:	4863      	ldr	r0, [pc, #396]	@ (80080e4 <middleware_variables_input+0x350>)
 8007f56:	f7fb fc89 	bl	800386c <HAL_GPIO_ReadPin>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4b63      	ldr	r3, [pc, #396]	@ (80080ec <middleware_variables_input+0x358>)
 8007f60:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_27	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);//27-PF9
 8007f62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007f66:	485f      	ldr	r0, [pc, #380]	@ (80080e4 <middleware_variables_input+0x350>)
 8007f68:	f7fb fc80 	bl	800386c <HAL_GPIO_ReadPin>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4b5f      	ldr	r3, [pc, #380]	@ (80080f0 <middleware_variables_input+0x35c>)
 8007f72:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_28	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);//28-PF10
 8007f74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007f78:	485a      	ldr	r0, [pc, #360]	@ (80080e4 <middleware_variables_input+0x350>)
 8007f7a:	f7fb fc77 	bl	800386c <HAL_GPIO_ReadPin>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	461a      	mov	r2, r3
 8007f82:	4b5c      	ldr	r3, [pc, #368]	@ (80080f4 <middleware_variables_input+0x360>)
 8007f84:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_29	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11);//29-PF11
 8007f86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007f8a:	4856      	ldr	r0, [pc, #344]	@ (80080e4 <middleware_variables_input+0x350>)
 8007f8c:	f7fb fc6e 	bl	800386c <HAL_GPIO_ReadPin>
 8007f90:	4603      	mov	r3, r0
 8007f92:	461a      	mov	r2, r3
 8007f94:	4b58      	ldr	r3, [pc, #352]	@ (80080f8 <middleware_variables_input+0x364>)
 8007f96:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_30	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12);//30-PF12
 8007f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007f9c:	4851      	ldr	r0, [pc, #324]	@ (80080e4 <middleware_variables_input+0x350>)
 8007f9e:	f7fb fc65 	bl	800386c <HAL_GPIO_ReadPin>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4b55      	ldr	r3, [pc, #340]	@ (80080fc <middleware_variables_input+0x368>)
 8007fa8:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_31	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13);//31-PF13
 8007faa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007fae:	484d      	ldr	r0, [pc, #308]	@ (80080e4 <middleware_variables_input+0x350>)
 8007fb0:	f7fb fc5c 	bl	800386c <HAL_GPIO_ReadPin>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	4b51      	ldr	r3, [pc, #324]	@ (8008100 <middleware_variables_input+0x36c>)
 8007fba:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_32	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14);//32-PF14
 8007fbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007fc0:	4848      	ldr	r0, [pc, #288]	@ (80080e4 <middleware_variables_input+0x350>)
 8007fc2:	f7fb fc53 	bl	800386c <HAL_GPIO_ReadPin>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	461a      	mov	r2, r3
 8007fca:	4b4e      	ldr	r3, [pc, #312]	@ (8008104 <middleware_variables_input+0x370>)
 8007fcc:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_33	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15);//33-PF15
 8007fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007fd2:	4844      	ldr	r0, [pc, #272]	@ (80080e4 <middleware_variables_input+0x350>)
 8007fd4:	f7fb fc4a 	bl	800386c <HAL_GPIO_ReadPin>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8008108 <middleware_variables_input+0x374>)
 8007fde:	601a      	str	r2, [r3, #0]
	can_data_gpio_input_34	= HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0);//34-PG0
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	484a      	ldr	r0, [pc, #296]	@ (800810c <middleware_variables_input+0x378>)
 8007fe4:	f7fb fc42 	bl	800386c <HAL_GPIO_ReadPin>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	461a      	mov	r2, r3
 8007fec:	4b48      	ldr	r3, [pc, #288]	@ (8008110 <middleware_variables_input+0x37c>)
 8007fee:	601a      	str	r2, [r3, #0]

	/************MIDDLEWARE DATA TRANSFER TO CAN ***************/
	/**CAN_TASK_COUNTER**/
	can_data_task_1_counter = task_1_counter;
 8007ff0:	4b48      	ldr	r3, [pc, #288]	@ (8008114 <middleware_variables_input+0x380>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a48      	ldr	r2, [pc, #288]	@ (8008118 <middleware_variables_input+0x384>)
 8007ff6:	6013      	str	r3, [r2, #0]
	can_data_task_2_counter = task_2_counter;
 8007ff8:	4b48      	ldr	r3, [pc, #288]	@ (800811c <middleware_variables_input+0x388>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a48      	ldr	r2, [pc, #288]	@ (8008120 <middleware_variables_input+0x38c>)
 8007ffe:	6013      	str	r3, [r2, #0]
	can_data_task_3_counter = task_3_counter;
 8008000:	4b48      	ldr	r3, [pc, #288]	@ (8008124 <middleware_variables_input+0x390>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a48      	ldr	r2, [pc, #288]	@ (8008128 <middleware_variables_input+0x394>)
 8008006:	6013      	str	r3, [r2, #0]
	can_data_task_4_counter = task_4_counter;
 8008008:	4b48      	ldr	r3, [pc, #288]	@ (800812c <middleware_variables_input+0x398>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a48      	ldr	r2, [pc, #288]	@ (8008130 <middleware_variables_input+0x39c>)
 800800e:	6013      	str	r3, [r2, #0]
//	can_data_task_5_counter = task_5_counter;

	/************FLOWRATE TO CAN  ***************/

	can_data_flowrate_1 = Flowrate_1 ;
 8008010:	4b48      	ldr	r3, [pc, #288]	@ (8008134 <middleware_variables_input+0x3a0>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	4b48      	ldr	r3, [pc, #288]	@ (8008138 <middleware_variables_input+0x3a4>)
 8008018:	601a      	str	r2, [r3, #0]
	can_data_flowrate_2 = Flowrate_2 ;
 800801a:	4b48      	ldr	r3, [pc, #288]	@ (800813c <middleware_variables_input+0x3a8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	4b47      	ldr	r3, [pc, #284]	@ (8008140 <middleware_variables_input+0x3ac>)
 8008022:	601a      	str	r2, [r3, #0]

	/************ FOR ANALOG_VALUES TO CAN GO TO ADC.C  ***************/

	/************ THERMISTOR_TEMP TO CAN  ***************/

	can_data_ten_k_thermistor_1 = temp_10k_Sensor_1 ;
 8008024:	4b47      	ldr	r3, [pc, #284]	@ (8008144 <middleware_variables_input+0x3b0>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	4610      	mov	r0, r2
 800802c:	4619      	mov	r1, r3
 800802e:	f7f8 fd43 	bl	8000ab8 <__aeabi_d2f>
 8008032:	4603      	mov	r3, r0
 8008034:	4a44      	ldr	r2, [pc, #272]	@ (8008148 <middleware_variables_input+0x3b4>)
 8008036:	6013      	str	r3, [r2, #0]
	can_data_ten_k_thermistor_2 = temp_10k_Sensor_2 ;
 8008038:	4b44      	ldr	r3, [pc, #272]	@ (800814c <middleware_variables_input+0x3b8>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	4610      	mov	r0, r2
 8008040:	4619      	mov	r1, r3
 8008042:	f7f8 fd39 	bl	8000ab8 <__aeabi_d2f>
 8008046:	4603      	mov	r3, r0
 8008048:	4a41      	ldr	r2, [pc, #260]	@ (8008150 <middleware_variables_input+0x3bc>)
 800804a:	6013      	str	r3, [r2, #0]
	can_data_ten_k_thermistor_3 = temp_10k_Sensor_3 ;
 800804c:	4b41      	ldr	r3, [pc, #260]	@ (8008154 <middleware_variables_input+0x3c0>)
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	4610      	mov	r0, r2
 8008054:	4619      	mov	r1, r3
 8008056:	f7f8 fd2f 	bl	8000ab8 <__aeabi_d2f>
 800805a:	4603      	mov	r3, r0
 800805c:	4a3e      	ldr	r2, [pc, #248]	@ (8008158 <middleware_variables_input+0x3c4>)
 800805e:	6013      	str	r3, [r2, #0]

	/************ BATTERY VOLTAGE TO CAN  ***************/

	can_data_batt_volt_1 = voltage_1 ;
 8008060:	4b3e      	ldr	r3, [pc, #248]	@ (800815c <middleware_variables_input+0x3c8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a3e      	ldr	r2, [pc, #248]	@ (8008160 <middleware_variables_input+0x3cc>)
 8008066:	6013      	str	r3, [r2, #0]
	can_data_batt_volt_2 = voltage_2 ;
 8008068:	4b3e      	ldr	r3, [pc, #248]	@ (8008164 <middleware_variables_input+0x3d0>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a3e      	ldr	r2, [pc, #248]	@ (8008168 <middleware_variables_input+0x3d4>)
 800806e:	6013      	str	r3, [r2, #0]
	can_data_batt_volt_3 = voltage_3 ;
 8008070:	4b3e      	ldr	r3, [pc, #248]	@ (800816c <middleware_variables_input+0x3d8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	e07c      	b.n	8008170 <middleware_variables_input+0x3dc>
 8008076:	bf00      	nop
 8008078:	20001260 	.word	0x20001260
 800807c:	20001264 	.word	0x20001264
 8008080:	20001268 	.word	0x20001268
 8008084:	2000126c 	.word	0x2000126c
 8008088:	20001270 	.word	0x20001270
 800808c:	20001274 	.word	0x20001274
 8008090:	20001278 	.word	0x20001278
 8008094:	48000400 	.word	0x48000400
 8008098:	2000127c 	.word	0x2000127c
 800809c:	20001280 	.word	0x20001280
 80080a0:	20001284 	.word	0x20001284
 80080a4:	20001288 	.word	0x20001288
 80080a8:	2000128c 	.word	0x2000128c
 80080ac:	20001290 	.word	0x20001290
 80080b0:	20001294 	.word	0x20001294
 80080b4:	20001298 	.word	0x20001298
 80080b8:	2000129c 	.word	0x2000129c
 80080bc:	48000800 	.word	0x48000800
 80080c0:	200012a0 	.word	0x200012a0
 80080c4:	200012a4 	.word	0x200012a4
 80080c8:	200012a8 	.word	0x200012a8
 80080cc:	48000c00 	.word	0x48000c00
 80080d0:	200012ac 	.word	0x200012ac
 80080d4:	200012b0 	.word	0x200012b0
 80080d8:	200012b4 	.word	0x200012b4
 80080dc:	200012b8 	.word	0x200012b8
 80080e0:	200012bc 	.word	0x200012bc
 80080e4:	48001400 	.word	0x48001400
 80080e8:	200012c0 	.word	0x200012c0
 80080ec:	200012c4 	.word	0x200012c4
 80080f0:	200012c8 	.word	0x200012c8
 80080f4:	200012cc 	.word	0x200012cc
 80080f8:	200012d0 	.word	0x200012d0
 80080fc:	200012d4 	.word	0x200012d4
 8008100:	200012d8 	.word	0x200012d8
 8008104:	200012dc 	.word	0x200012dc
 8008108:	200012e0 	.word	0x200012e0
 800810c:	48001800 	.word	0x48001800
 8008110:	200012e4 	.word	0x200012e4
 8008114:	20000454 	.word	0x20000454
 8008118:	200013b8 	.word	0x200013b8
 800811c:	20000458 	.word	0x20000458
 8008120:	200013bc 	.word	0x200013bc
 8008124:	2000045c 	.word	0x2000045c
 8008128:	200013c0 	.word	0x200013c0
 800812c:	20000460 	.word	0x20000460
 8008130:	200013c4 	.word	0x200013c4
 8008134:	200003b4 	.word	0x200003b4
 8008138:	200012f0 	.word	0x200012f0
 800813c:	200003c0 	.word	0x200003c0
 8008140:	200012f4 	.word	0x200012f4
 8008144:	20001490 	.word	0x20001490
 8008148:	200013cc 	.word	0x200013cc
 800814c:	20001488 	.word	0x20001488
 8008150:	200013d0 	.word	0x200013d0
 8008154:	20001498 	.word	0x20001498
 8008158:	200013d4 	.word	0x200013d4
 800815c:	200014a0 	.word	0x200014a0
 8008160:	2000123c 	.word	0x2000123c
 8008164:	200014a4 	.word	0x200014a4
 8008168:	20001240 	.word	0x20001240
 800816c:	200014a8 	.word	0x200014a8
 8008170:	4a16      	ldr	r2, [pc, #88]	@ (80081cc <middleware_variables_input+0x438>)
 8008172:	6013      	str	r3, [r2, #0]

	/************  CAN TO BATTERY VOLTAGE CALIB  ***************/
	if((flag == 1))
 8008174:	4b16      	ldr	r3, [pc, #88]	@ (80081d0 <middleware_variables_input+0x43c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d118      	bne.n	80081ae <middleware_variables_input+0x41a>
	{
		calib_can_1 = can_data_batt_volt_1_gain_set;
 800817c:	4b15      	ldr	r3, [pc, #84]	@ (80081d4 <middleware_variables_input+0x440>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a15      	ldr	r2, [pc, #84]	@ (80081d8 <middleware_variables_input+0x444>)
 8008182:	6013      	str	r3, [r2, #0]
		can_data_batt_volt_1_gain_feedback = calib_can_1;
 8008184:	4b14      	ldr	r3, [pc, #80]	@ (80081d8 <middleware_variables_input+0x444>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a14      	ldr	r2, [pc, #80]	@ (80081dc <middleware_variables_input+0x448>)
 800818a:	6013      	str	r3, [r2, #0]

		calib_can_2 = can_data_batt_volt_2_gain_set;
 800818c:	4b14      	ldr	r3, [pc, #80]	@ (80081e0 <middleware_variables_input+0x44c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a14      	ldr	r2, [pc, #80]	@ (80081e4 <middleware_variables_input+0x450>)
 8008192:	6013      	str	r3, [r2, #0]
		can_data_batt_volt_2_gain_feedback = calib_can_2;
 8008194:	4b13      	ldr	r3, [pc, #76]	@ (80081e4 <middleware_variables_input+0x450>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a13      	ldr	r2, [pc, #76]	@ (80081e8 <middleware_variables_input+0x454>)
 800819a:	6013      	str	r3, [r2, #0]

		calib_can_3 = can_data_batt_volt_3_gain_set;
 800819c:	4b13      	ldr	r3, [pc, #76]	@ (80081ec <middleware_variables_input+0x458>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a13      	ldr	r2, [pc, #76]	@ (80081f0 <middleware_variables_input+0x45c>)
 80081a2:	6013      	str	r3, [r2, #0]
		can_data_batt_volt_3_gain_feedback = calib_can_3;
 80081a4:	4b12      	ldr	r3, [pc, #72]	@ (80081f0 <middleware_variables_input+0x45c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a12      	ldr	r2, [pc, #72]	@ (80081f4 <middleware_variables_input+0x460>)
 80081aa:	6013      	str	r3, [r2, #0]





}
 80081ac:	e00b      	b.n	80081c6 <middleware_variables_input+0x432>
		can_data_batt_volt_1_gain_feedback = calib_can_1;
 80081ae:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <middleware_variables_input+0x444>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a0a      	ldr	r2, [pc, #40]	@ (80081dc <middleware_variables_input+0x448>)
 80081b4:	6013      	str	r3, [r2, #0]
		can_data_batt_volt_2_gain_feedback = calib_can_2;
 80081b6:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <middleware_variables_input+0x450>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a0b      	ldr	r2, [pc, #44]	@ (80081e8 <middleware_variables_input+0x454>)
 80081bc:	6013      	str	r3, [r2, #0]
		can_data_batt_volt_3_gain_feedback = calib_can_3;
 80081be:	4b0c      	ldr	r3, [pc, #48]	@ (80081f0 <middleware_variables_input+0x45c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a0c      	ldr	r2, [pc, #48]	@ (80081f4 <middleware_variables_input+0x460>)
 80081c4:	6013      	str	r3, [r2, #0]
}
 80081c6:	bf00      	nop
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20001244 	.word	0x20001244
 80081d0:	2000143c 	.word	0x2000143c
 80081d4:	20001254 	.word	0x20001254
 80081d8:	20000084 	.word	0x20000084
 80081dc:	20001248 	.word	0x20001248
 80081e0:	20001258 	.word	0x20001258
 80081e4:	20000088 	.word	0x20000088
 80081e8:	2000124c 	.word	0x2000124c
 80081ec:	2000125c 	.word	0x2000125c
 80081f0:	2000008c 	.word	0x2000008c
 80081f4:	20001250 	.word	0x20001250

080081f8 <middleware_variables_output>:

void middleware_variables_output(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0

	 /**RELAY_CONTROL BOARD_1**/
	 write_gpio_board_1_ch_1(!can_data_a1);
 80081fc:	4ba3      	ldr	r3, [pc, #652]	@ (800848c <middleware_variables_output+0x294>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	bf0c      	ite	eq
 8008204:	2301      	moveq	r3, #1
 8008206:	2300      	movne	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008214:	f7fb fb42 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_2(!can_data_a2);
 8008218:	4b9d      	ldr	r3, [pc, #628]	@ (8008490 <middleware_variables_output+0x298>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	bf0c      	ite	eq
 8008220:	2301      	moveq	r3, #1
 8008222:	2300      	movne	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800822c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008230:	f7fb fb34 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_3(!can_data_a3);
 8008234:	4b97      	ldr	r3, [pc, #604]	@ (8008494 <middleware_variables_output+0x29c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	bf0c      	ite	eq
 800823c:	2301      	moveq	r3, #1
 800823e:	2300      	movne	r3, #0
 8008240:	b2db      	uxtb	r3, r3
 8008242:	461a      	mov	r2, r3
 8008244:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800824c:	f7fb fb26 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_4(!can_data_a4);
 8008250:	4b91      	ldr	r3, [pc, #580]	@ (8008498 <middleware_variables_output+0x2a0>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	bf0c      	ite	eq
 8008258:	2301      	moveq	r3, #1
 800825a:	2300      	movne	r3, #0
 800825c:	b2db      	uxtb	r3, r3
 800825e:	461a      	mov	r2, r3
 8008260:	2110      	movs	r1, #16
 8008262:	488e      	ldr	r0, [pc, #568]	@ (800849c <middleware_variables_output+0x2a4>)
 8008264:	f7fb fb1a 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_5(!can_data_a5);
 8008268:	4b8d      	ldr	r3, [pc, #564]	@ (80084a0 <middleware_variables_output+0x2a8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	bf0c      	ite	eq
 8008270:	2301      	moveq	r3, #1
 8008272:	2300      	movne	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	2120      	movs	r1, #32
 800827a:	4888      	ldr	r0, [pc, #544]	@ (800849c <middleware_variables_output+0x2a4>)
 800827c:	f7fb fb0e 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_6(!can_data_a6);
 8008280:	4b88      	ldr	r3, [pc, #544]	@ (80084a4 <middleware_variables_output+0x2ac>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	bf0c      	ite	eq
 8008288:	2301      	moveq	r3, #1
 800828a:	2300      	movne	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	2140      	movs	r1, #64	@ 0x40
 8008292:	4882      	ldr	r0, [pc, #520]	@ (800849c <middleware_variables_output+0x2a4>)
 8008294:	f7fb fb02 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_7(!can_data_a7);
 8008298:	4b83      	ldr	r3, [pc, #524]	@ (80084a8 <middleware_variables_output+0x2b0>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	bf0c      	ite	eq
 80082a0:	2301      	moveq	r3, #1
 80082a2:	2300      	movne	r3, #0
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	461a      	mov	r2, r3
 80082a8:	2180      	movs	r1, #128	@ 0x80
 80082aa:	4880      	ldr	r0, [pc, #512]	@ (80084ac <middleware_variables_output+0x2b4>)
 80082ac:	f7fb faf6 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_8(!can_data_a8);
 80082b0:	4b7f      	ldr	r3, [pc, #508]	@ (80084b0 <middleware_variables_output+0x2b8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bf0c      	ite	eq
 80082b8:	2301      	moveq	r3, #1
 80082ba:	2300      	movne	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80082c4:	4879      	ldr	r0, [pc, #484]	@ (80084ac <middleware_variables_output+0x2b4>)
 80082c6:	f7fb fae9 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_9(!can_data_a9);
 80082ca:	4b7a      	ldr	r3, [pc, #488]	@ (80084b4 <middleware_variables_output+0x2bc>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bf0c      	ite	eq
 80082d2:	2301      	moveq	r3, #1
 80082d4:	2300      	movne	r3, #0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80082de:	4873      	ldr	r0, [pc, #460]	@ (80084ac <middleware_variables_output+0x2b4>)
 80082e0:	f7fb fadc 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_10(!can_data_a10);
 80082e4:	4b74      	ldr	r3, [pc, #464]	@ (80084b8 <middleware_variables_output+0x2c0>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bf0c      	ite	eq
 80082ec:	2301      	moveq	r3, #1
 80082ee:	2300      	movne	r3, #0
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80082f8:	486c      	ldr	r0, [pc, #432]	@ (80084ac <middleware_variables_output+0x2b4>)
 80082fa:	f7fb facf 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_11(!can_data_a11);
 80082fe:	4b6f      	ldr	r3, [pc, #444]	@ (80084bc <middleware_variables_output+0x2c4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	bf0c      	ite	eq
 8008306:	2301      	moveq	r3, #1
 8008308:	2300      	movne	r3, #0
 800830a:	b2db      	uxtb	r3, r3
 800830c:	461a      	mov	r2, r3
 800830e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008312:	4866      	ldr	r0, [pc, #408]	@ (80084ac <middleware_variables_output+0x2b4>)
 8008314:	f7fb fac2 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_12(!can_data_a12);
 8008318:	4b69      	ldr	r3, [pc, #420]	@ (80084c0 <middleware_variables_output+0x2c8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	bf0c      	ite	eq
 8008320:	2301      	moveq	r3, #1
 8008322:	2300      	movne	r3, #0
 8008324:	b2db      	uxtb	r3, r3
 8008326:	461a      	mov	r2, r3
 8008328:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800832c:	485f      	ldr	r0, [pc, #380]	@ (80084ac <middleware_variables_output+0x2b4>)
 800832e:	f7fb fab5 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_13(!can_data_a13);
 8008332:	4b64      	ldr	r3, [pc, #400]	@ (80084c4 <middleware_variables_output+0x2cc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	bf0c      	ite	eq
 800833a:	2301      	moveq	r3, #1
 800833c:	2300      	movne	r3, #0
 800833e:	b2db      	uxtb	r3, r3
 8008340:	461a      	mov	r2, r3
 8008342:	2104      	movs	r1, #4
 8008344:	4860      	ldr	r0, [pc, #384]	@ (80084c8 <middleware_variables_output+0x2d0>)
 8008346:	f7fb faa9 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_14(!can_data_a14);
 800834a:	4b60      	ldr	r3, [pc, #384]	@ (80084cc <middleware_variables_output+0x2d4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bf0c      	ite	eq
 8008352:	2301      	moveq	r3, #1
 8008354:	2300      	movne	r3, #0
 8008356:	b2db      	uxtb	r3, r3
 8008358:	461a      	mov	r2, r3
 800835a:	2108      	movs	r1, #8
 800835c:	485a      	ldr	r0, [pc, #360]	@ (80084c8 <middleware_variables_output+0x2d0>)
 800835e:	f7fb fa9d 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_15(!can_data_a15);
 8008362:	4b5b      	ldr	r3, [pc, #364]	@ (80084d0 <middleware_variables_output+0x2d8>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	bf0c      	ite	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	2300      	movne	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	2120      	movs	r1, #32
 8008374:	4854      	ldr	r0, [pc, #336]	@ (80084c8 <middleware_variables_output+0x2d0>)
 8008376:	f7fb fa91 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_1_ch_16(!can_data_a16);
 800837a:	4b56      	ldr	r3, [pc, #344]	@ (80084d4 <middleware_variables_output+0x2dc>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	bf0c      	ite	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	2300      	movne	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	2140      	movs	r1, #64	@ 0x40
 800838c:	484e      	ldr	r0, [pc, #312]	@ (80084c8 <middleware_variables_output+0x2d0>)
 800838e:	f7fb fa85 	bl	800389c <HAL_GPIO_WritePin>

	 /**RELAY_CONTROL BOARD_2**/
	 write_gpio_board_2_ch_1(!can_data_b1);
 8008392:	4b51      	ldr	r3, [pc, #324]	@ (80084d8 <middleware_variables_output+0x2e0>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	bf0c      	ite	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	2300      	movne	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	461a      	mov	r2, r3
 80083a2:	2180      	movs	r1, #128	@ 0x80
 80083a4:	4848      	ldr	r0, [pc, #288]	@ (80084c8 <middleware_variables_output+0x2d0>)
 80083a6:	f7fb fa79 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_2(!can_data_b2);
 80083aa:	4b4c      	ldr	r3, [pc, #304]	@ (80084dc <middleware_variables_output+0x2e4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bf0c      	ite	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	2300      	movne	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80083be:	4842      	ldr	r0, [pc, #264]	@ (80084c8 <middleware_variables_output+0x2d0>)
 80083c0:	f7fb fa6c 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_3(!can_data_b3);
 80083c4:	4b46      	ldr	r3, [pc, #280]	@ (80084e0 <middleware_variables_output+0x2e8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bf0c      	ite	eq
 80083cc:	2301      	moveq	r3, #1
 80083ce:	2300      	movne	r3, #0
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083d8:	483b      	ldr	r0, [pc, #236]	@ (80084c8 <middleware_variables_output+0x2d0>)
 80083da:	f7fb fa5f 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_4(!can_data_b4);
 80083de:	4b41      	ldr	r3, [pc, #260]	@ (80084e4 <middleware_variables_output+0x2ec>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	bf0c      	ite	eq
 80083e6:	2301      	moveq	r3, #1
 80083e8:	2300      	movne	r3, #0
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	2140      	movs	r1, #64	@ 0x40
 80083f0:	483d      	ldr	r0, [pc, #244]	@ (80084e8 <middleware_variables_output+0x2f0>)
 80083f2:	f7fb fa53 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_5(!can_data_b5);
 80083f6:	4b3d      	ldr	r3, [pc, #244]	@ (80084ec <middleware_variables_output+0x2f4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf0c      	ite	eq
 80083fe:	2301      	moveq	r3, #1
 8008400:	2300      	movne	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	2180      	movs	r1, #128	@ 0x80
 8008408:	4837      	ldr	r0, [pc, #220]	@ (80084e8 <middleware_variables_output+0x2f0>)
 800840a:	f7fb fa47 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_6(!can_data_b6);
 800840e:	4b38      	ldr	r3, [pc, #224]	@ (80084f0 <middleware_variables_output+0x2f8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	bf0c      	ite	eq
 8008416:	2301      	moveq	r3, #1
 8008418:	2300      	movne	r3, #0
 800841a:	b2db      	uxtb	r3, r3
 800841c:	461a      	mov	r2, r3
 800841e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008422:	4831      	ldr	r0, [pc, #196]	@ (80084e8 <middleware_variables_output+0x2f0>)
 8008424:	f7fb fa3a 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_7(!can_data_b7);
 8008428:	4b32      	ldr	r3, [pc, #200]	@ (80084f4 <middleware_variables_output+0x2fc>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	bf0c      	ite	eq
 8008430:	2301      	moveq	r3, #1
 8008432:	2300      	movne	r3, #0
 8008434:	b2db      	uxtb	r3, r3
 8008436:	461a      	mov	r2, r3
 8008438:	2102      	movs	r1, #2
 800843a:	482f      	ldr	r0, [pc, #188]	@ (80084f8 <middleware_variables_output+0x300>)
 800843c:	f7fb fa2e 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_8(!can_data_b8);
 8008440:	4b2e      	ldr	r3, [pc, #184]	@ (80084fc <middleware_variables_output+0x304>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	bf0c      	ite	eq
 8008448:	2301      	moveq	r3, #1
 800844a:	2300      	movne	r3, #0
 800844c:	b2db      	uxtb	r3, r3
 800844e:	461a      	mov	r2, r3
 8008450:	2104      	movs	r1, #4
 8008452:	4829      	ldr	r0, [pc, #164]	@ (80084f8 <middleware_variables_output+0x300>)
 8008454:	f7fb fa22 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_9(!can_data_b9);
 8008458:	4b29      	ldr	r3, [pc, #164]	@ (8008500 <middleware_variables_output+0x308>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	bf0c      	ite	eq
 8008460:	2301      	moveq	r3, #1
 8008462:	2300      	movne	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	2108      	movs	r1, #8
 800846a:	4823      	ldr	r0, [pc, #140]	@ (80084f8 <middleware_variables_output+0x300>)
 800846c:	f7fb fa16 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_10(!can_data_b10);
 8008470:	4b24      	ldr	r3, [pc, #144]	@ (8008504 <middleware_variables_output+0x30c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bf0c      	ite	eq
 8008478:	2301      	moveq	r3, #1
 800847a:	2300      	movne	r3, #0
 800847c:	b2db      	uxtb	r3, r3
 800847e:	461a      	mov	r2, r3
 8008480:	2110      	movs	r1, #16
 8008482:	481d      	ldr	r0, [pc, #116]	@ (80084f8 <middleware_variables_output+0x300>)
 8008484:	f7fb fa0a 	bl	800389c <HAL_GPIO_WritePin>
 8008488:	e03e      	b.n	8008508 <middleware_variables_output+0x310>
 800848a:	bf00      	nop
 800848c:	200012f8 	.word	0x200012f8
 8008490:	200012fc 	.word	0x200012fc
 8008494:	20001300 	.word	0x20001300
 8008498:	20001304 	.word	0x20001304
 800849c:	48000400 	.word	0x48000400
 80084a0:	20001308 	.word	0x20001308
 80084a4:	2000130c 	.word	0x2000130c
 80084a8:	20001310 	.word	0x20001310
 80084ac:	48000800 	.word	0x48000800
 80084b0:	20001314 	.word	0x20001314
 80084b4:	20001318 	.word	0x20001318
 80084b8:	2000131c 	.word	0x2000131c
 80084bc:	20001320 	.word	0x20001320
 80084c0:	20001324 	.word	0x20001324
 80084c4:	20001328 	.word	0x20001328
 80084c8:	48000c00 	.word	0x48000c00
 80084cc:	2000132c 	.word	0x2000132c
 80084d0:	20001330 	.word	0x20001330
 80084d4:	20001334 	.word	0x20001334
 80084d8:	20001338 	.word	0x20001338
 80084dc:	2000133c 	.word	0x2000133c
 80084e0:	20001340 	.word	0x20001340
 80084e4:	20001344 	.word	0x20001344
 80084e8:	48001400 	.word	0x48001400
 80084ec:	20001348 	.word	0x20001348
 80084f0:	2000134c 	.word	0x2000134c
 80084f4:	20001350 	.word	0x20001350
 80084f8:	48001800 	.word	0x48001800
 80084fc:	20001354 	.word	0x20001354
 8008500:	20001358 	.word	0x20001358
 8008504:	2000135c 	.word	0x2000135c
	 write_gpio_board_2_ch_11(!can_data_b11);
 8008508:	4b8a      	ldr	r3, [pc, #552]	@ (8008734 <middleware_variables_output+0x53c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	bf0c      	ite	eq
 8008510:	2301      	moveq	r3, #1
 8008512:	2300      	movne	r3, #0
 8008514:	b2db      	uxtb	r3, r3
 8008516:	461a      	mov	r2, r3
 8008518:	2120      	movs	r1, #32
 800851a:	4887      	ldr	r0, [pc, #540]	@ (8008738 <middleware_variables_output+0x540>)
 800851c:	f7fb f9be 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_12(!can_data_b12);
 8008520:	4b86      	ldr	r3, [pc, #536]	@ (800873c <middleware_variables_output+0x544>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	bf0c      	ite	eq
 8008528:	2301      	moveq	r3, #1
 800852a:	2300      	movne	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	461a      	mov	r2, r3
 8008530:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008534:	4880      	ldr	r0, [pc, #512]	@ (8008738 <middleware_variables_output+0x540>)
 8008536:	f7fb f9b1 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_13(!can_data_b13);
 800853a:	4b81      	ldr	r3, [pc, #516]	@ (8008740 <middleware_variables_output+0x548>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	bf0c      	ite	eq
 8008542:	2301      	moveq	r3, #1
 8008544:	2300      	movne	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800854e:	487a      	ldr	r0, [pc, #488]	@ (8008738 <middleware_variables_output+0x540>)
 8008550:	f7fb f9a4 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_14(!can_data_b14);
 8008554:	4b7b      	ldr	r3, [pc, #492]	@ (8008744 <middleware_variables_output+0x54c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	bf0c      	ite	eq
 800855c:	2301      	moveq	r3, #1
 800855e:	2300      	movne	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008568:	4873      	ldr	r0, [pc, #460]	@ (8008738 <middleware_variables_output+0x540>)
 800856a:	f7fb f997 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_15(!can_data_b15);
 800856e:	4b76      	ldr	r3, [pc, #472]	@ (8008748 <middleware_variables_output+0x550>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	bf0c      	ite	eq
 8008576:	2301      	moveq	r3, #1
 8008578:	2300      	movne	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008582:	486d      	ldr	r0, [pc, #436]	@ (8008738 <middleware_variables_output+0x540>)
 8008584:	f7fb f98a 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_2_ch_16(!can_data_b16);
 8008588:	4b70      	ldr	r3, [pc, #448]	@ (800874c <middleware_variables_output+0x554>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	bf0c      	ite	eq
 8008590:	2301      	moveq	r3, #1
 8008592:	2300      	movne	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	461a      	mov	r2, r3
 8008598:	2104      	movs	r1, #4
 800859a:	486d      	ldr	r0, [pc, #436]	@ (8008750 <middleware_variables_output+0x558>)
 800859c:	f7fb f97e 	bl	800389c <HAL_GPIO_WritePin>

	 /**RELAY_CONTROL BOARD_3**/
	 write_gpio_board_3_ch_1(!can_data_c1);
 80085a0:	4b6c      	ldr	r3, [pc, #432]	@ (8008754 <middleware_variables_output+0x55c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bf0c      	ite	eq
 80085a8:	2301      	moveq	r3, #1
 80085aa:	2300      	movne	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	2101      	movs	r1, #1
 80085b2:	4869      	ldr	r0, [pc, #420]	@ (8008758 <middleware_variables_output+0x560>)
 80085b4:	f7fb f972 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_2(!can_data_c2);
 80085b8:	4b68      	ldr	r3, [pc, #416]	@ (800875c <middleware_variables_output+0x564>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bf0c      	ite	eq
 80085c0:	2301      	moveq	r3, #1
 80085c2:	2300      	movne	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	2102      	movs	r1, #2
 80085ca:	4863      	ldr	r0, [pc, #396]	@ (8008758 <middleware_variables_output+0x560>)
 80085cc:	f7fb f966 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_3(!can_data_c3);
 80085d0:	4b63      	ldr	r3, [pc, #396]	@ (8008760 <middleware_variables_output+0x568>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bf0c      	ite	eq
 80085d8:	2301      	moveq	r3, #1
 80085da:	2300      	movne	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	2104      	movs	r1, #4
 80085e2:	485d      	ldr	r0, [pc, #372]	@ (8008758 <middleware_variables_output+0x560>)
 80085e4:	f7fb f95a 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_4(!can_data_c4);
 80085e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008764 <middleware_variables_output+0x56c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bf0c      	ite	eq
 80085f0:	2301      	moveq	r3, #1
 80085f2:	2300      	movne	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	2108      	movs	r1, #8
 80085fa:	4857      	ldr	r0, [pc, #348]	@ (8008758 <middleware_variables_output+0x560>)
 80085fc:	f7fb f94e 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_5(!can_data_c5);
 8008600:	4b59      	ldr	r3, [pc, #356]	@ (8008768 <middleware_variables_output+0x570>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	2110      	movs	r1, #16
 8008612:	4851      	ldr	r0, [pc, #324]	@ (8008758 <middleware_variables_output+0x560>)
 8008614:	f7fb f942 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_6(!can_data_c6);
 8008618:	4b54      	ldr	r3, [pc, #336]	@ (800876c <middleware_variables_output+0x574>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	bf0c      	ite	eq
 8008620:	2301      	moveq	r3, #1
 8008622:	2300      	movne	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	2120      	movs	r1, #32
 800862a:	484b      	ldr	r0, [pc, #300]	@ (8008758 <middleware_variables_output+0x560>)
 800862c:	f7fb f936 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_7(!can_data_c7);
 8008630:	4b4f      	ldr	r3, [pc, #316]	@ (8008770 <middleware_variables_output+0x578>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	bf0c      	ite	eq
 8008638:	2301      	moveq	r3, #1
 800863a:	2300      	movne	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	2140      	movs	r1, #64	@ 0x40
 8008642:	4845      	ldr	r0, [pc, #276]	@ (8008758 <middleware_variables_output+0x560>)
 8008644:	f7fb f92a 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_8(!can_data_c8);
 8008648:	4b4a      	ldr	r3, [pc, #296]	@ (8008774 <middleware_variables_output+0x57c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	461a      	mov	r2, r3
 8008658:	2180      	movs	r1, #128	@ 0x80
 800865a:	483f      	ldr	r0, [pc, #252]	@ (8008758 <middleware_variables_output+0x560>)
 800865c:	f7fb f91e 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_9(!can_data_c9);
 8008660:	4b45      	ldr	r3, [pc, #276]	@ (8008778 <middleware_variables_output+0x580>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	bf0c      	ite	eq
 8008668:	2301      	moveq	r3, #1
 800866a:	2300      	movne	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008674:	4838      	ldr	r0, [pc, #224]	@ (8008758 <middleware_variables_output+0x560>)
 8008676:	f7fb f911 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_10(!can_data_c10);
 800867a:	4b40      	ldr	r3, [pc, #256]	@ (800877c <middleware_variables_output+0x584>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	bf0c      	ite	eq
 8008682:	2301      	moveq	r3, #1
 8008684:	2300      	movne	r3, #0
 8008686:	b2db      	uxtb	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800868e:	4832      	ldr	r0, [pc, #200]	@ (8008758 <middleware_variables_output+0x560>)
 8008690:	f7fb f904 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_11(!can_data_c11);
 8008694:	4b3a      	ldr	r3, [pc, #232]	@ (8008780 <middleware_variables_output+0x588>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	bf0c      	ite	eq
 800869c:	2301      	moveq	r3, #1
 800869e:	2300      	movne	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	461a      	mov	r2, r3
 80086a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80086a8:	482b      	ldr	r0, [pc, #172]	@ (8008758 <middleware_variables_output+0x560>)
 80086aa:	f7fb f8f7 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_12(!can_data_c12);
 80086ae:	4b35      	ldr	r3, [pc, #212]	@ (8008784 <middleware_variables_output+0x58c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bf0c      	ite	eq
 80086b6:	2301      	moveq	r3, #1
 80086b8:	2300      	movne	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80086c2:	4825      	ldr	r0, [pc, #148]	@ (8008758 <middleware_variables_output+0x560>)
 80086c4:	f7fb f8ea 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_13(!can_data_c13);
 80086c8:	4b2f      	ldr	r3, [pc, #188]	@ (8008788 <middleware_variables_output+0x590>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bf0c      	ite	eq
 80086d0:	2301      	moveq	r3, #1
 80086d2:	2300      	movne	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80086dc:	481e      	ldr	r0, [pc, #120]	@ (8008758 <middleware_variables_output+0x560>)
 80086de:	f7fb f8dd 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_14(!can_data_c14);
 80086e2:	4b2a      	ldr	r3, [pc, #168]	@ (800878c <middleware_variables_output+0x594>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bf0c      	ite	eq
 80086ea:	2301      	moveq	r3, #1
 80086ec:	2300      	movne	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80086f6:	4818      	ldr	r0, [pc, #96]	@ (8008758 <middleware_variables_output+0x560>)
 80086f8:	f7fb f8d0 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_15(!can_data_c15);
 80086fc:	4b24      	ldr	r3, [pc, #144]	@ (8008790 <middleware_variables_output+0x598>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf0c      	ite	eq
 8008704:	2301      	moveq	r3, #1
 8008706:	2300      	movne	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008710:	4811      	ldr	r0, [pc, #68]	@ (8008758 <middleware_variables_output+0x560>)
 8008712:	f7fb f8c3 	bl	800389c <HAL_GPIO_WritePin>
	 write_gpio_board_3_ch_16(!can_data_c16);
 8008716:	4b1f      	ldr	r3, [pc, #124]	@ (8008794 <middleware_variables_output+0x59c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	bf0c      	ite	eq
 800871e:	2301      	moveq	r3, #1
 8008720:	2300      	movne	r3, #0
 8008722:	b2db      	uxtb	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800872a:	480b      	ldr	r0, [pc, #44]	@ (8008758 <middleware_variables_output+0x560>)
 800872c:	f7fb f8b6 	bl	800389c <HAL_GPIO_WritePin>



//		gpio_output_test();

}
 8008730:	bf00      	nop
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20001360 	.word	0x20001360
 8008738:	48001800 	.word	0x48001800
 800873c:	20001364 	.word	0x20001364
 8008740:	20001368 	.word	0x20001368
 8008744:	2000136c 	.word	0x2000136c
 8008748:	20001370 	.word	0x20001370
 800874c:	20001374 	.word	0x20001374
 8008750:	48001c00 	.word	0x48001c00
 8008754:	20001378 	.word	0x20001378
 8008758:	48001000 	.word	0x48001000
 800875c:	2000137c 	.word	0x2000137c
 8008760:	20001380 	.word	0x20001380
 8008764:	20001384 	.word	0x20001384
 8008768:	20001388 	.word	0x20001388
 800876c:	2000138c 	.word	0x2000138c
 8008770:	20001390 	.word	0x20001390
 8008774:	20001394 	.word	0x20001394
 8008778:	20001398 	.word	0x20001398
 800877c:	2000139c 	.word	0x2000139c
 8008780:	200013a0 	.word	0x200013a0
 8008784:	200013a4 	.word	0x200013a4
 8008788:	200013a8 	.word	0x200013a8
 800878c:	200013ac 	.word	0x200013ac
 8008790:	200013b0 	.word	0x200013b0
 8008794:	200013b4 	.word	0x200013b4

08008798 <can_control>:

void can_control(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
		can_main_init();
 800879c:	f7fe fb50 	bl	8006e40 <can_main_init>
		can_send_data(can_message_adc_values);
 80087a0:	2000      	movs	r0, #0
 80087a2:	f7fe fb8d 	bl	8006ec0 <can_send_data>
		vTaskDelay(1);
 80087a6:	2001      	movs	r0, #1
 80087a8:	f7fd fb0e 	bl	8005dc8 <vTaskDelay>
		can_send_data(can_message_battery_voltage);
 80087ac:	2001      	movs	r0, #1
 80087ae:	f7fe fb87 	bl	8006ec0 <can_send_data>
		vTaskDelay(1);
 80087b2:	2001      	movs	r0, #1
 80087b4:	f7fd fb08 	bl	8005dc8 <vTaskDelay>
		can_send_data(can_message_battery_voltage_gain_feedback);
 80087b8:	2002      	movs	r0, #2
 80087ba:	f7fe fb81 	bl	8006ec0 <can_send_data>
		vTaskDelay(1);
 80087be:	2001      	movs	r0, #1
 80087c0:	f7fd fb02 	bl	8005dc8 <vTaskDelay>
		can_send_data(can_message_gpio_inputs_flowrate);
 80087c4:	2004      	movs	r0, #4
 80087c6:	f7fe fb7b 	bl	8006ec0 <can_send_data>
		vTaskDelay(1);
 80087ca:	2001      	movs	r0, #1
 80087cc:	f7fd fafc 	bl	8005dc8 <vTaskDelay>
		can_send_data(can_message_relay_board_heartbeat);
 80087d0:	2006      	movs	r0, #6
 80087d2:	f7fe fb75 	bl	8006ec0 <can_send_data>
		vTaskDelay(1);
 80087d6:	2001      	movs	r0, #1
 80087d8:	f7fd faf6 	bl	8005dc8 <vTaskDelay>
		can_send_data(can_message_thermistors);
 80087dc:	2007      	movs	r0, #7
 80087de:	f7fe fb6f 	bl	8006ec0 <can_send_data>
		vTaskDelay(1);
 80087e2:	2001      	movs	r0, #1
 80087e4:	f7fd faf0 	bl	8005dc8 <vTaskDelay>
}
 80087e8:	bf00      	nop
 80087ea:	bd80      	pop	{r7, pc}

080087ec <flowrate_time>:

void flowrate_time(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
	 current_time_1 = HAL_GetTick();
 80087f0:	f7f8 ffee 	bl	80017d0 <HAL_GetTick>
 80087f4:	4603      	mov	r3, r0
 80087f6:	4a17      	ldr	r2, [pc, #92]	@ (8008854 <flowrate_time+0x68>)
 80087f8:	6013      	str	r3, [r2, #0]

	 if(current_time_1 >= (cloop_time_1 + 1000))
 80087fa:	4b17      	ldr	r3, [pc, #92]	@ (8008858 <flowrate_time+0x6c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8008802:	4b14      	ldr	r3, [pc, #80]	@ (8008854 <flowrate_time+0x68>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d80a      	bhi.n	8008820 <flowrate_time+0x34>
	 {
		 cloop_time_1 = current_time_1;
 800880a:	4b12      	ldr	r3, [pc, #72]	@ (8008854 <flowrate_time+0x68>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a12      	ldr	r2, [pc, #72]	@ (8008858 <flowrate_time+0x6c>)
 8008810:	6013      	str	r3, [r2, #0]
		 Flowrate_1 = pulse_1;
 8008812:	4b12      	ldr	r3, [pc, #72]	@ (800885c <flowrate_time+0x70>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a12      	ldr	r2, [pc, #72]	@ (8008860 <flowrate_time+0x74>)
 8008818:	6013      	str	r3, [r2, #0]
		 pulse_1 = 0;
 800881a:	4b10      	ldr	r3, [pc, #64]	@ (800885c <flowrate_time+0x70>)
 800881c:	2200      	movs	r2, #0
 800881e:	601a      	str	r2, [r3, #0]
	 }
	 current_time_2 = HAL_GetTick();
 8008820:	f7f8 ffd6 	bl	80017d0 <HAL_GetTick>
 8008824:	4603      	mov	r3, r0
 8008826:	4a0f      	ldr	r2, [pc, #60]	@ (8008864 <flowrate_time+0x78>)
 8008828:	6013      	str	r3, [r2, #0]

	 if(current_time_2 >= (cloop_time_2 + 1000))
 800882a:	4b0f      	ldr	r3, [pc, #60]	@ (8008868 <flowrate_time+0x7c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8008832:	4b0c      	ldr	r3, [pc, #48]	@ (8008864 <flowrate_time+0x78>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d80a      	bhi.n	8008850 <flowrate_time+0x64>
	 {
		 cloop_time_2 = current_time_2;
 800883a:	4b0a      	ldr	r3, [pc, #40]	@ (8008864 <flowrate_time+0x78>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a0a      	ldr	r2, [pc, #40]	@ (8008868 <flowrate_time+0x7c>)
 8008840:	6013      	str	r3, [r2, #0]
		 Flowrate_2 = pulse_2;
 8008842:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <flowrate_time+0x80>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a0a      	ldr	r2, [pc, #40]	@ (8008870 <flowrate_time+0x84>)
 8008848:	6013      	str	r3, [r2, #0]
		 pulse_2 = 0;
 800884a:	4b08      	ldr	r3, [pc, #32]	@ (800886c <flowrate_time+0x80>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
	 }
}
 8008850:	bf00      	nop
 8008852:	bd80      	pop	{r7, pc}
 8008854:	200003ac 	.word	0x200003ac
 8008858:	200003b0 	.word	0x200003b0
 800885c:	20001440 	.word	0x20001440
 8008860:	200003b4 	.word	0x200003b4
 8008864:	200003b8 	.word	0x200003b8
 8008868:	200003bc 	.word	0x200003bc
 800886c:	20001444 	.word	0x20001444
 8008870:	200003c0 	.word	0x200003c0

08008874 <power_calculate>:
 * @param		number
 * @param		power
 * @return		power of the number calculated
 */
uint64_t power_calculate(uint8_t number, uint8_t power)
{
 8008874:	b4f0      	push	{r4, r5, r6, r7}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	4606      	mov	r6, r0
 800887c:	4608      	mov	r0, r1
 800887e:	4631      	mov	r1, r6
 8008880:	71f9      	strb	r1, [r7, #7]
 8008882:	4601      	mov	r1, r0
 8008884:	71b9      	strb	r1, [r7, #6]
	uint8_t i = 0;
 8008886:	2100      	movs	r1, #0
 8008888:	75f9      	strb	r1, [r7, #23]
	uint64_t result = 1;
 800888a:	f04f 0001 	mov.w	r0, #1
 800888e:	f04f 0100 	mov.w	r1, #0
 8008892:	e9c7 0102 	strd	r0, r1, [r7, #8]
	for(i=0;i<power;i++)
 8008896:	2100      	movs	r1, #0
 8008898:	75f9      	strb	r1, [r7, #23]
 800889a:	e016      	b.n	80088ca <power_calculate+0x56>
	{
		result *= number;
 800889c:	79f9      	ldrb	r1, [r7, #7]
 800889e:	2000      	movs	r0, #0
 80088a0:	460c      	mov	r4, r1
 80088a2:	4605      	mov	r5, r0
 80088a4:	68f9      	ldr	r1, [r7, #12]
 80088a6:	fb04 f001 	mul.w	r0, r4, r1
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	fb05 f101 	mul.w	r1, r5, r1
 80088b0:	4401      	add	r1, r0
 80088b2:	68b8      	ldr	r0, [r7, #8]
 80088b4:	fba0 2304 	umull	r2, r3, r0, r4
 80088b8:	4419      	add	r1, r3
 80088ba:	460b      	mov	r3, r1
 80088bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80088c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<power;i++)
 80088c4:	7df9      	ldrb	r1, [r7, #23]
 80088c6:	3101      	adds	r1, #1
 80088c8:	75f9      	strb	r1, [r7, #23]
 80088ca:	7df8      	ldrb	r0, [r7, #23]
 80088cc:	79b9      	ldrb	r1, [r7, #6]
 80088ce:	4288      	cmp	r0, r1
 80088d0:	d3e4      	bcc.n	800889c <power_calculate+0x28>
	}
	return result;	
 80088d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80088d6:	4610      	mov	r0, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bcf0      	pop	{r4, r5, r6, r7}
 80088e0:	4770      	bx	lr
	...

080088e4 <battery_voltage>:
 * 4136-3.36v
 *2.6883645V -2.8416324V
 */

void battery_voltage(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0

	voltage_1 = mapADCValueToVoltage(adc_raw_data_1[adc1_1])*calib_1*calib_can_1;
 80088e8:	4b1e      	ldr	r3, [pc, #120]	@ (8008964 <battery_voltage+0x80>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 f84d 	bl	800898c <mapADCValueToVoltage>
 80088f2:	eeb0 7a40 	vmov.f32	s14, s0
 80088f6:	4b1c      	ldr	r3, [pc, #112]	@ (8008968 <battery_voltage+0x84>)
 80088f8:	edd3 7a00 	vldr	s15, [r3]
 80088fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008900:	4b1a      	ldr	r3, [pc, #104]	@ (800896c <battery_voltage+0x88>)
 8008902:	edd3 7a00 	vldr	s15, [r3]
 8008906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890a:	4b19      	ldr	r3, [pc, #100]	@ (8008970 <battery_voltage+0x8c>)
 800890c:	edc3 7a00 	vstr	s15, [r3]

	voltage_2 = mapADCValueToVoltage(adc_raw_data_1[adc1_2])*calib_2*calib_can_2;
 8008910:	4b14      	ldr	r3, [pc, #80]	@ (8008964 <battery_voltage+0x80>)
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	4618      	mov	r0, r3
 8008916:	f000 f839 	bl	800898c <mapADCValueToVoltage>
 800891a:	eeb0 7a40 	vmov.f32	s14, s0
 800891e:	4b15      	ldr	r3, [pc, #84]	@ (8008974 <battery_voltage+0x90>)
 8008920:	edd3 7a00 	vldr	s15, [r3]
 8008924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008928:	4b13      	ldr	r3, [pc, #76]	@ (8008978 <battery_voltage+0x94>)
 800892a:	edd3 7a00 	vldr	s15, [r3]
 800892e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008932:	4b12      	ldr	r3, [pc, #72]	@ (800897c <battery_voltage+0x98>)
 8008934:	edc3 7a00 	vstr	s15, [r3]

	voltage_3 = mapADCValueToVoltage(adc_raw_data_1[adc1_3])*calib_3*calib_can_3;
 8008938:	4b0a      	ldr	r3, [pc, #40]	@ (8008964 <battery_voltage+0x80>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 f825 	bl	800898c <mapADCValueToVoltage>
 8008942:	eeb0 7a40 	vmov.f32	s14, s0
 8008946:	4b0e      	ldr	r3, [pc, #56]	@ (8008980 <battery_voltage+0x9c>)
 8008948:	edd3 7a00 	vldr	s15, [r3]
 800894c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008950:	4b0c      	ldr	r3, [pc, #48]	@ (8008984 <battery_voltage+0xa0>)
 8008952:	edd3 7a00 	vldr	s15, [r3]
 8008956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895a:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <battery_voltage+0xa4>)
 800895c:	edc3 7a00 	vstr	s15, [r3]

}
 8008960:	bf00      	nop
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20001200 	.word	0x20001200
 8008968:	20000090 	.word	0x20000090
 800896c:	20000084 	.word	0x20000084
 8008970:	200014a0 	.word	0x200014a0
 8008974:	20000094 	.word	0x20000094
 8008978:	20000088 	.word	0x20000088
 800897c:	200014a4 	.word	0x200014a4
 8008980:	20000098 	.word	0x20000098
 8008984:	2000008c 	.word	0x2000008c
 8008988:	200014a8 	.word	0x200014a8

0800898c <mapADCValueToVoltage>:
float mapADCValueToVoltage(uint32_t adcValue)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]

    int size = sizeof(adcValues) / sizeof(adcValues[0]);
 8008994:	23a3      	movs	r3, #163	@ 0xa3
 8008996:	613b      	str	r3, [r7, #16]

    if (adcValue <= adcValues[0])
 8008998:	2200      	movs	r2, #0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4293      	cmp	r3, r2
 800899e:	d802      	bhi.n	80089a6 <mapADCValueToVoltage+0x1a>
    {
        return voltages[0];
 80089a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80089a4:	e063      	b.n	8008a6e <mapADCValueToVoltage+0xe2>
    }

    if (adcValue >= adcValues[size - 1])
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	4a34      	ldr	r2, [pc, #208]	@ (8008a7c <mapADCValueToVoltage+0xf0>)
 80089ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d307      	bcc.n	80089c6 <mapADCValueToVoltage+0x3a>
    {
        return voltages[size - 1];
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	4a31      	ldr	r2, [pc, #196]	@ (8008a80 <mapADCValueToVoltage+0xf4>)
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	edd3 7a00 	vldr	s15, [r3]
 80089c4:	e053      	b.n	8008a6e <mapADCValueToVoltage+0xe2>
    }

    for (int i = 0; i < size - 1; i++)
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e049      	b.n	8008a60 <mapADCValueToVoltage+0xd4>
    {
        if (adcValue >= adcValues[i] && adcValue <= adcValues[i + 1])
 80089cc:	4a2b      	ldr	r2, [pc, #172]	@ (8008a7c <mapADCValueToVoltage+0xf0>)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d33f      	bcc.n	8008a5a <mapADCValueToVoltage+0xce>
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	3301      	adds	r3, #1
 80089de:	4a27      	ldr	r2, [pc, #156]	@ (8008a7c <mapADCValueToVoltage+0xf0>)
 80089e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d837      	bhi.n	8008a5a <mapADCValueToVoltage+0xce>
        {
            float slope = (voltages[i + 1] - voltages[i]) / (adcValues[i + 1] - adcValues[i]);
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	3301      	adds	r3, #1
 80089ee:	4a24      	ldr	r2, [pc, #144]	@ (8008a80 <mapADCValueToVoltage+0xf4>)
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	ed93 7a00 	vldr	s14, [r3]
 80089f8:	4a21      	ldr	r2, [pc, #132]	@ (8008a80 <mapADCValueToVoltage+0xf4>)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	edd3 7a00 	vldr	s15, [r3]
 8008a04:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8008a7c <mapADCValueToVoltage+0xf0>)
 8008a0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a12:	491a      	ldr	r1, [pc, #104]	@ (8008a7c <mapADCValueToVoltage+0xf0>)
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	ee07 3a90 	vmov	s15, r3
 8008a20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a28:	edc7 7a03 	vstr	s15, [r7, #12]
            return voltages[i] + slope * (adcValue - adcValues[i]);
 8008a2c:	4a14      	ldr	r2, [pc, #80]	@ (8008a80 <mapADCValueToVoltage+0xf4>)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	ed93 7a00 	vldr	s14, [r3]
 8008a38:	4a10      	ldr	r2, [pc, #64]	@ (8008a7c <mapADCValueToVoltage+0xf0>)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	ee07 3a90 	vmov	s15, r3
 8008a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a58:	e009      	b.n	8008a6e <mapADCValueToVoltage+0xe2>
    for (int i = 0; i < size - 1; i++)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	dbb0      	blt.n	80089cc <mapADCValueToVoltage+0x40>
        }
    }

    return 0.0; // Default return value in case of an error
 8008a6a:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8008a84 <mapADCValueToVoltage+0xf8>
}
 8008a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	0800a1b4 	.word	0x0800a1b4
 8008a80:	08009f28 	.word	0x08009f28
 8008a84:	00000000 	.word	0x00000000

08008a88 <temp_Sensor_1>:


void temp_Sensor_1(void)
{
 8008a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
	float temp_out;
	float temperature_out, T_out, therm_res_ln_out;
    temp_out =  adc_raw_data_1[adc1_4];
 8008a90:	4b6f      	ldr	r3, [pc, #444]	@ (8008c50 <temp_Sensor_1+0x1c8>)
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	ee07 3a90 	vmov	s15, r3
 8008a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9c:	edc7 7a03 	vstr	s15, [r7, #12]
    temp_out = ( (temp_out * 3.30) / 4080.0 );
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7f7 fd01 	bl	80004a8 <__aeabi_f2d>
 8008aa6:	a35e      	add	r3, pc, #376	@ (adr r3, 8008c20 <temp_Sensor_1+0x198>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fd54 	bl	8000558 <__aeabi_dmul>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	a35b      	add	r3, pc, #364	@ (adr r3, 8008c28 <temp_Sensor_1+0x1a0>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f7 fe75 	bl	80007ac <__aeabi_ddiv>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	f7f7 fff5 	bl	8000ab8 <__aeabi_d2f>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	60fb      	str	r3, [r7, #12]
    temperature_out = ((temp_out*10)/(3.30 - temp_out))/2; /* Resistance in kilo ohms */
 8008ad2:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ad6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ade:	ee17 0a90 	vmov	r0, s15
 8008ae2:	f7f7 fce1 	bl	80004a8 <__aeabi_f2d>
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	460d      	mov	r5, r1
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f7f7 fcdc 	bl	80004a8 <__aeabi_f2d>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	a14a      	add	r1, pc, #296	@ (adr r1, 8008c20 <temp_Sensor_1+0x198>)
 8008af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afa:	f7f7 fb75 	bl	80001e8 <__aeabi_dsub>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	f7f7 fe51 	bl	80007ac <__aeabi_ddiv>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4619      	mov	r1, r3
 8008b12:	f04f 0200 	mov.w	r2, #0
 8008b16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b1a:	f7f7 fe47 	bl	80007ac <__aeabi_ddiv>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4610      	mov	r0, r2
 8008b24:	4619      	mov	r1, r3
 8008b26:	f7f7 ffc7 	bl	8000ab8 <__aeabi_d2f>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	60bb      	str	r3, [r7, #8]
    temperature_out = temperature_out * 1000 ;
 8008b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008b32:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8008c54 <temp_Sensor_1+0x1cc>
 8008b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b3a:	edc7 7a02 	vstr	s15, [r7, #8]
    therm_res_ln_out = log(temperature_out);
 8008b3e:	68b8      	ldr	r0, [r7, #8]
 8008b40:	f7f7 fcb2 	bl	80004a8 <__aeabi_f2d>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	ec43 2b10 	vmov	d0, r2, r3
 8008b4c:	f000 fb50 	bl	80091f0 <log>
 8008b50:	ec53 2b10 	vmov	r2, r3, d0
 8008b54:	4610      	mov	r0, r2
 8008b56:	4619      	mov	r1, r3
 8008b58:	f7f7 ffae 	bl	8000ab8 <__aeabi_d2f>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	607b      	str	r3, [r7, #4]
    T_out = ( 1 / ( 0.001125308852122 + ( 0.000234711863267 * therm_res_ln_out ) + ( 0.000000088063516 * therm_res_ln_out * therm_res_ln_out * therm_res_ln_out ) ) ); /* Temperature in Kelvin */
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7f7 fca1 	bl	80004a8 <__aeabi_f2d>
 8008b66:	a332      	add	r3, pc, #200	@ (adr r3, 8008c30 <temp_Sensor_1+0x1a8>)
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f7f7 fcf4 	bl	8000558 <__aeabi_dmul>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4610      	mov	r0, r2
 8008b76:	4619      	mov	r1, r3
 8008b78:	a32f      	add	r3, pc, #188	@ (adr r3, 8008c38 <temp_Sensor_1+0x1b0>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 fb35 	bl	80001ec <__adddf3>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4614      	mov	r4, r2
 8008b88:	461d      	mov	r5, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7f7 fc8c 	bl	80004a8 <__aeabi_f2d>
 8008b90:	a32b      	add	r3, pc, #172	@ (adr r3, 8008c40 <temp_Sensor_1+0x1b8>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fcdf 	bl	8000558 <__aeabi_dmul>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4690      	mov	r8, r2
 8008ba0:	4699      	mov	r9, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7f7 fc80 	bl	80004a8 <__aeabi_f2d>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4640      	mov	r0, r8
 8008bae:	4649      	mov	r1, r9
 8008bb0:	f7f7 fcd2 	bl	8000558 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4690      	mov	r8, r2
 8008bba:	4699      	mov	r9, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7f7 fc73 	bl	80004a8 <__aeabi_f2d>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 fcc5 	bl	8000558 <__aeabi_dmul>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7f7 fb09 	bl	80001ec <__adddf3>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	f04f 0000 	mov.w	r0, #0
 8008be2:	491d      	ldr	r1, [pc, #116]	@ (8008c58 <temp_Sensor_1+0x1d0>)
 8008be4:	f7f7 fde2 	bl	80007ac <__aeabi_ddiv>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4610      	mov	r0, r2
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f7f7 ff62 	bl	8000ab8 <__aeabi_d2f>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	603b      	str	r3, [r7, #0]
    temp_10k_Sensor_1 = T_out - 273.15 ;
 8008bf8:	6838      	ldr	r0, [r7, #0]
 8008bfa:	f7f7 fc55 	bl	80004a8 <__aeabi_f2d>
 8008bfe:	a312      	add	r3, pc, #72	@ (adr r3, 8008c48 <temp_Sensor_1+0x1c0>)
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f7f7 faf0 	bl	80001e8 <__aeabi_dsub>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4913      	ldr	r1, [pc, #76]	@ (8008c5c <temp_Sensor_1+0x1d4>)
 8008c0e:	e9c1 2300 	strd	r2, r3, [r1]

}
 8008c12:	bf00      	nop
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008c1c:	f3af 8000 	nop.w
 8008c20:	66666666 	.word	0x66666666
 8008c24:	400a6666 	.word	0x400a6666
 8008c28:	00000000 	.word	0x00000000
 8008c2c:	40afe000 	.word	0x40afe000
 8008c30:	8dad9646 	.word	0x8dad9646
 8008c34:	3f2ec39f 	.word	0x3f2ec39f
 8008c38:	2defd570 	.word	0x2defd570
 8008c3c:	3f526fe3 	.word	0x3f526fe3
 8008c40:	c1d7b06c 	.word	0xc1d7b06c
 8008c44:	3e77a3ad 	.word	0x3e77a3ad
 8008c48:	66666666 	.word	0x66666666
 8008c4c:	40711266 	.word	0x40711266
 8008c50:	20001200 	.word	0x20001200
 8008c54:	447a0000 	.word	0x447a0000
 8008c58:	3ff00000 	.word	0x3ff00000
 8008c5c:	20001490 	.word	0x20001490

08008c60 <temp_Sensor_2>:

void temp_Sensor_2(void)
{
 8008c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0

    float temp_in;
    float temperature, T_IN, therm_res_ln;
    temp_in = adc_raw_data_1[adc1_5];
 8008c68:	4b6f      	ldr	r3, [pc, #444]	@ (8008e28 <temp_Sensor_2+0x1c8>)
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	ee07 3a90 	vmov	s15, r3
 8008c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c74:	edc7 7a03 	vstr	s15, [r7, #12]
    temp_in = ( (temp_in * 3.30) / 4080.0 );
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7f7 fc15 	bl	80004a8 <__aeabi_f2d>
 8008c7e:	a35e      	add	r3, pc, #376	@ (adr r3, 8008df8 <temp_Sensor_2+0x198>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 fc68 	bl	8000558 <__aeabi_dmul>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4619      	mov	r1, r3
 8008c90:	a35b      	add	r3, pc, #364	@ (adr r3, 8008e00 <temp_Sensor_2+0x1a0>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fd89 	bl	80007ac <__aeabi_ddiv>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f7f7 ff09 	bl	8000ab8 <__aeabi_d2f>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	60fb      	str	r3, [r7, #12]
    temperature = ((temp_in*10)/(3.30 - temp_in))/2; /* Resistance in kilo ohms */
 8008caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8008cae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cb6:	ee17 0a90 	vmov	r0, s15
 8008cba:	f7f7 fbf5 	bl	80004a8 <__aeabi_f2d>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7f7 fbf0 	bl	80004a8 <__aeabi_f2d>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	a14a      	add	r1, pc, #296	@ (adr r1, 8008df8 <temp_Sensor_2+0x198>)
 8008cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd2:	f7f7 fa89 	bl	80001e8 <__aeabi_dsub>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4620      	mov	r0, r4
 8008cdc:	4629      	mov	r1, r5
 8008cde:	f7f7 fd65 	bl	80007ac <__aeabi_ddiv>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	4619      	mov	r1, r3
 8008cea:	f04f 0200 	mov.w	r2, #0
 8008cee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008cf2:	f7f7 fd5b 	bl	80007ac <__aeabi_ddiv>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f7f7 fedb 	bl	8000ab8 <__aeabi_d2f>
 8008d02:	4603      	mov	r3, r0
 8008d04:	60bb      	str	r3, [r7, #8]
    temperature = temperature * 1000 ;
 8008d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8008d0a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8008e2c <temp_Sensor_2+0x1cc>
 8008d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d12:	edc7 7a02 	vstr	s15, [r7, #8]
    therm_res_ln = log(temperature);
 8008d16:	68b8      	ldr	r0, [r7, #8]
 8008d18:	f7f7 fbc6 	bl	80004a8 <__aeabi_f2d>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	ec43 2b10 	vmov	d0, r2, r3
 8008d24:	f000 fa64 	bl	80091f0 <log>
 8008d28:	ec53 2b10 	vmov	r2, r3, d0
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f7f7 fec2 	bl	8000ab8 <__aeabi_d2f>
 8008d34:	4603      	mov	r3, r0
 8008d36:	607b      	str	r3, [r7, #4]
    T_IN = ( 1 / ( 0.001125308852122 + ( 0.000234711863267 * therm_res_ln ) + ( 0.000000088063516 * therm_res_ln * therm_res_ln * therm_res_ln ) ) ); /* Temperature in Kelvin */
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7f7 fbb5 	bl	80004a8 <__aeabi_f2d>
 8008d3e:	a332      	add	r3, pc, #200	@ (adr r3, 8008e08 <temp_Sensor_2+0x1a8>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fc08 	bl	8000558 <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4619      	mov	r1, r3
 8008d50:	a32f      	add	r3, pc, #188	@ (adr r3, 8008e10 <temp_Sensor_2+0x1b0>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 fa49 	bl	80001ec <__adddf3>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4614      	mov	r4, r2
 8008d60:	461d      	mov	r5, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7f7 fba0 	bl	80004a8 <__aeabi_f2d>
 8008d68:	a32b      	add	r3, pc, #172	@ (adr r3, 8008e18 <temp_Sensor_2+0x1b8>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	f7f7 fbf3 	bl	8000558 <__aeabi_dmul>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4690      	mov	r8, r2
 8008d78:	4699      	mov	r9, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7f7 fb94 	bl	80004a8 <__aeabi_f2d>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4640      	mov	r0, r8
 8008d86:	4649      	mov	r1, r9
 8008d88:	f7f7 fbe6 	bl	8000558 <__aeabi_dmul>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4690      	mov	r8, r2
 8008d92:	4699      	mov	r9, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7f7 fb87 	bl	80004a8 <__aeabi_f2d>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	f7f7 fbd9 	bl	8000558 <__aeabi_dmul>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4620      	mov	r0, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7f7 fa1d 	bl	80001ec <__adddf3>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	f04f 0000 	mov.w	r0, #0
 8008dba:	491d      	ldr	r1, [pc, #116]	@ (8008e30 <temp_Sensor_2+0x1d0>)
 8008dbc:	f7f7 fcf6 	bl	80007ac <__aeabi_ddiv>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	f7f7 fe76 	bl	8000ab8 <__aeabi_d2f>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	603b      	str	r3, [r7, #0]
    temp_10k_Sensor_2 = T_IN - 273.15;
 8008dd0:	6838      	ldr	r0, [r7, #0]
 8008dd2:	f7f7 fb69 	bl	80004a8 <__aeabi_f2d>
 8008dd6:	a312      	add	r3, pc, #72	@ (adr r3, 8008e20 <temp_Sensor_2+0x1c0>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f7f7 fa04 	bl	80001e8 <__aeabi_dsub>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4913      	ldr	r1, [pc, #76]	@ (8008e34 <temp_Sensor_2+0x1d4>)
 8008de6:	e9c1 2300 	strd	r2, r3, [r1]

}
 8008dea:	bf00      	nop
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008df4:	f3af 8000 	nop.w
 8008df8:	66666666 	.word	0x66666666
 8008dfc:	400a6666 	.word	0x400a6666
 8008e00:	00000000 	.word	0x00000000
 8008e04:	40afe000 	.word	0x40afe000
 8008e08:	8dad9646 	.word	0x8dad9646
 8008e0c:	3f2ec39f 	.word	0x3f2ec39f
 8008e10:	2defd570 	.word	0x2defd570
 8008e14:	3f526fe3 	.word	0x3f526fe3
 8008e18:	c1d7b06c 	.word	0xc1d7b06c
 8008e1c:	3e77a3ad 	.word	0x3e77a3ad
 8008e20:	66666666 	.word	0x66666666
 8008e24:	40711266 	.word	0x40711266
 8008e28:	20001200 	.word	0x20001200
 8008e2c:	447a0000 	.word	0x447a0000
 8008e30:	3ff00000 	.word	0x3ff00000
 8008e34:	20001488 	.word	0x20001488

08008e38 <temp_Sensor_3>:

void temp_Sensor_3(void)
{
 8008e38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
	float temp_amb;
    float temperature_amb, T_amb, therm_res_ln_amb;
    temp_amb =  adc_raw_data_1[adc1_6];
 8008e40:	4b6f      	ldr	r3, [pc, #444]	@ (8009000 <temp_Sensor_3+0x1c8>)
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	ee07 3a90 	vmov	s15, r3
 8008e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4c:	edc7 7a03 	vstr	s15, [r7, #12]
    temp_amb = ( (temp_amb * 3.30) / 4080.0 );
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7f7 fb29 	bl	80004a8 <__aeabi_f2d>
 8008e56:	a35e      	add	r3, pc, #376	@ (adr r3, 8008fd0 <temp_Sensor_3+0x198>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f7f7 fb7c 	bl	8000558 <__aeabi_dmul>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4610      	mov	r0, r2
 8008e66:	4619      	mov	r1, r3
 8008e68:	a35b      	add	r3, pc, #364	@ (adr r3, 8008fd8 <temp_Sensor_3+0x1a0>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	f7f7 fc9d 	bl	80007ac <__aeabi_ddiv>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4610      	mov	r0, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7f7 fe1d 	bl	8000ab8 <__aeabi_d2f>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	60fb      	str	r3, [r7, #12]
    temperature_amb = ((temp_amb*10)/(3.30 - temp_amb))/2; /* Resistance in kilo ohms */
 8008e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e86:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e8e:	ee17 0a90 	vmov	r0, s15
 8008e92:	f7f7 fb09 	bl	80004a8 <__aeabi_f2d>
 8008e96:	4604      	mov	r4, r0
 8008e98:	460d      	mov	r5, r1
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7f7 fb04 	bl	80004a8 <__aeabi_f2d>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	a14a      	add	r1, pc, #296	@ (adr r1, 8008fd0 <temp_Sensor_3+0x198>)
 8008ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eaa:	f7f7 f99d 	bl	80001e8 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	f7f7 fc79 	bl	80007ac <__aeabi_ddiv>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f04f 0200 	mov.w	r2, #0
 8008ec6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008eca:	f7f7 fc6f 	bl	80007ac <__aeabi_ddiv>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	f7f7 fdef 	bl	8000ab8 <__aeabi_d2f>
 8008eda:	4603      	mov	r3, r0
 8008edc:	60bb      	str	r3, [r7, #8]
    temperature_amb = temperature_amb * 1000 ;
 8008ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ee2:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8009004 <temp_Sensor_3+0x1cc>
 8008ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008eea:	edc7 7a02 	vstr	s15, [r7, #8]
    therm_res_ln_amb = log(temperature_amb);
 8008eee:	68b8      	ldr	r0, [r7, #8]
 8008ef0:	f7f7 fada 	bl	80004a8 <__aeabi_f2d>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	ec43 2b10 	vmov	d0, r2, r3
 8008efc:	f000 f978 	bl	80091f0 <log>
 8008f00:	ec53 2b10 	vmov	r2, r3, d0
 8008f04:	4610      	mov	r0, r2
 8008f06:	4619      	mov	r1, r3
 8008f08:	f7f7 fdd6 	bl	8000ab8 <__aeabi_d2f>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	607b      	str	r3, [r7, #4]
    T_amb = ( 1 / ( 0.001125308852122 + ( 0.000234711863267 * therm_res_ln_amb ) + ( 0.000000088063516 * therm_res_ln_amb * therm_res_ln_amb * therm_res_ln_amb ) ) ); /* Temperature in Kelvin */
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7f7 fac9 	bl	80004a8 <__aeabi_f2d>
 8008f16:	a332      	add	r3, pc, #200	@ (adr r3, 8008fe0 <temp_Sensor_3+0x1a8>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	f7f7 fb1c 	bl	8000558 <__aeabi_dmul>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4610      	mov	r0, r2
 8008f26:	4619      	mov	r1, r3
 8008f28:	a32f      	add	r3, pc, #188	@ (adr r3, 8008fe8 <temp_Sensor_3+0x1b0>)
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	f7f7 f95d 	bl	80001ec <__adddf3>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4614      	mov	r4, r2
 8008f38:	461d      	mov	r5, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7f7 fab4 	bl	80004a8 <__aeabi_f2d>
 8008f40:	a32b      	add	r3, pc, #172	@ (adr r3, 8008ff0 <temp_Sensor_3+0x1b8>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f7f7 fb07 	bl	8000558 <__aeabi_dmul>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4690      	mov	r8, r2
 8008f50:	4699      	mov	r9, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7f7 faa8 	bl	80004a8 <__aeabi_f2d>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	4649      	mov	r1, r9
 8008f60:	f7f7 fafa 	bl	8000558 <__aeabi_dmul>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4690      	mov	r8, r2
 8008f6a:	4699      	mov	r9, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7f7 fa9b 	bl	80004a8 <__aeabi_f2d>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4640      	mov	r0, r8
 8008f78:	4649      	mov	r1, r9
 8008f7a:	f7f7 faed 	bl	8000558 <__aeabi_dmul>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4620      	mov	r0, r4
 8008f84:	4629      	mov	r1, r5
 8008f86:	f7f7 f931 	bl	80001ec <__adddf3>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	f04f 0000 	mov.w	r0, #0
 8008f92:	491d      	ldr	r1, [pc, #116]	@ (8009008 <temp_Sensor_3+0x1d0>)
 8008f94:	f7f7 fc0a 	bl	80007ac <__aeabi_ddiv>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	f7f7 fd8a 	bl	8000ab8 <__aeabi_d2f>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	603b      	str	r3, [r7, #0]
    temp_10k_Sensor_3 = T_amb - 273.15;
 8008fa8:	6838      	ldr	r0, [r7, #0]
 8008faa:	f7f7 fa7d 	bl	80004a8 <__aeabi_f2d>
 8008fae:	a312      	add	r3, pc, #72	@ (adr r3, 8008ff8 <temp_Sensor_3+0x1c0>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 f918 	bl	80001e8 <__aeabi_dsub>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4913      	ldr	r1, [pc, #76]	@ (800900c <temp_Sensor_3+0x1d4>)
 8008fbe:	e9c1 2300 	strd	r2, r3, [r1]



}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008fcc:	f3af 8000 	nop.w
 8008fd0:	66666666 	.word	0x66666666
 8008fd4:	400a6666 	.word	0x400a6666
 8008fd8:	00000000 	.word	0x00000000
 8008fdc:	40afe000 	.word	0x40afe000
 8008fe0:	8dad9646 	.word	0x8dad9646
 8008fe4:	3f2ec39f 	.word	0x3f2ec39f
 8008fe8:	2defd570 	.word	0x2defd570
 8008fec:	3f526fe3 	.word	0x3f526fe3
 8008ff0:	c1d7b06c 	.word	0xc1d7b06c
 8008ff4:	3e77a3ad 	.word	0x3e77a3ad
 8008ff8:	66666666 	.word	0x66666666
 8008ffc:	40711266 	.word	0x40711266
 8009000:	20001200 	.word	0x20001200
 8009004:	447a0000 	.word	0x447a0000
 8009008:	3ff00000 	.word	0x3ff00000
 800900c:	20001498 	.word	0x20001498

08009010 <adc_control>:
void adc_control(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
	adc_conversion_1();
 8009014:	f7fd fe8a 	bl	8006d2c <adc_conversion_1>
	battery_voltage();
 8009018:	f7ff fc64 	bl	80088e4 <battery_voltage>
	temp_Sensor_1();
 800901c:	f7ff fd34 	bl	8008a88 <temp_Sensor_1>
	temp_Sensor_2();
 8009020:	f7ff fe1e 	bl	8008c60 <temp_Sensor_2>
	temp_Sensor_3();
 8009024:	f7ff ff08 	bl	8008e38 <temp_Sensor_3>
//	ACS712_20A();


}
 8009028:	bf00      	nop
 800902a:	bd80      	pop	{r7, pc}

0800902c <__malloc_lock>:
 800902c:	4801      	ldr	r0, [pc, #4]	@ (8009034 <__malloc_lock+0x8>)
 800902e:	f000 b891 	b.w	8009154 <__retarget_lock_acquire_recursive>
 8009032:	bf00      	nop
 8009034:	200015e8 	.word	0x200015e8

08009038 <__malloc_unlock>:
 8009038:	4801      	ldr	r0, [pc, #4]	@ (8009040 <__malloc_unlock+0x8>)
 800903a:	f000 b88c 	b.w	8009156 <__retarget_lock_release_recursive>
 800903e:	bf00      	nop
 8009040:	200015e8 	.word	0x200015e8

08009044 <memset>:
 8009044:	4402      	add	r2, r0
 8009046:	4603      	mov	r3, r0
 8009048:	4293      	cmp	r3, r2
 800904a:	d100      	bne.n	800904e <memset+0xa>
 800904c:	4770      	bx	lr
 800904e:	f803 1b01 	strb.w	r1, [r3], #1
 8009052:	e7f9      	b.n	8009048 <memset+0x4>

08009054 <_reclaim_reent>:
 8009054:	4b29      	ldr	r3, [pc, #164]	@ (80090fc <_reclaim_reent+0xa8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4283      	cmp	r3, r0
 800905a:	b570      	push	{r4, r5, r6, lr}
 800905c:	4604      	mov	r4, r0
 800905e:	d04b      	beq.n	80090f8 <_reclaim_reent+0xa4>
 8009060:	69c3      	ldr	r3, [r0, #28]
 8009062:	b1ab      	cbz	r3, 8009090 <_reclaim_reent+0x3c>
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	b16b      	cbz	r3, 8009084 <_reclaim_reent+0x30>
 8009068:	2500      	movs	r5, #0
 800906a:	69e3      	ldr	r3, [r4, #28]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	5959      	ldr	r1, [r3, r5]
 8009070:	2900      	cmp	r1, #0
 8009072:	d13b      	bne.n	80090ec <_reclaim_reent+0x98>
 8009074:	3504      	adds	r5, #4
 8009076:	2d80      	cmp	r5, #128	@ 0x80
 8009078:	d1f7      	bne.n	800906a <_reclaim_reent+0x16>
 800907a:	69e3      	ldr	r3, [r4, #28]
 800907c:	4620      	mov	r0, r4
 800907e:	68d9      	ldr	r1, [r3, #12]
 8009080:	f000 f86a 	bl	8009158 <_free_r>
 8009084:	69e3      	ldr	r3, [r4, #28]
 8009086:	6819      	ldr	r1, [r3, #0]
 8009088:	b111      	cbz	r1, 8009090 <_reclaim_reent+0x3c>
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f864 	bl	8009158 <_free_r>
 8009090:	6961      	ldr	r1, [r4, #20]
 8009092:	b111      	cbz	r1, 800909a <_reclaim_reent+0x46>
 8009094:	4620      	mov	r0, r4
 8009096:	f000 f85f 	bl	8009158 <_free_r>
 800909a:	69e1      	ldr	r1, [r4, #28]
 800909c:	b111      	cbz	r1, 80090a4 <_reclaim_reent+0x50>
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 f85a 	bl	8009158 <_free_r>
 80090a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090a6:	b111      	cbz	r1, 80090ae <_reclaim_reent+0x5a>
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 f855 	bl	8009158 <_free_r>
 80090ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090b0:	b111      	cbz	r1, 80090b8 <_reclaim_reent+0x64>
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 f850 	bl	8009158 <_free_r>
 80090b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80090ba:	b111      	cbz	r1, 80090c2 <_reclaim_reent+0x6e>
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 f84b 	bl	8009158 <_free_r>
 80090c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80090c4:	b111      	cbz	r1, 80090cc <_reclaim_reent+0x78>
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 f846 	bl	8009158 <_free_r>
 80090cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80090ce:	b111      	cbz	r1, 80090d6 <_reclaim_reent+0x82>
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 f841 	bl	8009158 <_free_r>
 80090d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80090d8:	b111      	cbz	r1, 80090e0 <_reclaim_reent+0x8c>
 80090da:	4620      	mov	r0, r4
 80090dc:	f000 f83c 	bl	8009158 <_free_r>
 80090e0:	6a23      	ldr	r3, [r4, #32]
 80090e2:	b14b      	cbz	r3, 80090f8 <_reclaim_reent+0xa4>
 80090e4:	4620      	mov	r0, r4
 80090e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090ea:	4718      	bx	r3
 80090ec:	680e      	ldr	r6, [r1, #0]
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 f832 	bl	8009158 <_free_r>
 80090f4:	4631      	mov	r1, r6
 80090f6:	e7bb      	b.n	8009070 <_reclaim_reent+0x1c>
 80090f8:	bd70      	pop	{r4, r5, r6, pc}
 80090fa:	bf00      	nop
 80090fc:	2000009c 	.word	0x2000009c

08009100 <__errno>:
 8009100:	4b01      	ldr	r3, [pc, #4]	@ (8009108 <__errno+0x8>)
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	2000009c 	.word	0x2000009c

0800910c <__libc_init_array>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4d0d      	ldr	r5, [pc, #52]	@ (8009144 <__libc_init_array+0x38>)
 8009110:	4c0d      	ldr	r4, [pc, #52]	@ (8009148 <__libc_init_array+0x3c>)
 8009112:	1b64      	subs	r4, r4, r5
 8009114:	10a4      	asrs	r4, r4, #2
 8009116:	2600      	movs	r6, #0
 8009118:	42a6      	cmp	r6, r4
 800911a:	d109      	bne.n	8009130 <__libc_init_array+0x24>
 800911c:	4d0b      	ldr	r5, [pc, #44]	@ (800914c <__libc_init_array+0x40>)
 800911e:	4c0c      	ldr	r4, [pc, #48]	@ (8009150 <__libc_init_array+0x44>)
 8009120:	f000 fa64 	bl	80095ec <_init>
 8009124:	1b64      	subs	r4, r4, r5
 8009126:	10a4      	asrs	r4, r4, #2
 8009128:	2600      	movs	r6, #0
 800912a:	42a6      	cmp	r6, r4
 800912c:	d105      	bne.n	800913a <__libc_init_array+0x2e>
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	f855 3b04 	ldr.w	r3, [r5], #4
 8009134:	4798      	blx	r3
 8009136:	3601      	adds	r6, #1
 8009138:	e7ee      	b.n	8009118 <__libc_init_array+0xc>
 800913a:	f855 3b04 	ldr.w	r3, [r5], #4
 800913e:	4798      	blx	r3
 8009140:	3601      	adds	r6, #1
 8009142:	e7f2      	b.n	800912a <__libc_init_array+0x1e>
 8009144:	0800a444 	.word	0x0800a444
 8009148:	0800a444 	.word	0x0800a444
 800914c:	0800a444 	.word	0x0800a444
 8009150:	0800a448 	.word	0x0800a448

08009154 <__retarget_lock_acquire_recursive>:
 8009154:	4770      	bx	lr

08009156 <__retarget_lock_release_recursive>:
 8009156:	4770      	bx	lr

08009158 <_free_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4605      	mov	r5, r0
 800915c:	2900      	cmp	r1, #0
 800915e:	d041      	beq.n	80091e4 <_free_r+0x8c>
 8009160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009164:	1f0c      	subs	r4, r1, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	bfb8      	it	lt
 800916a:	18e4      	addlt	r4, r4, r3
 800916c:	f7ff ff5e 	bl	800902c <__malloc_lock>
 8009170:	4a1d      	ldr	r2, [pc, #116]	@ (80091e8 <_free_r+0x90>)
 8009172:	6813      	ldr	r3, [r2, #0]
 8009174:	b933      	cbnz	r3, 8009184 <_free_r+0x2c>
 8009176:	6063      	str	r3, [r4, #4]
 8009178:	6014      	str	r4, [r2, #0]
 800917a:	4628      	mov	r0, r5
 800917c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009180:	f7ff bf5a 	b.w	8009038 <__malloc_unlock>
 8009184:	42a3      	cmp	r3, r4
 8009186:	d908      	bls.n	800919a <_free_r+0x42>
 8009188:	6820      	ldr	r0, [r4, #0]
 800918a:	1821      	adds	r1, r4, r0
 800918c:	428b      	cmp	r3, r1
 800918e:	bf01      	itttt	eq
 8009190:	6819      	ldreq	r1, [r3, #0]
 8009192:	685b      	ldreq	r3, [r3, #4]
 8009194:	1809      	addeq	r1, r1, r0
 8009196:	6021      	streq	r1, [r4, #0]
 8009198:	e7ed      	b.n	8009176 <_free_r+0x1e>
 800919a:	461a      	mov	r2, r3
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	b10b      	cbz	r3, 80091a4 <_free_r+0x4c>
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	d9fa      	bls.n	800919a <_free_r+0x42>
 80091a4:	6811      	ldr	r1, [r2, #0]
 80091a6:	1850      	adds	r0, r2, r1
 80091a8:	42a0      	cmp	r0, r4
 80091aa:	d10b      	bne.n	80091c4 <_free_r+0x6c>
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	4401      	add	r1, r0
 80091b0:	1850      	adds	r0, r2, r1
 80091b2:	4283      	cmp	r3, r0
 80091b4:	6011      	str	r1, [r2, #0]
 80091b6:	d1e0      	bne.n	800917a <_free_r+0x22>
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	6053      	str	r3, [r2, #4]
 80091be:	4408      	add	r0, r1
 80091c0:	6010      	str	r0, [r2, #0]
 80091c2:	e7da      	b.n	800917a <_free_r+0x22>
 80091c4:	d902      	bls.n	80091cc <_free_r+0x74>
 80091c6:	230c      	movs	r3, #12
 80091c8:	602b      	str	r3, [r5, #0]
 80091ca:	e7d6      	b.n	800917a <_free_r+0x22>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	1821      	adds	r1, r4, r0
 80091d0:	428b      	cmp	r3, r1
 80091d2:	bf04      	itt	eq
 80091d4:	6819      	ldreq	r1, [r3, #0]
 80091d6:	685b      	ldreq	r3, [r3, #4]
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	bf04      	itt	eq
 80091dc:	1809      	addeq	r1, r1, r0
 80091de:	6021      	streq	r1, [r4, #0]
 80091e0:	6054      	str	r4, [r2, #4]
 80091e2:	e7ca      	b.n	800917a <_free_r+0x22>
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	200014ac 	.word	0x200014ac
 80091ec:	00000000 	.word	0x00000000

080091f0 <log>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	ed2d 8b02 	vpush	{d8}
 80091f6:	ec55 4b10 	vmov	r4, r5, d0
 80091fa:	f000 f841 	bl	8009280 <__ieee754_log>
 80091fe:	4622      	mov	r2, r4
 8009200:	462b      	mov	r3, r5
 8009202:	4620      	mov	r0, r4
 8009204:	4629      	mov	r1, r5
 8009206:	eeb0 8a40 	vmov.f32	s16, s0
 800920a:	eef0 8a60 	vmov.f32	s17, s1
 800920e:	f7f7 fc3d 	bl	8000a8c <__aeabi_dcmpun>
 8009212:	b998      	cbnz	r0, 800923c <log+0x4c>
 8009214:	2200      	movs	r2, #0
 8009216:	2300      	movs	r3, #0
 8009218:	4620      	mov	r0, r4
 800921a:	4629      	mov	r1, r5
 800921c:	f7f7 fc2c 	bl	8000a78 <__aeabi_dcmpgt>
 8009220:	b960      	cbnz	r0, 800923c <log+0x4c>
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 fbfd 	bl	8000a28 <__aeabi_dcmpeq>
 800922e:	b160      	cbz	r0, 800924a <log+0x5a>
 8009230:	f7ff ff66 	bl	8009100 <__errno>
 8009234:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8009260 <log+0x70>
 8009238:	2322      	movs	r3, #34	@ 0x22
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	eeb0 0a48 	vmov.f32	s0, s16
 8009240:	eef0 0a68 	vmov.f32	s1, s17
 8009244:	ecbd 8b02 	vpop	{d8}
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	f7ff ff59 	bl	8009100 <__errno>
 800924e:	ecbd 8b02 	vpop	{d8}
 8009252:	2321      	movs	r3, #33	@ 0x21
 8009254:	6003      	str	r3, [r0, #0]
 8009256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800925a:	4803      	ldr	r0, [pc, #12]	@ (8009268 <log+0x78>)
 800925c:	f000 b808 	b.w	8009270 <nan>
 8009260:	00000000 	.word	0x00000000
 8009264:	fff00000 	.word	0xfff00000
 8009268:	0800a440 	.word	0x0800a440
 800926c:	00000000 	.word	0x00000000

08009270 <nan>:
 8009270:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009278 <nan+0x8>
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	00000000 	.word	0x00000000
 800927c:	7ff80000 	.word	0x7ff80000

08009280 <__ieee754_log>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	ec51 0b10 	vmov	r0, r1, d0
 8009288:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800928c:	b087      	sub	sp, #28
 800928e:	460d      	mov	r5, r1
 8009290:	da26      	bge.n	80092e0 <__ieee754_log+0x60>
 8009292:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009296:	4303      	orrs	r3, r0
 8009298:	4602      	mov	r2, r0
 800929a:	d10a      	bne.n	80092b2 <__ieee754_log+0x32>
 800929c:	49ce      	ldr	r1, [pc, #824]	@ (80095d8 <__ieee754_log+0x358>)
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	2000      	movs	r0, #0
 80092a4:	f7f7 fa82 	bl	80007ac <__aeabi_ddiv>
 80092a8:	ec41 0b10 	vmov	d0, r0, r1
 80092ac:	b007      	add	sp, #28
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	2900      	cmp	r1, #0
 80092b4:	da05      	bge.n	80092c2 <__ieee754_log+0x42>
 80092b6:	460b      	mov	r3, r1
 80092b8:	f7f6 ff96 	bl	80001e8 <__aeabi_dsub>
 80092bc:	2200      	movs	r2, #0
 80092be:	2300      	movs	r3, #0
 80092c0:	e7f0      	b.n	80092a4 <__ieee754_log+0x24>
 80092c2:	4bc6      	ldr	r3, [pc, #792]	@ (80095dc <__ieee754_log+0x35c>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	f7f7 f947 	bl	8000558 <__aeabi_dmul>
 80092ca:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80092ce:	460d      	mov	r5, r1
 80092d0:	4ac3      	ldr	r2, [pc, #780]	@ (80095e0 <__ieee754_log+0x360>)
 80092d2:	4295      	cmp	r5, r2
 80092d4:	dd06      	ble.n	80092e4 <__ieee754_log+0x64>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	f7f6 ff87 	bl	80001ec <__adddf3>
 80092de:	e7e3      	b.n	80092a8 <__ieee754_log+0x28>
 80092e0:	2300      	movs	r3, #0
 80092e2:	e7f5      	b.n	80092d0 <__ieee754_log+0x50>
 80092e4:	152c      	asrs	r4, r5, #20
 80092e6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80092ea:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80092ee:	441c      	add	r4, r3
 80092f0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80092f4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80092f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092fc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009300:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009304:	ea42 0105 	orr.w	r1, r2, r5
 8009308:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800930c:	2200      	movs	r2, #0
 800930e:	4bb5      	ldr	r3, [pc, #724]	@ (80095e4 <__ieee754_log+0x364>)
 8009310:	f7f6 ff6a 	bl	80001e8 <__aeabi_dsub>
 8009314:	1cab      	adds	r3, r5, #2
 8009316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800931a:	2b02      	cmp	r3, #2
 800931c:	4682      	mov	sl, r0
 800931e:	468b      	mov	fp, r1
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	dc53      	bgt.n	80093ce <__ieee754_log+0x14e>
 8009326:	2300      	movs	r3, #0
 8009328:	f7f7 fb7e 	bl	8000a28 <__aeabi_dcmpeq>
 800932c:	b1d0      	cbz	r0, 8009364 <__ieee754_log+0xe4>
 800932e:	2c00      	cmp	r4, #0
 8009330:	f000 8120 	beq.w	8009574 <__ieee754_log+0x2f4>
 8009334:	4620      	mov	r0, r4
 8009336:	f7f7 f8a5 	bl	8000484 <__aeabi_i2d>
 800933a:	a391      	add	r3, pc, #580	@ (adr r3, 8009580 <__ieee754_log+0x300>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	4606      	mov	r6, r0
 8009342:	460f      	mov	r7, r1
 8009344:	f7f7 f908 	bl	8000558 <__aeabi_dmul>
 8009348:	a38f      	add	r3, pc, #572	@ (adr r3, 8009588 <__ieee754_log+0x308>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
 8009352:	4630      	mov	r0, r6
 8009354:	4639      	mov	r1, r7
 8009356:	f7f7 f8ff 	bl	8000558 <__aeabi_dmul>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	e7ba      	b.n	80092da <__ieee754_log+0x5a>
 8009364:	a38a      	add	r3, pc, #552	@ (adr r3, 8009590 <__ieee754_log+0x310>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	4650      	mov	r0, sl
 800936c:	4659      	mov	r1, fp
 800936e:	f7f7 f8f3 	bl	8000558 <__aeabi_dmul>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	2000      	movs	r0, #0
 8009378:	499b      	ldr	r1, [pc, #620]	@ (80095e8 <__ieee754_log+0x368>)
 800937a:	f7f6 ff35 	bl	80001e8 <__aeabi_dsub>
 800937e:	4652      	mov	r2, sl
 8009380:	4606      	mov	r6, r0
 8009382:	460f      	mov	r7, r1
 8009384:	465b      	mov	r3, fp
 8009386:	4650      	mov	r0, sl
 8009388:	4659      	mov	r1, fp
 800938a:	f7f7 f8e5 	bl	8000558 <__aeabi_dmul>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	4630      	mov	r0, r6
 8009394:	4639      	mov	r1, r7
 8009396:	f7f7 f8df 	bl	8000558 <__aeabi_dmul>
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	b914      	cbnz	r4, 80093a6 <__ieee754_log+0x126>
 80093a0:	4632      	mov	r2, r6
 80093a2:	463b      	mov	r3, r7
 80093a4:	e0a0      	b.n	80094e8 <__ieee754_log+0x268>
 80093a6:	4620      	mov	r0, r4
 80093a8:	f7f7 f86c 	bl	8000484 <__aeabi_i2d>
 80093ac:	a374      	add	r3, pc, #464	@ (adr r3, 8009580 <__ieee754_log+0x300>)
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	4680      	mov	r8, r0
 80093b4:	4689      	mov	r9, r1
 80093b6:	f7f7 f8cf 	bl	8000558 <__aeabi_dmul>
 80093ba:	a373      	add	r3, pc, #460	@ (adr r3, 8009588 <__ieee754_log+0x308>)
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	4604      	mov	r4, r0
 80093c2:	460d      	mov	r5, r1
 80093c4:	4640      	mov	r0, r8
 80093c6:	4649      	mov	r1, r9
 80093c8:	f7f7 f8c6 	bl	8000558 <__aeabi_dmul>
 80093cc:	e0a5      	b.n	800951a <__ieee754_log+0x29a>
 80093ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80093d2:	f7f6 ff0b 	bl	80001ec <__adddf3>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	4650      	mov	r0, sl
 80093dc:	4659      	mov	r1, fp
 80093de:	f7f7 f9e5 	bl	80007ac <__aeabi_ddiv>
 80093e2:	e9cd 0100 	strd	r0, r1, [sp]
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7f7 f84c 	bl	8000484 <__aeabi_i2d>
 80093ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f4:	4610      	mov	r0, r2
 80093f6:	4619      	mov	r1, r3
 80093f8:	f7f7 f8ae 	bl	8000558 <__aeabi_dmul>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009404:	f7f7 f8a8 	bl	8000558 <__aeabi_dmul>
 8009408:	a363      	add	r3, pc, #396	@ (adr r3, 8009598 <__ieee754_log+0x318>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	4680      	mov	r8, r0
 8009410:	4689      	mov	r9, r1
 8009412:	f7f7 f8a1 	bl	8000558 <__aeabi_dmul>
 8009416:	a362      	add	r3, pc, #392	@ (adr r3, 80095a0 <__ieee754_log+0x320>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f7f6 fee6 	bl	80001ec <__adddf3>
 8009420:	4642      	mov	r2, r8
 8009422:	464b      	mov	r3, r9
 8009424:	f7f7 f898 	bl	8000558 <__aeabi_dmul>
 8009428:	a35f      	add	r3, pc, #380	@ (adr r3, 80095a8 <__ieee754_log+0x328>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f6 fedd 	bl	80001ec <__adddf3>
 8009432:	4642      	mov	r2, r8
 8009434:	464b      	mov	r3, r9
 8009436:	f7f7 f88f 	bl	8000558 <__aeabi_dmul>
 800943a:	a35d      	add	r3, pc, #372	@ (adr r3, 80095b0 <__ieee754_log+0x330>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f6 fed4 	bl	80001ec <__adddf3>
 8009444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009448:	f7f7 f886 	bl	8000558 <__aeabi_dmul>
 800944c:	a35a      	add	r3, pc, #360	@ (adr r3, 80095b8 <__ieee754_log+0x338>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009456:	4640      	mov	r0, r8
 8009458:	4649      	mov	r1, r9
 800945a:	f7f7 f87d 	bl	8000558 <__aeabi_dmul>
 800945e:	a358      	add	r3, pc, #352	@ (adr r3, 80095c0 <__ieee754_log+0x340>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f6 fec2 	bl	80001ec <__adddf3>
 8009468:	4642      	mov	r2, r8
 800946a:	464b      	mov	r3, r9
 800946c:	f7f7 f874 	bl	8000558 <__aeabi_dmul>
 8009470:	a355      	add	r3, pc, #340	@ (adr r3, 80095c8 <__ieee754_log+0x348>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f6 feb9 	bl	80001ec <__adddf3>
 800947a:	4642      	mov	r2, r8
 800947c:	464b      	mov	r3, r9
 800947e:	f7f7 f86b 	bl	8000558 <__aeabi_dmul>
 8009482:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800948e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009492:	f7f6 feab 	bl	80001ec <__adddf3>
 8009496:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800949a:	3551      	adds	r5, #81	@ 0x51
 800949c:	4335      	orrs	r5, r6
 800949e:	2d00      	cmp	r5, #0
 80094a0:	4680      	mov	r8, r0
 80094a2:	4689      	mov	r9, r1
 80094a4:	dd48      	ble.n	8009538 <__ieee754_log+0x2b8>
 80094a6:	4b50      	ldr	r3, [pc, #320]	@ (80095e8 <__ieee754_log+0x368>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	4650      	mov	r0, sl
 80094ac:	4659      	mov	r1, fp
 80094ae:	f7f7 f853 	bl	8000558 <__aeabi_dmul>
 80094b2:	4652      	mov	r2, sl
 80094b4:	465b      	mov	r3, fp
 80094b6:	f7f7 f84f 	bl	8000558 <__aeabi_dmul>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4606      	mov	r6, r0
 80094c0:	460f      	mov	r7, r1
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f6 fe91 	bl	80001ec <__adddf3>
 80094ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ce:	f7f7 f843 	bl	8000558 <__aeabi_dmul>
 80094d2:	4680      	mov	r8, r0
 80094d4:	4689      	mov	r9, r1
 80094d6:	b964      	cbnz	r4, 80094f2 <__ieee754_log+0x272>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f6 fe82 	bl	80001e8 <__aeabi_dsub>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4650      	mov	r0, sl
 80094ea:	4659      	mov	r1, fp
 80094ec:	f7f6 fe7c 	bl	80001e8 <__aeabi_dsub>
 80094f0:	e6da      	b.n	80092a8 <__ieee754_log+0x28>
 80094f2:	a323      	add	r3, pc, #140	@ (adr r3, 8009580 <__ieee754_log+0x300>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094fc:	f7f7 f82c 	bl	8000558 <__aeabi_dmul>
 8009500:	a321      	add	r3, pc, #132	@ (adr r3, 8009588 <__ieee754_log+0x308>)
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	4604      	mov	r4, r0
 8009508:	460d      	mov	r5, r1
 800950a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950e:	f7f7 f823 	bl	8000558 <__aeabi_dmul>
 8009512:	4642      	mov	r2, r8
 8009514:	464b      	mov	r3, r9
 8009516:	f7f6 fe69 	bl	80001ec <__adddf3>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4630      	mov	r0, r6
 8009520:	4639      	mov	r1, r7
 8009522:	f7f6 fe61 	bl	80001e8 <__aeabi_dsub>
 8009526:	4652      	mov	r2, sl
 8009528:	465b      	mov	r3, fp
 800952a:	f7f6 fe5d 	bl	80001e8 <__aeabi_dsub>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4620      	mov	r0, r4
 8009534:	4629      	mov	r1, r5
 8009536:	e7d9      	b.n	80094ec <__ieee754_log+0x26c>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4650      	mov	r0, sl
 800953e:	4659      	mov	r1, fp
 8009540:	f7f6 fe52 	bl	80001e8 <__aeabi_dsub>
 8009544:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009548:	f7f7 f806 	bl	8000558 <__aeabi_dmul>
 800954c:	4606      	mov	r6, r0
 800954e:	460f      	mov	r7, r1
 8009550:	2c00      	cmp	r4, #0
 8009552:	f43f af25 	beq.w	80093a0 <__ieee754_log+0x120>
 8009556:	a30a      	add	r3, pc, #40	@ (adr r3, 8009580 <__ieee754_log+0x300>)
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009560:	f7f6 fffa 	bl	8000558 <__aeabi_dmul>
 8009564:	a308      	add	r3, pc, #32	@ (adr r3, 8009588 <__ieee754_log+0x308>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	4604      	mov	r4, r0
 800956c:	460d      	mov	r5, r1
 800956e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009572:	e729      	b.n	80093c8 <__ieee754_log+0x148>
 8009574:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80095d0 <__ieee754_log+0x350>
 8009578:	e698      	b.n	80092ac <__ieee754_log+0x2c>
 800957a:	bf00      	nop
 800957c:	f3af 8000 	nop.w
 8009580:	fee00000 	.word	0xfee00000
 8009584:	3fe62e42 	.word	0x3fe62e42
 8009588:	35793c76 	.word	0x35793c76
 800958c:	3dea39ef 	.word	0x3dea39ef
 8009590:	55555555 	.word	0x55555555
 8009594:	3fd55555 	.word	0x3fd55555
 8009598:	df3e5244 	.word	0xdf3e5244
 800959c:	3fc2f112 	.word	0x3fc2f112
 80095a0:	96cb03de 	.word	0x96cb03de
 80095a4:	3fc74664 	.word	0x3fc74664
 80095a8:	94229359 	.word	0x94229359
 80095ac:	3fd24924 	.word	0x3fd24924
 80095b0:	55555593 	.word	0x55555593
 80095b4:	3fe55555 	.word	0x3fe55555
 80095b8:	d078c69f 	.word	0xd078c69f
 80095bc:	3fc39a09 	.word	0x3fc39a09
 80095c0:	1d8e78af 	.word	0x1d8e78af
 80095c4:	3fcc71c5 	.word	0x3fcc71c5
 80095c8:	9997fa04 	.word	0x9997fa04
 80095cc:	3fd99999 	.word	0x3fd99999
	...
 80095d8:	c3500000 	.word	0xc3500000
 80095dc:	43500000 	.word	0x43500000
 80095e0:	7fefffff 	.word	0x7fefffff
 80095e4:	3ff00000 	.word	0x3ff00000
 80095e8:	3fe00000 	.word	0x3fe00000

080095ec <_init>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr

080095f8 <_fini>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr
